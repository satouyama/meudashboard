{"version":3,"sources":["../node_modules/polylabel/index.js","../node_modules/tinyqueue/index.js","../node_modules/d3-array/src/ascending.js","../node_modules/d3-array/src/bisector.js","../node_modules/d3-array/src/bisect.js","../node_modules/d3-array/src/cross.js","../node_modules/d3-array/src/number.js","../node_modules/d3-array/src/array.js","../node_modules/d3-array/src/range.js","../node_modules/d3-array/src/ticks.js","../node_modules/d3-array/src/threshold/sturges.js","../node_modules/d3-array/src/quantile.js","../node_modules/d3-array/src/merge.js","../node_modules/d3-array/src/index.js","../node_modules/@amcharts/amcharts4-geodata/worldLow.js","../node_modules/d3-geo/src/adder.js","../node_modules/d3-geo/src/math.js","../node_modules/d3-geo/src/noop.js","../node_modules/d3-geo/src/stream.js","../node_modules/d3-geo/src/area.js","../node_modules/d3-geo/src/cartesian.js","../node_modules/d3-geo/src/bounds.js","../node_modules/d3-geo/src/centroid.js","../node_modules/d3-geo/src/compose.js","../node_modules/d3-geo/src/rotation.js","../node_modules/d3-geo/src/circle.js","../node_modules/d3-geo/src/clip/buffer.js","../node_modules/d3-geo/src/pointEqual.js","../node_modules/d3-geo/src/clip/rejoin.js","../node_modules/d3-geo/src/polygonContains.js","../node_modules/d3-geo/src/clip/index.js","../node_modules/d3-geo/src/clip/antimeridian.js","../node_modules/d3-geo/src/clip/circle.js","../node_modules/d3-geo/src/clip/line.js","../node_modules/d3-geo/src/clip/rectangle.js","../node_modules/d3-geo/src/clip/extent.js","../node_modules/d3-geo/src/length.js","../node_modules/d3-geo/src/distance.js","../node_modules/d3-geo/src/graticule.js","../node_modules/d3-geo/src/interpolate.js","../node_modules/d3-geo/src/path/area.js","../node_modules/d3-geo/src/identity.js","../node_modules/d3-geo/src/path/bounds.js","../node_modules/d3-geo/src/path/centroid.js","../node_modules/d3-geo/src/path/context.js","../node_modules/d3-geo/src/path/measure.js","../node_modules/d3-geo/src/path/string.js","../node_modules/d3-geo/src/transform.js","../node_modules/d3-geo/src/projection/fit.js","../node_modules/d3-geo/src/projection/resample.js","../node_modules/d3-geo/src/projection/index.js","../node_modules/d3-geo/src/projection/conic.js","../node_modules/d3-geo/src/projection/conicEqualArea.js","../node_modules/d3-geo/src/projection/cylindricalEqualArea.js","../node_modules/d3-geo/src/projection/albers.js","../node_modules/d3-geo/src/projection/albersUsa.js","../node_modules/d3-geo/src/projection/azimuthal.js","../node_modules/d3-geo/src/projection/azimuthalEqualArea.js","../node_modules/d3-geo/src/projection/azimuthalEquidistant.js","../node_modules/d3-geo/src/projection/mercator.js","../node_modules/d3-geo/src/projection/equirectangular.js","../node_modules/d3-geo/src/projection/conicEquidistant.js","../node_modules/d3-geo/src/projection/equalEarth.js","../node_modules/d3-geo/src/projection/gnomonic.js","../node_modules/d3-geo/src/projection/naturalEarth1.js","../node_modules/d3-geo/src/projection/orthographic.js","../node_modules/d3-geo/src/projection/stereographic.js","../node_modules/d3-geo/src/projection/transverseMercator.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapSeries.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapObject.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapImage.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapUtils.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapPolygon.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapPolygonSeries.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/projections/Projection.js","../node_modules/d3-geo/src/path/index.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/SmallMap.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/Geo.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapLineObject.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapImageSeries.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapLine.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapLineSeries.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/Graticule.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/GraticuleSeries.js","../node_modules/@amcharts/amcharts4/.internal/charts/types/MapChart.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapSpline.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapArc.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapSplineSeries.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/MapArcSeries.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/ZoomControl.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/projections/Mercator.js","../node_modules/d3-geo-projection/src/math.js","../node_modules/d3-geo-projection/src/aitoff.js","../node_modules/d3-geo-projection/src/august.js","../node_modules/d3-geo-projection/src/baker.js","../node_modules/d3-geo-projection/src/hammer.js","../node_modules/d3-geo-projection/src/mollweide.js","../node_modules/d3-geo-projection/src/boggs.js","../node_modules/d3-geo-projection/src/sinusoidal.js","../node_modules/d3-geo-projection/src/bromley.js","../node_modules/d3-geo-projection/src/collignon.js","../node_modules/d3-geo-projection/src/craig.js","../node_modules/d3-geo-projection/src/craster.js","../node_modules/d3-geo-projection/src/cylindricalEqualArea.js","../node_modules/d3-geo-projection/src/eckert1.js","../node_modules/d3-geo-projection/src/eckert2.js","../node_modules/d3-geo-projection/src/eckert3.js","../node_modules/d3-geo-projection/src/eckert4.js","../node_modules/d3-geo-projection/src/eckert5.js","../node_modules/d3-geo-projection/src/eckert6.js","../node_modules/d3-geo-projection/src/eisenlohr.js","../node_modules/d3-geo-projection/src/fahey.js","../node_modules/d3-geo-projection/src/foucaut.js","../node_modules/d3-geo-projection/src/newton.js","../node_modules/d3-geo-projection/src/gingery.js","../node_modules/d3-geo-projection/src/ginzburgPolyconic.js","../node_modules/d3-geo-projection/src/ginzburg4.js","../node_modules/d3-geo-projection/src/ginzburg5.js","../node_modules/d3-geo-projection/src/ginzburg6.js","../node_modules/d3-geo-projection/src/ginzburg8.js","../node_modules/d3-geo-projection/src/ginzburg9.js","../node_modules/d3-geo-projection/src/gringorten.js","../node_modules/d3-geo-projection/src/elliptic.js","../node_modules/d3-geo-projection/src/guyou.js","../node_modules/d3-geo-projection/src/healpix.js","../node_modules/d3-geo-projection/src/hill.js","../node_modules/d3-geo-projection/src/sinuMollweide.js","../node_modules/d3-geo-projection/src/homolosine.js","../node_modules/d3-geo-projection/src/kavrayskiy7.js","../node_modules/d3-geo-projection/src/lagrange.js","../node_modules/d3-geo-projection/src/larrivee.js","../node_modules/d3-geo-projection/src/laskowski.js","../node_modules/d3-geo-projection/src/littrow.js","../node_modules/d3-geo-projection/src/miller.js","../node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","../node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","../node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","../node_modules/d3-geo-projection/src/naturalEarth2.js","../node_modules/d3-geo-projection/src/nellHammer.js","../node_modules/d3-geo-projection/src/nicolosi.js","../node_modules/d3-geo-projection/src/patterson.js","../node_modules/d3-geo-projection/src/polyconic.js","../node_modules/d3-geo-projection/src/polyhedral/octahedron.js","../node_modules/d3-geo-projection/src/polyhedral/collignon.js","../node_modules/d3-geo-projection/src/rectangularPolyconic.js","../node_modules/d3-geo-projection/src/robinson.js","../node_modules/d3-geo-projection/src/times.js","../node_modules/d3-geo-projection/src/vanDerGrinten.js","../node_modules/d3-geo-projection/src/vanDerGrinten2.js","../node_modules/d3-geo-projection/src/vanDerGrinten3.js","../node_modules/d3-geo-projection/src/vanDerGrinten4.js","../node_modules/d3-geo-projection/src/wagner.js","../node_modules/d3-geo-projection/src/wagner4.js","../node_modules/d3-geo-projection/src/wagner6.js","../node_modules/d3-geo-projection/src/wagner7.js","../node_modules/d3-geo-projection/src/wiechel.js","../node_modules/d3-geo-projection/src/winkel3.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/projections/Miller.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/projections/Eckert6.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/projections/Orthographic.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/projections/Stereographic.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/projections/Albers.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/projections/AlbersUsa.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/projections/NaturalEarth1.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/projections/AzimuthalEqualArea.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/projections/EqualEarth.js","../node_modules/@amcharts/amcharts4/maps.js"],"names":["Queue","__webpack_require__","polylabel","polygon","precision","debug","minX","minY","maxX","maxY","i","length","p","width","height","cellSize","Math","min","h","cellQueue","compareMax","x","y","push","Cell","bestCell","area","points","len","j","a","b","f","getCentroidCell","bboxCell","d","numProbes","cell","pop","console","log","round","max","this","inside","minDistSq","Infinity","k","ring","getSegDistSq","sqrt","pointToPolygonDist","SQRT2","px","py","dx","dy","t","module","exports","default","TinyQueue","data","compare","defaultCompare","_down","prototype","item","_up","top","peek","pos","parent","current","halfLength","left","right","best","ascending","NaN","bisector","lo","hi","mid","ascendingBisect","bisectRight","bisect","number","array_array","Array","range","slice","map","start","stop","step","n","arguments","ceil","e10","e5","e2","ticks","count","reverse","tickIncrement","isFinite","floor","power","LN10","error","pow","tickStep","step0","abs","step1","quantile","values","valueof","i0","value0","merge","arrays","m","merged","array","__webpack_exports__","type","features","geometry","coordinates","properties","name","id","adder","Adder","reset","constructor","s","add","_add","temp","valueOf","bv","av","math_epsilon","epsilon2","pi","PI","halfPi","quarterPi","tau","degrees","radians","atan","atan2","cos","exp","sin","math_sign","sign","tan","acos","asin","haversin","noop","streamGeometry","stream","streamGeometryType","hasOwnProperty","streamObjectType","Feature","object","FeatureCollection","Sphere","sphere","Point","point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","area_lambda00","phi00","area_lambda0","area_cosPhi0","area_sinPhi0","src_stream","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","u","v","cartesian_spherical","cartesian","cartesian_cartesian","spherical","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","l","bounds_lambda0","bounds_phi0","bounds_lambda1","bounds_phi1","bounds_lambda2","bounds_lambda00","bounds_phi00","bounds_p0","ranges","deltaSum","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","bounds_linePoint","normal","inflection","phii","delta","lambdai","antimeridian","bounds_angle","lambda0","lambda1","rangeCompare","rangeContains","src_bounds","feature","deltaMax","sort","compose","invert","rotationIdentity","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","z","src_rotation","rotate","forward","circleStream","radius","direction","t0","t1","cosRadius","sinRadius","circleRadius","buffer","line","lines","rejoin","concat","shift","result","pointEqual","Intersection","other","entry","o","e","segments","compareIntersection","startInside","interpolate","subject","clip","forEach","segment","p0","p1","rejoin_link","isSubject","sum","polygonContains_longitude","polygonContains","angle","winding","point0","phi0","sinPhi0","cosPhi0","sinPhi1","cosPhi1","point1","phi1","absDelta","arc","intersection","phiArc","src_clip","pointVisible","clipLine","sink","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","Object","src","clip_compareIntersection","pointLine","clean","ringSegments","filter","validSegment","clip_antimeridian","_clean","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","from","to","clip_circle","cr","smallRadius","notHemisphere","visible","intersect","two","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","A","w","uu","t2","q","polar","q1","code","r","c0","v0","v00","point2","c","clip_line","x0","y0","x1","y1","ax","ay","clipMax","clipMin","clipRectangle","a1","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","linePoint","a0","b0","b1","polygonInside","cleanInside","length_lambda0","length_sinPhi0","length_cosPhi0","lengthSum","lengthStream","lengthPointFirst","lengthLineEnd","lengthPoint","cosDelta","distance_coordinates","distance_object","src_distance","graticuleX","graticuleY","graticule_graticule","X1","X0","Y1","Y0","X","Y","DX","DY","graticule","outline","extent","_","extentMajor","extentMinor","stepMajor","stepMinor","area_x00","area_y00","area_x0","area_y0","src_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","B","distance","identity","area_areaSum","area_areaRingSum","area_areaStream","area_areaRingStart","area_areaRingEnd","area_areaPointFirst","area_areaPoint","path_area","bounds_x0","bounds_y0","bounds_x1","bounds_y1","centroid_x00","centroid_y00","path_centroid_x0","path_centroid_y0","path_bounds","bounds","path_centroid_X0","path_centroid_Y0","centroid_Z0","path_centroid_X1","path_centroid_Y1","centroid_Z1","centroid_X2","centroid_Y2","centroid_Z2","centroid_centroidStream","centroid_centroidPoint","centroid_centroidLineStart","centroid_centroidLineEnd","centroid_centroidRingStart","centroid_centroidRingEnd","centroid","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","path_centroid","PathContext","context","_context","_radius","pointRadius","_line","_point","closePath","moveTo","lineTo","lengthRing","measure_x00","measure_y00","measure_x0","measure_y0","measure_lengthSum","measure_lengthStream","measure_lengthPointFirst","measure_lengthPoint","measure","PathString","_string","string_circle","_circle","join","transformer","methods","TransformStream","key","fit","projection","fitBounds","clipExtent","scale","translate","fit_fitExtent","fit_fitSize","size","fit_fitWidth","fit_fitHeight","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","depth","d2","phi2","lambda2","x2","y2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample_resample","resampleNone","transformRadians","scaleTranslateRotate","alpha","cosAlpha","sinAlpha","ai","bi","ci","fi","transform","projection_projection","projectionMutator","projectAt","projectResample","projectTransform","projectRotateTransform","cache","cacheStream","theta","preclip","postclip","recenter","center","apply","transformRotate","undefined","clipAngle","fitExtent","fitSize","fitWidth","fitHeight","conicProjection","parallels","conicEqualAreaRaw","cylindricalEqualAreaRaw","r0","r0y","conicEqualArea","albers","projection_albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","albersUsa","streams","multiplex","azimuthalRaw","cx","cy","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEqualArea","azimuthalEquidistantRaw","mercatorRaw","mercator","mercatorProjection","reclip","equirectangularRaw","projection_equirectangular","A1","equalEarth_A2","A3","A4","equalEarth_M","equalEarthRaw","l2","l6","equalEarth","gnomonicRaw","naturalEarth1Raw","phi4","naturalEarth1","orthographicRaw","orthographic","stereographicRaw","stereographic","transverseMercatorRaw","MapSeries_MapSeriesDataItem","_super","MapSeriesDataItem","_this","call","className","value","applyTheme","tslib_es6","defineProperty","get","set","setValue","enumerable","configurable","setProperty","_east","_west","_south","_north","updateExtremes","getFeature","west","south","north","east","changed","utils_Math","component","invalidateDataItems","Series","MapSeries_MapSeries","MapSeries","isMeasured","nonScalingStroke","dataFields","ignoreBounds","tooltip","showInViewport","createDataItem","checkInclude","includes","excludes","indexOf","getPropertyValue","setPropertyValue","invalidateData","processIncExc","chart","handleObjectAdded","event","mapObject","newValue","series","strokeWidth","_geodata","geodata","madeFromGeoData","splice","disposeData","_dataSources","getDataSource","removeDispose","events","on","loadData","setDataSourceEvents","getFeatures","validateDataItems","dataItems","each","dataItem","Type","_mapObjects","dispatch","_northDefined","_southDefined","_westDefined","_eastDefined","processConfig","config","name_1","window","JSON","parse","Error","asIs","field","updateTooltipBounds","topParent","setBounds","maxWidth","maxHeight","Registry","registeredClasses","MapObject_MapObject","MapObject","layout","clickable","validate","readerTitle","itemReaderText","Container","MapImage_MapImage","MapImage","validatePosition","latitude","longitude","d3Projection","d3Path","__disabled","multiLineToGeo","multiLine","utils_Array","multiPointToGeo","pointToGeo","multiGeoToPoint","geoPoints","geoPoint","multiGeoLineToMultiLine","multiGeoLine","multiGeoPolygonToMultipolygon","multiGeoPolygon","geoPolygon","surface","hole","multiPolygon","MapPolygon_MapPolygon","MapPolygon","createChild","shouldClone","applyOnClones","interfaceColors","InterfaceColorSet","fill","getFor","stroke","strokeOpacity","tooltipPosition","pathGenerator","path","calculateVisualCenter","biggestArea","biggestPolygon","polylabel_default","_visualLongitude","_visualLatitude","measureElement","adapter","pixelWidth","pixelHeight","copyFrom","source","getTooltipX","convert","visualLongitude","visualLatitude","getTooltipY","MapPolygonSeries_MapPolygonSeriesDataItem","MapPolygonSeriesDataItem","_mapPolygon","mapPolygon_1","mapPolygons","create","addSprite","_disposers","Disposer","removeValue","_polygon","_multiPolygon","_geoPolygon","_multiGeoPolygon","MapPolygonSeries_MapPolygonSeries","MapPolygonSeries","clear","validateData","useGeodata","geoJSON","_loop_1","id_1","this_1","include","exclude","dataObject","Utils","mapPolygon","zIndex","propertyFields","boxArea","_mapPolygons","polygonTemplate","List","template","focusable","getPolygonById","Iterator","iterator","dataContext","_dataItem","Projection_Projection","Projection","_d3Projection","_d3Path","projectionStream","contextStream","src_path","invalidateProjection","unproject","deltaLongitude","deltaLatitude","unrotate","intermediatePoint","pointA","pointB","position","multiDistance","positionToPoint","positionToGeoPoint","intermediatePointA","intermediatePointB","pa","pb","totalDistance","currentDistance","positionA","positionB","positionAB","SmallMap_SmallMap","SmallMap","_chart","align","valign","percentHeight","percentWidth","margin","background","fillOpacity","moveToPosition","updateMapSize","seriesContainer","rectangle","Rectangle","Color","verticalCenter","horizontalCenter","_series","handleSeriesAdded","handleSeriesRemoved","contains","newSeries","clone","dataUsers","interactionsEnabled","hidden","invalidate","rectPoint","spritePoint","seriesPointToGeo","zoomToGeoPoint","zoomLevel","updateRectangle","pixelX","pixelY","scaleRatio","bbox","group","node","getBBox","err","afterDraw","maskRectangle","hasKey","getKey","normalizePoint","wrapAngleTo180","latitude180","MapLineObject_MapLineObject","MapLineObject","adjustRotation","mapLine","shortestDistance","MapImageSeries_MapImageSeriesDataItem","MapImageSeriesDataItem","_mapImage","mapImage_1","mapImages","_geoPoint","MapImageSeries_MapImageSeries","MapImageSeries","multiPoint","multiGeoPoint","_parseDataFrom","mapImage","isDisposed","moveValue","_mapImages","validateDataElement","getImageById","MapLine_MapLine","MapLine","_imageListeners","createLine","Polyline","multiline","multiline_1","multiline_1_1","next","done","segment_1","segment_1_1","e_1_1","e_1","_a","return","e_2_1","e_2","_b","normalizeMultiline","images","handleImagesToConnect","_c","imagesToConnect","image","img","disposer","property","convertedPoints","convertedSegmentPoints","slen","_arrow","lineObjects","handleGlobalScale","_lineObjects","handleLineObjectAdded","mapLineObject","arrow","triangle","Triangle","Percent","MapLineSeries_MapLineSeriesDataItem","MapLineSeriesDataItem","_mapLine","mapLine_1","mapLines","_multiLine","_multiGeoLine","_geoLine","geoLine","MapLineSeries_MapLineSeries","MapLineSeries","_mapLines","lineTemplate","getLineById","Graticule_Graticule","Graticule","GraticuleSeries_GraticuleSeriesDataItem","GraticuleSeriesDataItem","GraticuleSeries_GraticuleSeries","GraticuleSeries","longitudeStep","latitudeStep","singleSprite","disableType","hiddenInLegend","lineStrings","lineString","MapChart_MapChart","MapChartDataItem","SerialChart","MapChart","zoomDuration","zoomEasing","Ease","minZoomLevel","maxZoomLevel","_prevZoomGeoPoint","maxPanOut","homeZoomLevel","zoomStep","padding","backgroundSeries","minWidth","minHeight","once","handleAllInited","inert","resizable","handleMapTransform","handleDoubleHit","handleDrag","dragWhileResize","chartContainer","inited","_mapAnimation","allInited_1","dataInvalid","updateScaleRatio","_zoomGeoPointReal","chartContainerBg","dragStart","target","interactions","downPointers","getIndex","dragStop","handleMapDown","language","Interaction","body","ev","hasFocused","_zoomControl","thumb","isFocused","Keyboard","getEventKey","pan","mouseWheelBehavior","interaction","handlePanDown","handlePanUp","panSprite","Circle","handlePanMove","opacity","panBehavior","svgPoint","pointer","htmlContainer","svgContainer","_downPointOrig","_downDeltaLongitude","_downDeltaLatitude","isResized","dln","dlt","dlg","downGeoLocal","local","geoLocal","updateCenterGeoPoint","goHome","updateZoomGeoPoint","seriesPoint","innerWidth","pixelPaddingLeft","innerHeight","pixelPaddingTop","maxLeft","maxRight","maxTop","maxBottom","seriesMaxLeft","seriesMaxRight","seriesMaxTop","seriesMaxBottom","seriesWidth","seriesHeight","_centerGeoPoint","ww","hh","zoomGeoPoint","applyInternalDefaults","cssScale","svgPointToGeo","zoomIn","handleWheel","zoomOut","_mouseWheelDisposer","dispose","wheelable","draggable","addDisposer","foundGraticule","deltaLong","deltaLat","initialScale","invalidateDataUsers","_backgroundSeries","stepLong","stepLat","ln","ll","lt","getBackground","_fitWidth","_fitHeight","hScale","vScale","geoPointToSVG","geoPointToSeries","dataUser","duration","mapPoint","animate","zoomToMapObject","dataItem_1","polygonPoint","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","zoomControl","createSeries","rotateMap","createClassInstance","configOrder","homeGeoPoint","centerGeoPoint","setPaper","paper","hideOverflow","color","setLegend","legend","setTapToActivate","isTouchProtected","handleTapToActivate","handleTapToActivateDeactivation","MapSpline_MapSpline","MapSpline","Polyspline","tensionX","tensionY","MapArc_MapArc","MapArc","Polyarc","MapSplineSeries_MapSplineSeriesDataItem","MapSplineSeriesDataItem","MapSplineSeries_MapSplineSeries","MapSplineSeries","MapArcSeries_MapArcSeriesDataItem","MapArcSeriesDataItem","MapArcSeries_MapArcSeries","MapArcSeries","ZoomControl_ZoomControl","ZoomControl","plusButton","Button","label","text","slider","handleBackgroundClick","updateThumbSize","handleThumbDrag","minusButton","role","readerLive","fixLayout","marginTop","marginBottom","toFront","toBack","sprite","maxPower","LN2","minPower","updateThumb","isKey","stepCount","isDown","createBackground","RoundedRectangle","Mercator_Mercator","Mercator","math_abs","math_atan","math_atan2","math_cos","math_exp","math_floor","math_log","math_pow","src_math_sign","math_sin","math_tan","src_math_epsilon","math_epsilon2","math_pi","math_halfPi","math_quarterPi","sqrt1_2","SQRT1_2","sqrt2","math_sqrt","sqrtPi","math_tau","math_degrees","math_radians","math_asin","math_acos","sinh","cosh","aitoffRaw","cosy","sincia","sinci","sinx","sinx_2","cosx_2","siny","sin_2y","sin2y","cos2y","sin2x_2","fx","fy","dxdx","dxdy","dydx","dydy","augustRaw","tanPhi","sin3Eta","eta","xi","arcosh","arsinh","cosEta","coshXi","sqrt8","baker_phi0","bakerRaw","cosPhi_2","tanPhi_2","hammerQuarticAuthalicRaw","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","mollweideRaw","boggs_k","boggs_w","boggsRaw","ky","sinusoidalRaw","collignonRaw","sqrt3","crasterRaw","cylindricalEqualArea_cylindricalEqualAreaRaw","eckert1Raw","eckert2Raw","eckert3Raw","eckert4Raw","eckert5Raw","eckert6Raw","eckert6","eisenlohrK","eisenlohrRaw","s0","_0","_1","s1","cos1","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","denominator","faheyK","faheyRaw","foucautRaw","cosk","solve","f0","f1","steps","ginzburgPolyconic","g","xB","yB","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg8Raw","lambda4","gringortenRaw","sLambda","sPhi","r2","p2","a2","secPhi","drdPhi","dp2dPhi","mu","nu","zeta","g2","zetaMug","f2","df","gringortenHexadecant","sx","sy","gringortenHexadecantInvert","ellipticJ","twon","ellipticF","dPhi","guyouRaw","k_","K","psi","at","y_1","guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","ellipticFi","ellipticJi","tn","guyouComplexDivide","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","homolosineRaw","kavrayskiy7Raw","pi_sqrt2","larriveeRaw","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","laskowskiRaw","lambdaPhi","littrowRaw","y2_1","x2_y2_1","millerRaw","miller","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarQuarticRaw","sinTheta_2","mtFlatPolarSinusoidalRaw","naturalEarth2Raw","phi6","nellHammerRaw","nicolosiRaw","b2","b2d2","d2b2","M","N","x2y2","pi2","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonRaw","yc","polyconicRaw","octahedron","collignon_kx","face","collignonK","robinson_K","robinsonRaw","di","bx","by","yy","timesRaw","vanDerGrintenRaw","sinTheta","cosTheta","A2","G","P","P2","P2_A2","G_P2","Q","x2_y2","c3","m1","theta1","vanDerGrinten2Raw","vanDerGrinten3Raw","vanDerGrinten4Raw","B2","C","C2","BC","B_C2","B_3C","D","D2","C_","B_C","F_","sqrtF","wagner4_A","wagner4_B","wagner6Raw","wagner7Raw","wiechelRaw","sin1_Phi","cosLambda","sinLambda","winkel3Raw","F","cosphi","sinphi","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","E","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","Miller_Miller","Miller","Eckert6_Eckert6","Eckert6","Orthographic_Orthographic","Orthographic","Stereographic_Stereographic","Stereographic","Albers_Albers","Albers","AlbersUsa_AlbersUsa","AlbersUsa","NaturalEarth1_NaturalEarth1","NaturalEarth1","AzimuthalEqualArea_AzimuthalEqualArea","AzimuthalEqualArea","EqualEarth_EqualEarth","EqualEarth","HeatLegend","projections_namespaceObject"],"mappings":"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","file":"static/js/7.f45c479d.chunk.js","sourcesContent":["'use strict';\n\nvar Queue = require('tinyqueue');\n\nmodule.exports = polylabel;\nmodule.exports.default = polylabel;\n\nfunction polylabel(polygon, precision, debug) {\n  precision = precision || 1.0; // find the bounding box of the outer ring\n\n  var minX, minY, maxX, maxY;\n\n  for (var i = 0; i < polygon[0].length; i++) {\n    var p = polygon[0][i];\n    if (!i || p[0] < minX) minX = p[0];\n    if (!i || p[1] < minY) minY = p[1];\n    if (!i || p[0] > maxX) maxX = p[0];\n    if (!i || p[1] > maxY) maxY = p[1];\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n  var cellSize = Math.min(width, height);\n  var h = cellSize / 2; // a priority queue of cells in order of their \"potential\" (max distance to polygon)\n\n  var cellQueue = new Queue(null, compareMax);\n  if (cellSize === 0) return [minX, minY]; // cover polygon with initial cells\n\n  for (var x = minX; x < maxX; x += cellSize) {\n    for (var y = minY; y < maxY; y += cellSize) {\n      cellQueue.push(new Cell(x + h, y + h, h, polygon));\n    }\n  } // take centroid as the first best guess\n\n\n  var bestCell = getCentroidCell(polygon); // special case for rectangular polygons\n\n  var bboxCell = new Cell(minX + width / 2, minY + height / 2, 0, polygon);\n  if (bboxCell.d > bestCell.d) bestCell = bboxCell;\n  var numProbes = cellQueue.length;\n\n  while (cellQueue.length) {\n    // pick the most promising cell from the queue\n    var cell = cellQueue.pop(); // update the best cell if we found a better one\n\n    if (cell.d > bestCell.d) {\n      bestCell = cell;\n      if (debug) console.log('found best %d after %d probes', Math.round(1e4 * cell.d) / 1e4, numProbes);\n    } // do not drill down further if there's no chance of a better solution\n\n\n    if (cell.max - bestCell.d <= precision) continue; // split the cell into four cells\n\n    h = cell.h / 2;\n    cellQueue.push(new Cell(cell.x - h, cell.y - h, h, polygon));\n    cellQueue.push(new Cell(cell.x + h, cell.y - h, h, polygon));\n    cellQueue.push(new Cell(cell.x - h, cell.y + h, h, polygon));\n    cellQueue.push(new Cell(cell.x + h, cell.y + h, h, polygon));\n    numProbes += 4;\n  }\n\n  if (debug) {\n    console.log('num probes: ' + numProbes);\n    console.log('best distance: ' + bestCell.d);\n  }\n\n  return [bestCell.x, bestCell.y];\n}\n\nfunction compareMax(a, b) {\n  return b.max - a.max;\n}\n\nfunction Cell(x, y, h, polygon) {\n  this.x = x; // cell center x\n\n  this.y = y; // cell center y\n\n  this.h = h; // half the cell size\n\n  this.d = pointToPolygonDist(x, y, polygon); // distance from cell center to polygon\n\n  this.max = this.d + this.h * Math.SQRT2; // max distance to polygon within a cell\n} // signed distance from point to polygon outline (negative if point is outside)\n\n\nfunction pointToPolygonDist(x, y, polygon) {\n  var inside = false;\n  var minDistSq = Infinity;\n\n  for (var k = 0; k < polygon.length; k++) {\n    var ring = polygon[k];\n\n    for (var i = 0, len = ring.length, j = len - 1; i < len; j = i++) {\n      var a = ring[i];\n      var b = ring[j];\n      if (a[1] > y !== b[1] > y && x < (b[0] - a[0]) * (y - a[1]) / (b[1] - a[1]) + a[0]) inside = !inside;\n      minDistSq = Math.min(minDistSq, getSegDistSq(x, y, a, b));\n    }\n  }\n\n  return (inside ? 1 : -1) * Math.sqrt(minDistSq);\n} // get polygon centroid\n\n\nfunction getCentroidCell(polygon) {\n  var area = 0;\n  var x = 0;\n  var y = 0;\n  var points = polygon[0];\n\n  for (var i = 0, len = points.length, j = len - 1; i < len; j = i++) {\n    var a = points[i];\n    var b = points[j];\n    var f = a[0] * b[1] - b[0] * a[1];\n    x += (a[0] + b[0]) * f;\n    y += (a[1] + b[1]) * f;\n    area += f * 3;\n  }\n\n  if (area === 0) return new Cell(points[0][0], points[0][1], 0, polygon);\n  return new Cell(x / area, y / area, 0, polygon);\n} // get squared distance from a point to a segment\n\n\nfunction getSegDistSq(px, py, a, b) {\n  var x = a[0];\n  var y = a[1];\n  var dx = b[0] - x;\n  var dy = b[1] - y;\n\n  if (dx !== 0 || dy !== 0) {\n    var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = b[0];\n      y = b[1];\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = px - x;\n  dy = py - y;\n  return dx * dx + dy * dy;\n}","'use strict';\n\nmodule.exports = TinyQueue;\nmodule.exports.default = TinyQueue;\n\nfunction TinyQueue(data, compare) {\n  if (!(this instanceof TinyQueue)) return new TinyQueue(data, compare);\n  this.data = data || [];\n  this.length = this.data.length;\n  this.compare = compare || defaultCompare;\n\n  if (this.length > 0) {\n    for (var i = (this.length >> 1) - 1; i >= 0; i--) {\n      this._down(i);\n    }\n  }\n}\n\nfunction defaultCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\nTinyQueue.prototype = {\n  push: function push(item) {\n    this.data.push(item);\n    this.length++;\n\n    this._up(this.length - 1);\n  },\n  pop: function pop() {\n    if (this.length === 0) return undefined;\n    var top = this.data[0];\n    this.length--;\n\n    if (this.length > 0) {\n      this.data[0] = this.data[this.length];\n\n      this._down(0);\n    }\n\n    this.data.pop();\n    return top;\n  },\n  peek: function peek() {\n    return this.data[0];\n  },\n  _up: function _up(pos) {\n    var data = this.data;\n    var compare = this.compare;\n    var item = data[pos];\n\n    while (pos > 0) {\n      var parent = pos - 1 >> 1;\n      var current = data[parent];\n      if (compare(item, current) >= 0) break;\n      data[pos] = current;\n      pos = parent;\n    }\n\n    data[pos] = item;\n  },\n  _down: function _down(pos) {\n    var data = this.data;\n    var compare = this.compare;\n    var halfLength = this.length >> 1;\n    var item = data[pos];\n\n    while (pos < halfLength) {\n      var left = (pos << 1) + 1;\n      var right = left + 1;\n      var best = data[left];\n\n      if (right < this.length && compare(data[right], best) < 0) {\n        left = right;\n        best = data[right];\n      }\n\n      if (compare(best, item) >= 0) break;\n      data[pos] = best;\n      pos = left;\n    }\n\n    data[pos] = item;\n  }\n};","export default function (a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}","import ascending from \"./ascending\";\nexport default function (compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n\n      return lo;\n    },\n    right: function right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function (d, x) {\n    return ascending(f(d), x);\n  };\n}","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;","import { pair } from \"./pairs\";\nexport default function (values0, values1, reduce) {\n  var n0 = values0.length,\n      n1 = values1.length,\n      values = new Array(n0 * n1),\n      i0,\n      i1,\n      i,\n      value0;\n  if (reduce == null) reduce = pair;\n\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n\n  return values;\n}","export default function (x) {\n  return x === null ? NaN : +x;\n}","var array = Array.prototype;\nexport var slice = array.slice;\nexport var map = array.map;","export default function (start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\nexport default function (start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n\n    while (++i < n) {\n      ticks[i] = (start + i) * step;\n    }\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n\n    while (++i < n) {\n      ticks[i] = (start - i) / step;\n    }\n  }\n\n  if (reverse) ticks.reverse();\n  return ticks;\n}\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}","export default function (values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}","import number from \"./number\";\nexport default function (values, p, valueof) {\n  if (valueof == null) valueof = number;\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}","export default function (arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) {\n    j += arrays[i].length;\n  }\n\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}","export { default as bisect, bisectRight, bisectLeft } from \"./bisect\";\nexport { default as ascending } from \"./ascending\";\nexport { default as bisector } from \"./bisector\";\nexport { default as cross } from \"./cross\";\nexport { default as descending } from \"./descending\";\nexport { default as deviation } from \"./deviation\";\nexport { default as extent } from \"./extent\";\nexport { default as histogram } from \"./histogram\";\nexport { default as thresholdFreedmanDiaconis } from \"./threshold/freedmanDiaconis\";\nexport { default as thresholdScott } from \"./threshold/scott\";\nexport { default as thresholdSturges } from \"./threshold/sturges\";\nexport { default as max } from \"./max\";\nexport { default as mean } from \"./mean\";\nexport { default as median } from \"./median\";\nexport { default as merge } from \"./merge\";\nexport { default as min } from \"./min\";\nexport { default as pairs } from \"./pairs\";\nexport { default as permute } from \"./permute\";\nexport { default as quantile } from \"./quantile\";\nexport { default as range } from \"./range\";\nexport { default as scan } from \"./scan\";\nexport { default as shuffle } from \"./shuffle\";\nexport { default as sum } from \"./sum\";\nexport { default as ticks, tickIncrement, tickStep } from \"./ticks\";\nexport { default as transpose } from \"./transpose\";\nexport { default as variance } from \"./variance\";\nexport { default as zip } from \"./zip\";","export default {\n  \"type\": \"FeatureCollection\",\n  \"features\": [{\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[179.2223, -8.554], [179.2023, -8.4653], [179.2312, -8.5048], [179.2223, -8.554]]]\n    },\n    \"properties\": {\n      \"name\": \"Tuvalu\",\n      \"id\": \"TV\"\n    },\n    \"id\": \"TV\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[3.4624, -54.4471], [3.3461, -54.4511], [3.3669, -54.3997], [3.4814, -54.4001], [3.4624, -54.4471]]]\n    },\n    \"properties\": {\n      \"name\": \"Bouvet Island\",\n      \"id\": \"BV\"\n    },\n    \"id\": \"BV\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-5.3345, 36.1623], [-5.3382, 36.1122], [-5.3562, 36.1264], [-5.3551, 36.1455], [-5.3345, 36.1623]]]\n    },\n    \"properties\": {\n      \"name\": \"Gibraltar\",\n      \"id\": \"GI\"\n    },\n    \"id\": \"GI\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[47.3029, -11.5752], [47.282, -11.5747], [47.2789, -11.5574], [47.2971, -11.5543], [47.3029, -11.5752]]]\n    },\n    \"properties\": {\n      \"name\": \"Glorioso Islands\",\n      \"id\": \"GO\"\n    },\n    \"id\": \"GO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[42.7579, -17.075], [42.7415, -17.0741], [42.7379, -17.0519], [42.761, -17.0652], [42.7579, -17.075]]]\n    },\n    \"properties\": {\n      \"name\": \"Juan De Nova Island\",\n      \"id\": \"JU\"\n    },\n    \"id\": \"JU\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-160.0213, -0.398], [-160.0453, -0.3802], [-160.0178, -0.3744], [-160.0213, -0.398]]]\n    },\n    \"properties\": {\n      \"name\": \"Jarvis Island\",\n      \"id\": \"UM-DQ\"\n    },\n    \"id\": \"UM-DQ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-176.456, 0.2226], [-176.4615, 0.215], [-176.4675, 0.2195], [-176.456, 0.2226]]]\n    },\n    \"properties\": {\n      \"name\": \"Baker Island\",\n      \"id\": \"UM-FQ\"\n    },\n    \"id\": \"UM-FQ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-176.6311, 0.7952], [-176.6433, 0.7934], [-176.6429, 0.8081], [-176.6329, 0.8085], [-176.6311, 0.7952]]]\n    },\n    \"properties\": {\n      \"name\": \"Howland Island\",\n      \"id\": \"UM-HQ\"\n    },\n    \"id\": \"UM-HQ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-169.5237, 16.7305], [-169.5388, 16.7243], [-169.5388, 16.7296], [-169.5237, 16.7305]]]\n    },\n    \"properties\": {\n      \"name\": \"Johnston Atoll\",\n      \"id\": \"UM-JQ\"\n    },\n    \"id\": \"UM-JQ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-177.3881, 28.1865], [-177.3879, 28.2144], [-177.3646, 28.2042], [-177.3881, 28.1865]]]\n    },\n    \"properties\": {\n      \"name\": \"Midway Islands\",\n      \"id\": \"UM-MQ\"\n    },\n    \"id\": \"UM-MQ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[166.6588, 19.2829], [166.6087, 19.3073], [166.6277, 19.3246], [166.6588, 19.3117], [166.6588, 19.2829]]]\n    },\n    \"properties\": {\n      \"name\": \"Wake Island\",\n      \"id\": \"UM-WQ\"\n    },\n    \"id\": \"UM-WQ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-68.2058, 12.1446], [-68.2873, 12.1717], [-68.3711, 12.2574], [-68.3694, 12.3018], [-68.2196, 12.2312], [-68.2058, 12.1446]]]\n    },\n    \"properties\": {\n      \"name\": \"Bonair, Saint Eustachius and Saba\",\n      \"id\": \"BQ\"\n    },\n    \"id\": \"BQ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[4.2263, 51.3865], [3.9023, 51.2076], [3.35, 51.3776], [4.2263, 51.3865]]], [[[4.2263, 51.3865], [3.5871, 51.454], [4.4829, 52.3091], [4.7687, 52.9412], [5.1203, 52.3881], [5.5611, 52.5948], [5.3755, 53.0957], [6.0622, 53.4071], [6.8164, 53.4413], [7.1973, 53.2823], [7.0352, 52.3801], [6.7418, 51.9109], [5.9486, 51.7625], [6.1932, 51.4888], [5.8949, 50.9843], [5.9939, 50.7504], [5.7972, 50.7546], [5.6938, 50.7748], [5.827, 51.1257], [4.5033, 51.4746], [4.2263, 51.3865]]]]\n    },\n    \"properties\": {\n      \"name\": \"Netherlands\",\n      \"id\": \"NL\"\n    },\n    \"id\": \"NL\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[31.2877, -22.4021], [30.4603, -22.3289], [29.6631, -22.1465], [29.3648, -22.194], [29.0372, -21.8113], [28.0455, -21.5729], [27.6696, -21.0642], [27.6997, -20.5307], [27.2807, -20.4788], [27.2217, -20.1458], [26.6784, -19.8928], [26.1683, -19.5381], [25.7613, -18.6495], [25.2242, -17.9153], [25.2588, -17.7936], [25.8634, -17.9521], [27.0206, -17.9583], [27.9323, -16.8961], [28.7606, -16.5321], [28.9129, -15.9879], [29.7297, -15.6448], [30.3959, -15.643], [30.4377, -15.9954], [31.2362, -16.0239], [31.9398, -16.4287], [32.2434, -16.4487], [32.9479, -16.7123], [32.9932, -18.3596], [32.7166, -19.0019], [33.0069, -19.8737], [32.4778, -20.7131], [32.3713, -21.335], [31.2877, -22.4021]]]\n    },\n    \"properties\": {\n      \"name\": \"Zimbabwe\",\n      \"id\": \"ZW\"\n    },\n    \"id\": \"ZW\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[32.9199, -9.4072], [33.3509, -9.8622], [33.659, -10.5906], [33.2613, -10.8934], [33.3798, -11.1579], [33.2262, -11.5348], [33.2524, -12.1127], [33.398, -12.49], [33.0216, -12.6303], [32.9679, -13.2251], [32.6722, -13.6104], [32.9812, -14.0095], [33.2018, -14.0135], [31.729, -14.496], [30.2317, -14.9905], [30.3959, -15.643], [29.7297, -15.6448], [28.9129, -15.9879], [28.7606, -16.5321], [27.9323, -16.8961], [27.0206, -17.9583], [25.8634, -17.9521], [25.2588, -17.7936], [24.9325, -17.5433], [24.2751, -17.4812], [23.3807, -17.6405], [22.1507, -16.5974], [21.9798, -15.9555], [21.9789, -13.0009], [23.8432, -13.0009], [23.9915, -12.4221], [23.9666, -10.8716], [24.32, -11.0718], [24.5184, -11.4384], [25.1847, -11.2431], [25.3493, -11.6231], [26.0258, -11.8903], [26.5962, -11.972], [26.9496, -11.8988], [27.0459, -11.616], [27.5333, -12.1953], [28.3576, -12.482], [29.0141, -13.3689], [29.5543, -13.2491], [29.7954, -13.3929], [29.7954, -12.1553], [29.4274, -12.4314], [29.0643, -12.3489], [28.4823, -11.8122], [28.3572, -11.4828], [28.639, -10.6692], [28.6301, -9.8311], [28.4007, -9.2248], [28.9178, -8.7005], [28.9724, -8.4648], [30.7511, -8.1936], [31.0764, -8.6117], [31.3508, -8.6069], [31.9425, -9.0539], [32.4334, -9.1564], [32.9199, -9.4072]]]\n    },\n    \"properties\": {\n      \"name\": \"Zambia\",\n      \"id\": \"ZM\"\n    },\n    \"id\": \"ZM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[31.2877, -22.4021], [31.5456, -23.4821], [31.7995, -23.8923], [31.986, -24.4605], [31.9482, -25.9577], [31.4151, -25.7464], [31.2074, -25.8432], [30.8034, -26.4136], [30.7941, -26.7643], [31.0636, -27.1123], [31.4697, -27.2956], [31.9584, -27.3058], [32.1129, -26.8393], [32.8862, -26.8495], [32.5346, -28.1998], [32.2856, -28.6215], [31.7782, -28.9371], [31.3352, -29.3779], [30.2885, -30.9701], [28.8561, -32.2943], [27.8604, -33.0538], [27.0774, -33.5212], [26.4293, -33.7596], [25.9894, -33.7112], [25.6383, -34.0112], [25.0031, -33.9735], [24.8273, -34.1688], [23.5858, -33.9851], [23.2684, -34.0814], [22.2456, -34.0694], [21.7889, -34.3726], [21.06, -34.3646], [20.53, -34.4631], [20.0204, -34.7858], [19.6351, -34.7534], [18.8086, -34.108], [18.3545, -33.9389], [18.4331, -33.7174], [17.8782, -32.9614], [18.2511, -32.652], [18.3105, -32.1225], [18.2107, -31.7425], [17.6776, -31.019], [17.1893, -30.0997], [16.95, -29.4036], [16.4475, -28.6175], [16.7556, -28.4524], [17.0561, -28.0311], [17.3855, -28.3534], [17.4481, -28.6983], [18.1028, -28.8719], [19.2458, -28.9016], [19.6715, -28.5039], [19.9805, -28.4515], [19.9805, -26.5312], [19.9805, -24.777], [20.3453, -25.03], [20.7932, -25.9155], [20.6268, -26.4438], [20.74, -26.849], [21.6464, -26.8544], [22.0907, -26.5801], [22.6403, -26.0714], [22.8786, -25.4579], [23.2662, -25.2666], [23.8938, -25.6008], [24.7483, -25.8174], [25.5837, -25.6062], [25.9122, -24.7477], [26.3974, -24.6136], [26.835, -24.2407], [27.1462, -23.5243], [27.8906, -23.0737], [28.2102, -22.6938], [28.8397, -22.4807], [29.3648, -22.194], [29.6631, -22.1465], [30.4603, -22.3289], [31.2877, -22.4021]], [[27.8303, -28.9091], [27.2945, -29.5195], [27.0517, -29.6642], [27.3886, -30.3158], [28.018, -30.6421], [28.3922, -30.1476], [29.098, -29.919], [29.3905, -29.2696], [29.3013, -29.0898], [28.6257, -28.5816], [27.8303, -28.9091]]]\n    },\n    \"properties\": {\n      \"name\": \"South Africa\",\n      \"id\": \"ZA\"\n    },\n    \"id\": \"ZA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[53.0855, 16.6484], [52.3278, 16.2937], [52.2177, 15.6554], [51.6038, 15.3367], [50.5269, 15.0384], [50.1669, 14.8511], [49.3497, 14.638], [48.6683, 14.0503], [47.9901, 14.0481], [47.4077, 13.6614], [46.7889, 13.4657], [45.6574, 13.3387], [45.0386, 12.8158], [44.6178, 12.8171], [43.9298, 12.6165], [43.4752, 12.8389], [43.232, 13.2672], [43.2826, 13.6397], [43.089, 14.0108], [43.0211, 14.555], [42.7171, 15.6545], [42.7992, 16.3718], [43.1649, 16.6892], [43.1911, 17.3595], [43.418, 17.5162], [43.9169, 17.3249], [44.1557, 17.3986], [45.1483, 17.4274], [45.4066, 17.32], [46.3104, 17.2312], [46.6819, 17.2685], [46.9758, 16.9533], [47.4418, 17.1118], [47.5795, 17.4483], [48.172, 18.1567], [49.0421, 18.582], [51.9775, 18.9961], [52.729, 17.3005], [53.0855, 16.6484]]]\n    },\n    \"properties\": {\n      \"name\": \"Yemen\",\n      \"id\": \"YE\"\n    },\n    \"id\": \"YE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-172.3335, -13.4653], [-172.225, -13.8044], [-172.5357, -13.7915], [-172.7441, -13.5789], [-172.3335, -13.4653]]]\n    },\n    \"properties\": {\n      \"name\": \"Samoa\",\n      \"id\": \"WS\"\n    },\n    \"id\": \"WS\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-178.0467, -14.3184], [-178.1585, -14.3118], [-178.1423, -14.2425], [-178.0467, -14.3184]]]\n    },\n    \"properties\": {\n      \"name\": \"Wallis and Futuna\",\n      \"id\": \"WF\"\n    },\n    \"id\": \"WF\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[34.2454, 31.2085], [34.1983, 31.3226], [34.4775, 31.5849], [34.2454, 31.2085]]], [[[35.4505, 31.4793], [34.9507, 31.6022], [34.9561, 32.1611], [35.1931, 32.5344], [35.5513, 32.3955], [35.5589, 31.7656], [35.4505, 31.4793]]]]\n    },\n    \"properties\": {\n      \"name\": \"Palestinian Territories\",\n      \"id\": \"PS\"\n    },\n    \"id\": \"PS\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[166.7458, -14.8267], [166.8102, -15.1574], [167.1316, -15.1352], [167.1995, -15.4859], [166.8257, -15.635], [166.6313, -15.406], [166.5274, -14.8502], [166.7458, -14.8267]]], [[[167.4125, -16.0958], [167.8365, -16.4495], [167.4494, -16.5552], [167.4125, -16.0958]]]]\n    },\n    \"properties\": {\n      \"name\": \"Vanuatu\",\n      \"id\": \"VU\"\n    },\n    \"id\": \"VU\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[107.9727, 21.5081], [107.4099, 21.2848], [107.3544, 21.0553], [106.6757, 20.9603], [106.7534, 20.7348], [106.5181, 20.2887], [105.9841, 19.9389], [105.6219, 18.9664], [105.8882, 18.5025], [106.499, 17.9463], [106.479, 17.7195], [107.1804, 16.8978], [108.0296, 16.331], [108.8215, 15.378], [109.0847, 14.7161], [109.3035, 13.8563], [109.272, 13.2792], [109.4238, 12.9561], [109.2187, 12.6458], [109.1988, 11.7247], [108.8206, 11.3155], [108.2715, 10.9342], [107.2616, 10.3984], [106.8128, 10.4334], [106.5723, 9.6411], [105.5011, 9.0933], [105.3223, 8.8013], [104.8921, 8.5833], [104.8184, 8.8017], [104.8451, 9.606], [105.028, 10.0672], [104.6635, 10.1698], [104.4265, 10.4112], [104.8504, 10.5347], [105.3866, 10.9399], [106.1679, 11.0123], [105.8558, 11.2941], [105.8514, 11.6351], [106.3401, 11.6817], [106.4138, 11.9484], [106.9305, 12.0776], [107.5062, 12.3644], [107.4756, 13.0302], [107.6056, 13.4377], [107.3313, 14.1266], [107.5195, 14.705], [107.6531, 15.255], [107.1897, 15.7473], [107.3966, 16.0429], [106.6961, 16.4588], [106.5021, 16.9542], [105.6916, 17.7377], [105.4581, 18.1545], [105.0857, 18.4501], [105.115, 18.6787], [104.7163, 18.8035], [103.8965, 19.3401], [104.0319, 19.6753], [104.5463, 19.6105], [104.9281, 20.018], [104.6187, 20.3744], [104.5832, 20.6465], [104.0518, 20.9413], [103.635, 20.6971], [103.1046, 20.8915], [102.8511, 21.2657], [102.9488, 21.5698], [102.1276, 22.379], [102.5173, 22.7408], [103.0051, 22.4532], [103.3008, 22.7643], [104.3719, 22.704], [104.7958, 22.9112], [104.8646, 23.1363], [105.2752, 23.3454], [105.8429, 22.9228], [106.5421, 22.9081], [106.7804, 22.779], [106.5363, 22.3954], [106.7294, 22.0004], [107.3513, 21.6089], [107.9727, 21.5081]]]\n    },\n    \"properties\": {\n      \"name\": \"Vietnam\",\n      \"id\": \"VN\"\n    },\n    \"id\": \"VN\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-64.7656, 17.7945], [-64.6862, 17.7062], [-64.889, 17.7017], [-64.8848, 17.7723], [-64.7656, 17.7945]]]\n    },\n    \"properties\": {\n      \"name\": \"US Virgin Islands\",\n      \"id\": \"VI\"\n    },\n    \"id\": \"VI\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-64.3952, 18.4648], [-64.4261, 18.5132], [-64.3246, 18.5176], [-64.3952, 18.4648]]]\n    },\n    \"properties\": {\n      \"name\": \"British Virgin Islands\",\n      \"id\": \"VG\"\n    },\n    \"id\": \"VG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-60.0175, 8.5491], [-59.8315, 8.3059], [-60.0324, 8.0537], [-60.5136, 7.8131], [-60.7191, 7.4989], [-60.3951, 6.9453], [-61.1457, 6.6945], [-61.1286, 6.2142], [-61.3767, 5.9071], [-60.7422, 5.2022], [-60.6046, 4.9944], [-61.0028, 4.5354], [-62.1531, 4.0982], [-62.7122, 4.0179], [-62.9685, 3.594], [-63.2948, 3.9224], [-64.0214, 3.9291], [-64.2556, 4.1404], [-64.5679, 3.8998], [-64.2212, 3.5873], [-64.2188, 3.2047], [-63.9242, 2.4523], [-63.3893, 2.4119], [-63.394, 2.2223], [-64.0354, 1.9045], [-64.1149, 1.6191], [-65.1037, 1.1082], [-65.3609, 0.8685], [-65.6814, 0.9834], [-66.06, 0.7854], [-66.4293, 0.8218], [-66.8761, 1.2231], [-67.2108, 2.3901], [-67.8347, 2.8926], [-67.3111, 3.416], [-67.6616, 3.8643], [-67.8553, 4.507], [-67.8249, 5.2705], [-67.4394, 6.0256], [-67.8591, 6.2897], [-68.4717, 6.1565], [-69.4392, 6.1348], [-70.095, 6.9378], [-70.6552, 7.0829], [-71.0134, 6.9946], [-72.0843, 7.0967], [-72.443, 7.4549], [-72.4166, 8.3818], [-72.6654, 8.6277], [-72.7963, 9.1089], [-73.3563, 9.2269], [-73.0065, 9.7894], [-72.8693, 10.4911], [-72.6902, 10.8361], [-72.2485, 11.1965], [-71.958, 11.6666], [-71.3197, 11.8619], [-71.8686, 11.6275], [-71.9469, 11.4144], [-71.5942, 10.6572], [-72.1129, 9.8155], [-71.6868, 9.0725], [-71.2979, 9.1257], [-71.0858, 9.3481], [-71.0527, 9.7059], [-71.3867, 10.2639], [-71.5445, 10.7788], [-71.4695, 10.9643], [-70.2326, 11.3732], [-70.2865, 11.8859], [-70.004, 12.1779], [-69.6316, 11.4801], [-68.8279, 11.4318], [-68.3987, 11.161], [-68.234, 10.5693], [-67.8715, 10.4721], [-66.9891, 10.6106], [-66.2471, 10.6323], [-65.8518, 10.2577], [-65.1292, 10.0699], [-64.8504, 10.0979], [-63.8734, 10.6638], [-62.7024, 10.7499], [-62.8429, 10.4179], [-62.5151, 10.176], [-60.7923, 9.3606], [-61.0531, 9.0951], [-61.3039, 8.4102], [-60.801, 8.5922], [-60.0175, 8.5491]]]\n    },\n    \"properties\": {\n      \"name\": \"Venezuela\",\n      \"id\": \"VE\"\n    },\n    \"id\": \"VE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-61.1745, 13.1581], [-61.2773, 13.2095], [-61.1821, 13.356], [-61.1239, 13.2939], [-61.1745, 13.1581]]]\n    },\n    \"properties\": {\n      \"name\": \"Saint Vincent and the Grenadines\",\n      \"id\": \"VC\"\n    },\n    \"id\": \"VC\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[12.4392, 41.8983], [12.4307, 41.8974], [12.4307, 41.9054], [12.4383, 41.9063], [12.4392, 41.8983]]]\n    },\n    \"properties\": {\n      \"name\": \"Vatican City\",\n      \"id\": \"VA\"\n    },\n    \"id\": \"VA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[70.9468, 42.2485], [70.8421, 42.0195], [70.1811, 41.5716], [70.7826, 41.2626], [71.4085, 41.1361], [71.7924, 41.4131], [72.6585, 40.8698], [73.113, 40.7859], [71.6926, 40.1525], [70.9579, 40.239], [70.3826, 40.4534], [70.7511, 40.7397], [70.4417, 41.0234], [69.7128, 40.6572], [69.2063, 40.5666], [69.2281, 40.1875], [68.6528, 40.1827], [68.4632, 39.5368], [67.7193, 39.6216], [67.3495, 39.242], [67.6767, 39.0086], [68.1037, 38.9619], [68.0478, 38.6694], [68.2941, 38.0329], [67.8143, 37.4869], [67.7592, 37.1722], [67.069, 37.3346], [66.5221, 37.3484], [66.5745, 38.0107], [65.8572, 38.2686], [65.613, 38.2384], [64.1628, 38.9535], [62.6505, 39.8586], [61.903, 41.0935], [60.455, 41.2218], [60.0897, 41.3994], [60.107, 41.9076], [59.8584, 42.2951], [59.4509, 42.2996], [58.5889, 42.7785], [58.2595, 42.688], [57.8143, 42.1899], [57.3819, 42.1562], [56.9642, 41.8566], [57.0179, 41.2635], [55.9774, 41.3221], [55.9766, 42.929], [55.9757, 44.9949], [58.5551, 45.5555], [61.0081, 44.3939], [61.1608, 44.1688], [61.9904, 43.4923], [63.2071, 43.6281], [64.4434, 43.5513], [64.9054, 43.7147], [65.4963, 43.3108], [65.803, 42.8771], [66.1004, 42.9907], [66.0094, 42.0048], [66.4986, 41.9951], [66.6686, 41.2706], [66.8142, 41.1423], [67.9359, 41.1965], [68.2919, 40.6563], [69.0652, 41.367], [70.0954, 41.8206], [70.4159, 42.0785], [70.9468, 42.2485]]]\n    },\n    \"properties\": {\n      \"name\": \"Uzbekistan\",\n      \"id\": \"UZ\"\n    },\n    \"id\": \"UZ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-166.1355, 60.3835], [-165.7298, 60.3143], [-165.5917, 59.9132], [-166.1876, 59.7738], [-167.1389, 60.0086], [-166.1355, 60.3835]]], [[[-171.4631, 63.6401], [-170.4304, 63.6989], [-169.7778, 63.0937], [-171.4631, 63.6401]]], [[[-141.0021, 69.6509], [-141.0021, 68.4819], [-141.0021, 65.56], [-141.0021, 63.2222], [-141.0021, 60.3003], [-139.1852, 60.0837], [-137.5932, 59.2263], [-137.4385, 58.9031], [-136.5787, 59.1522], [-136.3219, 59.6049], [-135.4759, 59.7934], [-134.9439, 59.2882], [-133.8208, 58.7049], [-131.8661, 56.7929], [-131.5752, 56.5989], [-130.4772, 56.2307], [-130.0251, 55.8882], [-130.0366, 55.2978], [-130.2142, 55.026], [-130.5753, 54.7696], [-131.0478, 55.1576], [-130.9186, 55.736], [-131.8439, 56.1601], [-132.8143, 57.0408], [-133.4659, 57.1722], [-133.5543, 57.6951], [-134.0634, 58.2111], [-134.7761, 58.4539], [-135.3025, 58.2559], [-135.8618, 58.5771], [-136.5827, 58.2453], [-137.544, 58.5811], [-138.3525, 59.0873], [-140.2168, 59.7266], [-140.8432, 59.749], [-141.6702, 59.9698], [-142.9457, 60.097], [-143.8051, 60.0129], [-144.9012, 60.3351], [-145.8989, 60.4783], [-146.8741, 61.005], [-148.3445, 60.8536], [-148.1976, 60.1678], [-148.4306, 59.9891], [-149.4323, 60.0011], [-150.9608, 59.244], [-151.7383, 59.1886], [-151.7345, 59.9882], [-151.4515, 60.2026], [-151.3217, 60.7428], [-150.4412, 61.0236], [-150.6124, 61.3013], [-151.7341, 60.9106], [-151.7505, 60.7548], [-153.1061, 59.875], [-154.0883, 59.3632], [-154.1298, 59.12], [-153.327, 58.8843], [-154.0199, 58.493], [-154.2469, 58.1594], [-155.0069, 58.016], [-156.4784, 57.328], [-156.4751, 57.1051], [-157.5784, 56.6344], [-158.4144, 56.4358], [-158.2757, 56.1963], [-159.5233, 55.8101], [-159.9623, 55.7948], [-161.0995, 55.4057], [-161.7416, 55.3911], [-162.0741, 55.1394], [-162.8651, 54.9545], [-162.9621, 55.1838], [-162.1571, 55.7195], [-161.2156, 56.0214], [-160.8514, 55.7719], [-160.3021, 56.3141], [-159.2831, 56.6886], [-158.321, 57.2978], [-157.6077, 57.6014], [-157.5235, 58.4213], [-158.5032, 58.8503], [-159.0827, 58.4697], [-159.6702, 58.9111], [-160.3631, 59.0512], [-161.7554, 58.6119], [-161.8286, 59.5887], [-162.2425, 60.1782], [-163.2193, 59.8455], [-163.9069, 59.8067], [-164.6622, 60.3038], [-165.3538, 60.5413], [-164.8051, 60.892], [-165.566, 61.1024], [-166.0789, 61.8031], [-165.1944, 62.4736], [-164.409, 63.2151], [-163.3589, 63.0458], [-161.974, 63.453], [-161.0997, 63.558], [-160.7786, 63.819], [-160.932, 64.5792], [-161.7594, 64.8162], [-162.807, 64.3743], [-163.7132, 64.5883], [-164.8995, 64.4607], [-166.1428, 64.5827], [-167.4039, 65.4221], [-168.0884, 65.6578], [-164.6742, 66.5549], [-163.7755, 66.5312], [-163.6954, 66.0838], [-161.8164, 66.0536], [-161.557, 66.2504], [-160.2317, 66.4202], [-160.864, 66.6708], [-161.8566, 66.7003], [-161.9653, 67.0497], [-163.0016, 67.0272], [-163.7205, 67.1955], [-164.1251, 67.6067], [-166.3805, 68.4251], [-166.2092, 68.8854], [-164.3024, 68.9364], [-163.1614, 69.3879], [-162.9521, 69.7581], [-161.881, 70.3318], [-160.9963, 70.3045], [-159.3144, 70.8785], [-157.9985, 70.8454], [-156.7833, 71.319], [-155.1669, 71.0993], [-154.1952, 70.801], [-153.2329, 70.9326], [-152.233, 70.8103], [-151.9447, 70.4521], [-149.2694, 70.5007], [-147.7053, 70.2173], [-145.8232, 70.16], [-145.1973, 70.0086], [-143.2184, 70.1163], [-141.4078, 69.6533], [-141.0021, 69.6509]]], [[[-155.5813, 19.0121], [-155.8814, 19.0707], [-156.0487, 19.7498], [-155.8316, 20.2759], [-155.1989, 19.9944], [-154.8043, 19.5244], [-155.5813, 19.0121]]], [[[-72.5098, 40.9861], [-73.1943, 40.6541], [-73.5738, 40.9195], [-72.5098, 40.9861]]], [[[-93.3778, 48.6166], [-92.9963, 48.6117], [-91.5183, 48.0582], [-90.8403, 48.2007], [-89.4556, 47.996], [-88.3782, 48.3032], [-84.8759, 46.9001], [-84.5617, 46.4575], [-84.1921, 46.5494], [-83.9777, 46.0851], [-83.5926, 45.817], [-82.5511, 45.3473], [-82.1378, 43.5709], [-82.5453, 42.6245], [-83.0731, 42.3005], [-83.1419, 41.976], [-82.439, 41.675], [-81.2778, 42.209], [-80.2475, 42.3662], [-79.0368, 42.8025], [-79.1719, 43.4666], [-78.7205, 43.625], [-76.82, 43.6286], [-76.4646, 44.0574], [-75.1793, 44.8994], [-74.7088, 45.0038], [-71.5175, 45.0078], [-71.3272, 45.2901], [-70.898, 45.2626], [-70.2963, 45.9062], [-70.0078, 46.7088], [-69.243, 47.4629], [-68.8288, 47.2032], [-68.311, 47.3546], [-67.8067, 47.083], [-67.7845, 45.7016], [-67.4328, 45.603], [-67.4725, 45.2759], [-67.1249, 45.1693], [-67.1067, 44.8852], [-67.9071, 44.4538], [-68.2775, 44.5075], [-69.7916, 43.8053], [-70.1789, 43.7662], [-70.829, 42.8251], [-71.0463, 42.3311], [-70.7382, 42.229], [-70.4046, 41.6271], [-70.6572, 41.5343], [-71.4265, 41.6333], [-71.5228, 41.3789], [-72.8471, 41.2657], [-73.5831, 41.022], [-74.2267, 40.6079], [-73.9575, 40.3282], [-74.1761, 39.7268], [-74.4289, 39.3872], [-74.897, 39.1453], [-75.3922, 39.0929], [-75.036, 38.5034], [-75.6592, 37.9539], [-76.2948, 38.4945], [-76.2635, 37.3568], [-75.8905, 36.6568], [-76.4788, 36.0283], [-75.7722, 35.9], [-75.7739, 35.647], [-76.513, 35.2705], [-76.7449, 34.9412], [-77.7508, 34.2851], [-78.0134, 33.9118], [-78.5778, 33.8732], [-78.9202, 33.6588], [-79.276, 33.1354], [-80.8492, 32.114], [-81.5203, 30.8747], [-81.2496, 29.7938], [-80.9, 29.0498], [-80.524, 28.4861], [-80.6501, 28.1811], [-80.2262, 27.2072], [-80.0413, 26.5685], [-80.1263, 25.8334], [-80.3669, 25.3313], [-80.7366, 25.1565], [-81.0978, 25.3194], [-81.365, 25.8312], [-81.7154, 25.983], [-81.8666, 26.4349], [-82.4414, 27.0599], [-82.6609, 27.7186], [-82.8436, 27.846], [-82.6607, 28.4857], [-82.6516, 28.8874], [-83.2906, 29.452], [-83.6943, 29.9261], [-84.0443, 30.1036], [-84.3828, 29.9074], [-85.3189, 29.6802], [-85.3536, 29.8759], [-86.2573, 30.4929], [-87.7903, 30.2918], [-88.9051, 30.4152], [-89.5885, 30.1658], [-90.2253, 30.3793], [-90.4131, 30.1405], [-89.5894, 29.915], [-90.1014, 29.1817], [-90.3793, 29.2953], [-90.7511, 29.1311], [-91.2902, 29.2891], [-91.331, 29.5137], [-91.8932, 29.836], [-92.2608, 29.5568], [-93.1756, 29.7792], [-93.6947, 29.7698], [-94.8884, 29.3708], [-95.2734, 28.9637], [-95.8534, 28.6401], [-96.4487, 28.5944], [-96.5616, 28.3671], [-97.1564, 28.1443], [-97.1715, 27.8797], [-97.5546, 26.9675], [-97.4024, 26.3967], [-97.1462, 25.9617], [-97.3582, 25.8707], [-98.0828, 26.0642], [-99.1078, 26.4469], [-99.4436, 27.0368], [-99.5053, 27.5482], [-100.2961, 28.3276], [-100.6587, 29.0685], [-101.4404, 29.7769], [-102.269, 29.871], [-102.7342, 29.6438], [-102.892, 29.2163], [-103.2577, 29.001], [-104.1107, 29.3863], [-104.504, 29.6775], [-104.9179, 30.5835], [-106.2558, 31.5445], [-106.4533, 31.77], [-108.2118, 31.7793], [-108.2145, 31.3292], [-111.042, 31.3243], [-112.939, 31.916], [-114.836, 32.5082], [-114.7248, 32.7155], [-117.1282, 32.5335], [-117.4674, 33.2957], [-118.5063, 34.0174], [-119.1437, 34.112], [-119.6061, 34.4178], [-120.4812, 34.4715], [-120.6448, 34.5798], [-120.6337, 35.0766], [-120.8603, 35.3655], [-121.8774, 36.331], [-121.79, 36.7323], [-122.3948, 37.2077], [-122.4669, 37.838], [-122.9681, 38.0968], [-122.9865, 38.277], [-123.7012, 38.9073], [-123.8845, 39.8608], [-124.324, 40.2519], [-124.3717, 40.4912], [-124.0685, 41.3843], [-124.5397, 42.8127], [-124.1486, 43.6916], [-123.9293, 45.5768], [-124.0716, 46.7447], [-124.3761, 47.6587], [-124.6211, 47.9042], [-124.6327, 48.3751], [-123.9757, 48.1683], [-122.2421, 48.0107], [-122.7888, 48.993], [-120.1281, 48.993], [-118.4226, 48.993], [-115.8643, 48.993], [-112.4532, 48.993], [-109.895, 48.993], [-106.4839, 48.993], [-103.9256, 48.993], [-102.2201, 48.993], [-99.2354, 48.993], [-97.5297, 48.9932], [-95.162, 48.9917], [-94.6209, 48.7427], [-93.7078, 48.5256], [-93.3778, 48.6166]]], [[[-163.4761, 54.9807], [-163.3581, 54.7357], [-164.5907, 54.4043], [-164.8877, 54.6078], [-164.5297, 54.8808], [-163.4761, 54.9807]]], [[[-130.9792, 55.4892], [-131.0827, 55.2668], [-131.8111, 55.223], [-131.6249, 55.8316], [-130.9792, 55.4892]]], [[[-133.566, 56.3392], [-133.2029, 56.3199], [-131.9764, 55.2086], [-131.9809, 54.8049], [-132.7823, 55.0484], [-133.4471, 55.797], [-133.566, 56.3392]]], [[[-133.3663, 57.0035], [-132.9541, 56.8803], [-133.2127, 56.4646], [-133.6029, 56.4642], [-133.8661, 57.0687], [-133.3663, 57.0035]]], [[[-134.9698, 57.3515], [-134.6207, 56.7183], [-135.787, 57.3173], [-134.9698, 57.3515]]], [[[-152.898, 57.8238], [-152.4121, 57.4547], [-153.7933, 56.9895], [-154.3391, 56.9209], [-154.7059, 57.3353], [-154.2813, 57.638], [-153.8184, 57.5956], [-152.898, 57.8238]]], [[[-135.7304, 58.2442], [-135.002, 58.0511], [-135.0848, 57.5111], [-136.0767, 57.6747], [-136.5123, 58.0959], [-135.7304, 58.2442]]], [[[-134.6802, 58.1616], [-133.9611, 57.6143], [-133.9253, 57.3369], [-134.4354, 57.057], [-134.66, 57.638], [-134.6802, 58.1616]]]]\n    },\n    \"properties\": {\n      \"name\": \"United States\",\n      \"id\": \"US\"\n    },\n    \"id\": \"US\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-53.3707, -33.7422], [-53.7853, -34.3806], [-54.1686, -34.6709], [-54.9023, -34.9328], [-55.6732, -34.7756], [-56.1179, -34.9079], [-56.8552, -34.6766], [-57.1706, -34.4525], [-57.8291, -34.4773], [-58.4002, -33.9123], [-58.3534, -33.2602], [-58.0824, -32.8935], [-58.2011, -32.4718], [-58.1889, -31.9241], [-57.8105, -30.8587], [-57.8724, -30.5911], [-57.609, -30.188], [-57.2144, -30.2834], [-56.8328, -30.1072], [-56.1761, -30.6283], [-55.8736, -31.0696], [-55.5573, -30.876], [-55.2546, -31.2258], [-54.5876, -31.4851], [-54.2205, -31.8553], [-53.7618, -32.0568], [-53.6017, -32.403], [-53.1254, -32.7368], [-53.5314, -33.171], [-53.3707, -33.7422]]]\n    },\n    \"properties\": {\n      \"name\": \"Uruguay\",\n      \"id\": \"UY\"\n    },\n    \"id\": \"UY\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[38.2142, 47.0914], [37.5435, 47.0745], [37.3398, 46.9169], [36.2793, 46.6586], [35.827, 46.6244], [34.8495, 46.1898], [35.0231, 45.7011], [35.558, 45.3109], [36.1705, 45.453], [36.3934, 45.0655], [35.5695, 45.1192], [35.0879, 44.8027], [34.7168, 44.8071], [33.9098, 44.3876], [33.4508, 44.5537], [33.5551, 45.0979], [32.508, 45.4037], [33.6648, 45.947], [33.2022, 46.1756], [32.4769, 46.0838], [32.0357, 46.2609], [31.9744, 46.7088], [30.7963, 46.5521], [30.2193, 45.8667], [29.6018, 45.6825], [29.7061, 45.2599], [29.2236, 45.4028], [28.7606, 45.2341], [28.2124, 45.4503], [28.9475, 46.05], [29.1464, 46.5268], [29.838, 46.3505], [29.8779, 46.829], [29.5494, 47.2467], [29.1597, 47.4558], [29.1948, 47.8824], [27.5493, 48.4777], [26.6189, 48.2597], [26.1625, 47.9925], [24.8935, 47.7177], [23.2027, 48.0844], [22.8764, 47.9472], [22.132, 48.4053], [22.5386, 49.0727], [22.6496, 49.539], [23.7118, 50.3773], [24.1056, 50.8449], [23.6053, 51.5179], [24.3617, 51.8674], [25.9251, 51.9136], [27.1422, 51.752], [27.2701, 51.6135], [28.5991, 51.5427], [29.1357, 51.6173], [29.3466, 51.3825], [30.5331, 51.5964], [30.9806, 52.0461], [31.7636, 52.1012], [32.508, 52.3084], [33.7353, 52.3448], [34.3976, 51.7804], [34.2809, 51.3117], [35.3121, 51.0438], [35.4115, 50.5398], [36.3059, 50.2805], [37.4228, 50.4115], [38.0469, 49.9201], [38.2586, 50.0524], [39.1748, 49.8559], [39.7807, 49.5721], [40.0701, 49.2003], [39.6866, 49.0079], [39.9609, 48.238], [39.7359, 47.8447], [38.9005, 47.8553], [38.2875, 47.5592], [38.2142, 47.0914]]]\n    },\n    \"properties\": {\n      \"name\": \"Ukraine\",\n      \"id\": \"UA\"\n    },\n    \"id\": \"UA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[33.9031, -1.0021], [32.1942, -1.0021], [30.8447, -1.0021], [30.51, -1.0674], [30.1016, -1.3688], [29.577, -1.3878], [29.5619, -0.9772], [29.7177, 0.0983], [29.9343, 0.4991], [29.9427, 0.8192], [30.9424, 1.683], [31.2527, 2.0448], [31.1763, 2.2703], [30.7284, 2.4554], [30.8385, 3.4905], [31.1523, 3.7857], [31.4799, 3.6805], [31.7982, 3.8026], [32.0996, 3.5291], [32.3358, 3.7063], [32.8382, 3.7986], [33.4894, 3.7551], [33.9759, 4.2203], [34.165, 3.8128], [34.3928, 3.6916], [34.4478, 3.1634], [34.7425, 2.818], [34.964, 2.0625], [34.9654, 1.6435], [34.7874, 1.2307], [34.4815, 1.042], [33.9431, 0.1738], [33.9031, -1.0021]]]\n    },\n    \"properties\": {\n      \"name\": \"Uganda\",\n      \"id\": \"UG\"\n    },\n    \"id\": \"UG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[33.9031, -1.0021], [34.7709, -1.4416], [36.2633, -2.2747], [37.6438, -3.0453], [37.6087, -3.4604], [37.7974, -3.6743], [39.2219, -4.6922], [38.8192, -5.8778], [38.8738, -6.3315], [39.4722, -6.8788], [39.5193, -7.1243], [39.2884, -7.518], [39.4411, -8.0116], [39.304, -8.444], [39.7838, -9.9146], [40.4634, -10.4641], [39.9889, -10.821], [39.3217, -11.1224], [38.7948, -11.2289], [38.4917, -11.4131], [37.9204, -11.2946], [37.5417, -11.675], [36.9789, -11.5667], [36.5185, -11.7163], [35.7852, -11.4531], [35.6312, -11.5818], [34.9596, -11.5783], [34.608, -11.0807], [34.6617, -10.71], [34.5241, -10.03], [34.3208, -9.7317], [32.9199, -9.4072], [32.4334, -9.1564], [31.9425, -9.0539], [31.3508, -8.6069], [31.0764, -8.6117], [30.7511, -8.1936], [30.3134, -7.2037], [29.7097, -6.6169], [29.4802, -6.0252], [29.5943, -5.651], [29.3426, -4.9829], [29.4034, -4.4494], [29.7177, -4.456], [30.1469, -4.0854], [30.4252, -3.5891], [30.7901, -3.2744], [30.5149, -2.9175], [30.5535, -2.3999], [30.8287, -2.3387], [30.8128, -1.5632], [30.51, -1.0674], [30.8447, -1.0021], [32.1942, -1.0021], [33.9031, -1.0021]]]\n    },\n    \"properties\": {\n      \"name\": \"Tanzania\",\n      \"id\": \"TZ\"\n    },\n    \"id\": \"TZ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[121.009, 22.6205], [120.5815, 22.3564], [120.3258, 22.5424], [120.0723, 23.1496], [120.1589, 23.7089], [121.0405, 25.0326], [121.5936, 25.2754], [121.9291, 24.9736], [121.2957, 22.9667], [121.009, 22.6205]]]\n    },\n    \"properties\": {\n      \"name\": \"Taiwan\",\n      \"id\": \"TW\"\n    },\n    \"id\": \"TW\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[41.5101, 41.5174], [42.4663, 41.4398], [42.7876, 41.5636], [43.4393, 41.1073], [43.7225, 40.7193], [43.5693, 40.4823], [43.7917, 40.0703], [44.2893, 40.0406], [44.7683, 39.7037], [44.8171, 39.6504], [44.023, 39.3774], [44.4309, 38.3569], [44.2112, 37.9081], [44.5614, 37.7448], [44.7652, 37.1424], [44.2818, 36.9782], [44.1562, 37.2831], [43.5161, 37.2445], [42.7748, 37.3719], [42.3588, 37.1087], [42.2683, 37.2765], [41.5154, 37.0892], [40.7058, 37.0976], [40.0164, 36.8259], [39.3568, 36.6817], [38.7669, 36.6932], [38.1916, 36.9014], [37.4365, 36.6435], [36.6584, 36.8024], [36.1275, 35.8316], [35.8927, 35.9164], [35.811, 36.3097], [36.1883, 36.659], [36.0489, 36.9107], [35.5375, 36.5969], [34.6014, 36.7847], [33.6945, 36.1819], [32.7947, 36.0358], [32.3775, 36.1836], [32.0219, 36.5352], [31.3525, 36.8011], [30.6441, 36.8654], [30.4838, 36.3106], [29.6893, 36.1565], [29.1433, 36.3971], [29.0381, 36.6937], [28.4837, 36.8037], [28.1339, 37.0297], [27.3491, 37.0195], [27.0779, 37.6875], [27.2323, 37.9787], [26.6828, 38.1985], [26.7636, 38.7098], [27.0135, 38.8869], [26.6819, 39.2922], [26.1133, 39.4675], [26.1812, 39.99], [26.7378, 40.4002], [27.4756, 40.3198], [28.2892, 40.4033], [29.3648, 40.8094], [29.3222, 41.2276], [31.2549, 41.1077], [31.4582, 41.3199], [32.3065, 41.7296], [33.3816, 42.0177], [34.7505, 41.9569], [35.2978, 41.7287], [36.0516, 41.6826], [36.5097, 41.2626], [38.3811, 40.9244], [39.4265, 41.1064], [40.2654, 40.9612], [40.9597, 41.2116], [41.5101, 41.5174]]], [[[28.0145, 41.9689], [28.3465, 41.4664], [29.0572, 41.2298], [28.7802, 40.9741], [28.172, 41.0806], [27.4996, 40.9732], [27.2581, 40.6874], [26.1053, 40.6114], [26.0391, 40.7269], [26.6246, 41.4016], [26.321, 41.7167], [26.6153, 41.9649], [27.2949, 42.0794], [28.0145, 41.9689]]]]\n    },\n    \"properties\": {\n      \"name\": \"Turkey\",\n      \"id\": \"TR\"\n    },\n    \"id\": \"TR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[11.5043, 33.182], [11.5048, 32.4137], [10.8265, 32.0807], [10.115, 31.4637], [10.2162, 30.7832], [9.8952, 30.3873], [9.5188, 30.2293], [9.0439, 32.0723], [8.3332, 32.5437], [8.2111, 32.9268], [7.7628, 33.2331], [7.5, 33.8323], [7.5138, 34.0805], [8.2457, 34.7339], [8.3944, 35.204], [8.2457, 35.8707], [8.2306, 36.5454], [8.5764, 36.9374], [9.6879, 37.3404], [10.1962, 37.2059], [10.5713, 36.8796], [11.1266, 36.8739], [10.5256, 36.3235], [10.5908, 35.8871], [11.0045, 35.6336], [11.1199, 35.2404], [10.5349, 34.5448], [10.0648, 34.2119], [10.1589, 33.8501], [10.7227, 33.5145], [11.0844, 33.5629], [11.2025, 33.2491], [11.5043, 33.182]]]\n    },\n    \"properties\": {\n      \"name\": \"Tunisia\",\n      \"id\": \"TN\"\n    },\n    \"id\": \"TN\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-61.0121, 10.1343], [-61.5967, 10.0646], [-61.4648, 10.5391], [-61.0338, 10.67], [-61.0121, 10.1343]]]\n    },\n    \"properties\": {\n      \"name\": \"Trinidad and Tobago\",\n      \"id\": \"TT\"\n    },\n    \"id\": \"TT\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-175.162, -21.1695], [-175.1567, -21.2636], [-175.3354, -21.1579], [-175.2255, -21.1188], [-175.162, -21.1695]]]\n    },\n    \"properties\": {\n      \"name\": \"Tonga\",\n      \"id\": \"TO\"\n    },\n    \"id\": \"TO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[125.0679, -9.512], [124.9223, -8.9424], [125.178, -8.6477], [125.8043, -8.4923], [126.6198, -8.4595], [126.9149, -8.7152], [126.3823, -8.9575], [125.4079, -9.2758], [125.0679, -9.512]]]\n    },\n    \"properties\": {\n      \"name\": \"Timor-Leste\",\n      \"id\": \"TL\"\n    },\n    \"id\": \"TL\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[66.5221, 37.3484], [65.7648, 37.569], [65.5549, 37.2512], [64.8162, 37.1322], [64.5108, 36.3408], [63.8623, 36.0123], [63.1086, 35.8187], [63.0566, 35.4459], [62.6105, 35.2333], [61.262, 35.6194], [61.1195, 36.6426], [60.3413, 36.6377], [60.0626, 36.9631], [59.5623, 37.1788], [59.2409, 37.5206], [58.8157, 37.6835], [58.4357, 37.6387], [57.4236, 37.9477], [57.1937, 38.2162], [56.4409, 38.2495], [56.2287, 38.0733], [55.5784, 38.0999], [55.0755, 37.9024], [54.7452, 37.502], [53.9142, 37.3435], [53.8237, 37.9281], [53.8685, 38.9491], [53.6177, 39.2159], [53.125, 39.432], [53.4721, 39.6686], [53.4042, 39.9603], [52.9874, 39.9878], [52.7335, 40.3988], [53.1454, 40.825], [53.8698, 40.6487], [54.7101, 40.8911], [54.5921, 41.1934], [54.0949, 41.5192], [53.8463, 42.0914], [52.9701, 41.9764], [52.4938, 41.7802], [53.2502, 42.2059], [54.1211, 42.3351], [54.9037, 41.9192], [55.5451, 41.2626], [55.9774, 41.3221], [57.0179, 41.2635], [56.9642, 41.8566], [57.3819, 42.1562], [57.8143, 42.1899], [58.2595, 42.688], [58.5889, 42.7785], [59.4509, 42.2996], [59.8584, 42.2951], [60.107, 41.9076], [60.0897, 41.3994], [60.455, 41.2218], [61.903, 41.0935], [62.6505, 39.8586], [64.1628, 38.9535], [65.613, 38.2384], [65.8572, 38.2686], [66.5745, 38.0107], [66.5221, 37.3484]]]\n    },\n    \"properties\": {\n      \"name\": \"Turkmenistan\",\n      \"id\": \"TM\"\n    },\n    \"id\": \"TM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-172.4791, -8.5807], [-172.4836, -8.5829], [-172.4987, -8.5478], [-172.4874, -8.5563], [-172.4791, -8.5807]]]\n    },\n    \"properties\": {\n      \"name\": \"Tokelau\",\n      \"id\": \"TK\"\n    },\n    \"id\": \"TK\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[70.9579, 40.239], [70.4514, 40.049], [69.9667, 40.2022], [69.5304, 40.0974], [69.229, 39.761], [69.5987, 39.5736], [70.6077, 39.5643], [70.7333, 39.4134], [71.4045, 39.598], [71.8062, 39.2758], [72.0428, 39.3521], [73.2351, 39.3743], [73.6315, 39.4489], [73.8015, 38.6068], [74.2773, 38.6597], [74.7452, 38.5101], [74.8912, 37.2317], [74.2596, 37.4154], [73.7496, 37.2317], [73.4814, 37.4718], [72.8955, 37.2676], [71.8022, 36.6941], [71.4329, 37.1273], [71.5518, 37.933], [71.2558, 38.3068], [70.8789, 38.4564], [70.2148, 37.9246], [70.2512, 37.664], [69.4922, 37.553], [69.2649, 37.1083], [68.9604, 37.3249], [68.0677, 36.9498], [67.7592, 37.1722], [67.8143, 37.4869], [68.2941, 38.0329], [68.0478, 38.6694], [68.1037, 38.9619], [67.6767, 39.0086], [67.3495, 39.242], [67.7193, 39.6216], [68.4632, 39.5368], [68.6528, 40.1827], [69.2281, 40.1875], [69.2063, 40.5666], [69.7128, 40.6572], [70.4417, 41.0234], [70.7511, 40.7397], [70.3826, 40.4534], [70.9579, 40.239]]]\n    },\n    \"properties\": {\n      \"name\": \"Tajikistan\",\n      \"id\": \"TJ\"\n    },\n    \"id\": \"TJ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[100.1225, 20.3167], [100.5429, 20.0885], [100.3977, 19.7561], [100.6254, 19.4999], [101.1546, 19.5794], [101.2864, 18.977], [101.0507, 18.4071], [101.1133, 18.0333], [100.9086, 17.5837], [101.1053, 17.4793], [102.1014, 18.2104], [102.7175, 17.8922], [103.0913, 18.1381], [103.3669, 18.4235], [103.9497, 18.3192], [104.8162, 17.3005], [104.7505, 16.6475], [105.047, 16.1601], [105.4062, 15.9874], [105.6223, 15.6998], [105.5131, 15.3606], [105.4754, 14.5301], [105.1833, 14.3464], [104.7789, 14.428], [103.1996, 14.3326], [102.729, 13.8421], [102.3198, 13.5398], [102.4995, 12.6698], [102.7557, 12.4261], [102.7366, 12.0896], [102.9341, 11.7065], [102.7628, 12.0124], [101.7236, 12.6893], [101.4449, 12.6187], [100.8634, 12.7146], [100.9628, 13.4319], [100.6561, 13.5212], [100.0173, 13.3534], [100.0901, 13.0457], [99.964, 12.6902], [99.9889, 12.1708], [99.6271, 11.4628], [99.4869, 10.8898], [99.165, 10.3198], [99.1606, 9.7339], [99.3936, 9.2136], [99.7239, 9.3144], [99.9046, 9.1129], [99.9605, 8.6712], [100.2792, 8.2686], [100.4537, 7.4425], [100.5864, 7.1762], [101.0178, 6.861], [101.4977, 6.8654], [102.1009, 6.2422], [101.8737, 5.8254], [101.5563, 5.908], [101.2571, 5.7894], [101.0533, 6.2427], [100.3453, 6.5498], [100.119, 6.442], [99.6959, 6.8765], [99.7203, 7.106], [99.051, 7.8877], [98.5791, 8.3445], [98.2382, 8.4231], [98.3714, 9.2904], [98.7025, 10.1902], [98.7571, 10.6612], [99.1903, 11.1051], [99.6147, 11.7811], [99.4052, 12.5477], [99.2196, 12.7399], [99.1366, 13.7165], [98.2462, 14.8147], [98.1911, 15.204], [98.5653, 15.4037], [98.6892, 16.3052], [98.4388, 16.9755], [97.793, 17.6813], [97.4849, 18.4941], [97.7539, 18.621], [97.8169, 19.46], [98.1112, 19.7623], [98.9169, 19.7729], [99.0208, 20.0419], [99.3382, 20.0788], [99.8904, 20.4246], [100.1225, 20.3167]]]\n    },\n    \"properties\": {\n      \"name\": \"Thailand\",\n      \"id\": \"TH\"\n    },\n    \"id\": \"TH\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[0.9007, 10.9932], [0.7799, 10.3598], [1.3299, 9.9971], [1.4244, 9.2851], [1.6002, 9.0498], [1.6224, 6.2169], [1.1874, 6.0895], [0.7369, 6.4526], [0.5256, 6.8508], [0.6348, 7.3537], [0.5837, 8.1456], [0.688, 8.3041], [0.4153, 8.6525], [0.5291, 9.3583], [0.2619, 9.4955], [0.3627, 10.2364], [-0.0577, 10.6305], [-0.0686, 11.1157], [0.9007, 10.9932]]]\n    },\n    \"properties\": {\n      \"name\": \"Togo\",\n      \"id\": \"TG\"\n    },\n    \"id\": \"TG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[22.86, 10.9195], [22.4938, 10.9963], [21.7063, 10.5746], [21.7258, 10.3664], [21.2638, 9.9745], [20.7733, 9.4058], [20.3422, 9.1271], [19.1455, 9.0161], [19.1087, 8.6561], [18.4553, 8.032], [17.6496, 7.9836], [16.7849, 7.5508], [16.3787, 7.6835], [15.8452, 7.4753], [15.4803, 7.5237], [15.443, 7.8518], [15.1163, 8.5571], [14.3324, 9.2034], [13.9773, 9.6917], [14.2432, 9.9798], [15.5411, 9.9603], [15.1323, 10.6483], [15.0297, 11.1135], [15.0812, 11.8455], [14.7612, 12.6556], [14.5162, 12.9796], [14.0638, 13.0786], [13.6062, 13.7045], [13.4481, 14.3805], [14.3679, 15.7499], [15.4745, 16.9085], [15.7351, 19.9039], [15.949, 20.3034], [15.5873, 20.7335], [15.6072, 20.9546], [15.182, 21.5232], [15.1722, 21.9223], [14.9791, 22.996], [15.9841, 23.4452], [17.7521, 22.5721], [19.6684, 21.6257], [21.5847, 20.6794], [23.9804, 19.4968], [23.9822, 17.2663], [23.9835, 15.7801], [23.105, 15.7024], [22.9323, 15.1622], [22.6709, 14.7223], [22.3815, 14.5505], [22.5098, 14.1275], [22.1076, 13.7302], [22.2283, 13.3294], [21.8253, 12.7905], [22.3522, 12.6604], [22.5564, 11.6697], [22.9226, 11.3448], [22.86, 10.9195]]]\n    },\n    \"properties\": {\n      \"name\": \"Chad\",\n      \"id\": \"TD\"\n    },\n    \"id\": \"TD\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-71.6615, 21.7651], [-71.8304, 21.7904], [-71.8062, 21.8521], [-71.6684, 21.8335], [-71.6615, 21.7651]]]\n    },\n    \"properties\": {\n      \"name\": \"Turks and Caicos Islands\",\n      \"id\": \"TC\"\n    },\n    \"id\": \"TC\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[42.3588, 37.1087], [41.7884, 36.5973], [41.4169, 36.5148], [41.2456, 36.0735], [41.3543, 35.6403], [41.1945, 34.7689], [40.9872, 34.4289], [40.6894, 34.3322], [38.7735, 33.372], [36.8182, 32.3173], [36.3721, 32.387], [35.7875, 32.735], [35.8691, 33.4319], [35.9424, 33.6676], [36.5851, 34.2212], [36.4329, 34.6136], [35.9761, 34.6291], [35.9433, 35.2239], [35.7644, 35.5715], [35.8927, 35.9164], [36.1275, 35.8316], [36.6584, 36.8024], [37.4365, 36.6435], [38.1916, 36.9014], [38.7669, 36.6932], [39.3568, 36.6817], [40.0164, 36.8259], [40.7058, 37.0976], [41.5154, 37.0892], [42.2683, 37.2765], [42.3588, 37.1087]]]\n    },\n    \"properties\": {\n      \"name\": \"Syria\",\n      \"id\": \"SY\"\n    },\n    \"id\": \"SY\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[55.5402, -4.6931], [55.3835, -4.6092], [55.4559, -4.5586], [55.5402, -4.6931]]]\n    },\n    \"properties\": {\n      \"name\": \"Seychelles\",\n      \"id\": \"SC\"\n    },\n    \"id\": \"SC\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-63.123, 18.0688], [-63.0111, 18.0688], [-63.0231, 18.0191], [-63.123, 18.0688]]]\n    },\n    \"properties\": {\n      \"name\": \"Sint Maarten\",\n      \"id\": \"SX\"\n    },\n    \"id\": \"SX\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[31.9482, -25.9577], [32.1129, -26.8393], [31.9584, -27.3058], [31.4697, -27.2956], [31.0636, -27.1123], [30.7941, -26.7643], [30.8034, -26.4136], [31.2074, -25.8432], [31.4151, -25.7464], [31.9482, -25.9577]]]\n    },\n    \"properties\": {\n      \"name\": \"eSwatini\",\n      \"id\": \"SZ\"\n    },\n    \"id\": \"SZ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[24.1557, 65.8052], [23.1024, 65.7353], [21.5656, 65.4081], [21.1381, 64.8087], [21.4653, 64.3796], [20.7626, 63.8678], [19.0345, 63.2377], [18.4632, 62.8959], [17.8955, 62.8305], [17.4174, 61.7407], [17.1307, 61.5758], [17.251, 60.7009], [17.9559, 60.5897], [18.5573, 60.2537], [18.9706, 59.7572], [17.876, 59.2709], [17.4569, 58.8585], [16.6522, 58.4344], [16.5279, 57.0681], [15.9965, 56.2227], [14.782, 56.1619], [14.2152, 55.8325], [14.3417, 55.5278], [13.3212, 55.3464], [12.5923, 56.1377], [12.8835, 56.6178], [12.4214, 56.9063], [11.4493, 58.1183], [11.147, 58.9886], [11.3885, 59.0365], [11.7982, 59.29], [11.6806, 59.5923], [12.4862, 60.1067], [12.5888, 60.4508], [12.294, 61.0027], [12.8809, 61.3523], [12.1555, 61.7207], [12.3034, 62.2856], [12.2181, 63.0007], [11.9997, 63.2917], [12.6625, 63.9404], [13.9604, 64.0141], [14.0776, 64.464], [13.6501, 64.5816], [14.4798, 65.3014], [14.5432, 66.1292], [15.423, 66.4899], [16.4036, 67.055], [16.1275, 67.4259], [17.3247, 68.1039], [17.9168, 67.965], [18.3785, 68.5624], [19.9698, 68.3565], [20.6223, 69.037], [21.9975, 68.5207], [22.7823, 68.3911], [23.639, 67.9543], [23.4681, 67.45], [23.9884, 66.8106], [23.7012, 66.4808], [24.1557, 65.8052]]], [[[19.0767, 57.836], [18.6998, 57.2428], [18.1365, 57.5566], [18.5374, 57.8305], [19.0767, 57.836]]]]\n    },\n    \"properties\": {\n      \"name\": \"Sweden\",\n      \"id\": \"SE\"\n    },\n    \"id\": \"SE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[16.5163, 46.4997], [15.6361, 46.2005], [15.6246, 45.8338], [15.3396, 45.4672], [13.8787, 45.4286], [13.5778, 45.5169], [13.7198, 45.5875], [13.3993, 46.3177], [13.6998, 46.5201], [14.5037, 46.4171], [15.0009, 46.6262], [15.9575, 46.6777], [16.0929, 46.8632], [16.5163, 46.4997]]]\n    },\n    \"properties\": {\n      \"name\": \"Slovenia\",\n      \"id\": \"SI\"\n    },\n    \"id\": \"SI\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[22.5386, 49.0727], [22.132, 48.4053], [21.4515, 48.5522], [20.4901, 48.5269], [19.8988, 48.1314], [18.7917, 48.0005], [18.7242, 47.787], [17.7619, 47.7701], [17.1475, 48.0058], [16.9531, 48.5988], [17.1884, 48.861], [17.7583, 48.888], [18.161, 49.2574], [18.8321, 49.5108], [19.4416, 49.5976], [19.802, 49.1923], [20.6161, 49.3916], [21.6397, 49.4121], [22.5386, 49.0727]]]\n    },\n    \"properties\": {\n      \"name\": \"Slovakia\",\n      \"id\": \"SK\"\n    },\n    \"id\": \"SK\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-54.1559, 5.3589], [-54.4522, 5.0135], [-54.3508, 4.0543], [-53.9904, 3.5895], [-54.2032, 3.1381], [-54.1954, 2.818], [-54.6163, 2.3266], [-55.0058, 2.593], [-56.1295, 2.2996], [-56.0198, 1.8424], [-56.4828, 1.9422], [-56.7043, 2.0363], [-57.2097, 2.8828], [-57.3036, 3.3769], [-57.5497, 3.3529], [-57.8327, 3.6761], [-58.0544, 4.1719], [-57.7111, 4.9909], [-57.3309, 5.0202], [-57.1948, 5.5484], [-56.9698, 5.9927], [-55.9395, 5.7957], [-55.8283, 5.9617], [-54.8338, 5.9883], [-54.0543, 5.8081], [-54.1559, 5.3589]]]\n    },\n    \"properties\": {\n      \"name\": \"Suriname\",\n      \"id\": \"SR\"\n    },\n    \"id\": \"SR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[6.6602, 0.1205], [6.5243, 0.3402], [6.6868, 0.4041], [6.7498, 0.2435], [6.6602, 0.1205]]]\n    },\n    \"properties\": {\n      \"name\": \"Sao Tome and Principe\",\n      \"id\": \"ST\"\n    },\n    \"id\": \"ST\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[20.2419, 46.1086], [20.775, 45.7499], [20.7741, 45.4845], [21.4919, 45.1223], [21.3845, 44.8701], [22.7051, 44.2376], [22.421, 44.0077], [22.5546, 43.4546], [22.9767, 43.1878], [22.4667, 42.8425], [22.3442, 42.3138], [21.5625, 42.2476], [21.7529, 42.6698], [21.3907, 42.7515], [21.0569, 43.0915], [20.3445, 42.8278], [19.5517, 43.2122], [19.1943, 43.5331], [19.4882, 43.7036], [19.1517, 44.3024], [19.3568, 44.8586], [19.007, 44.8693], [19.0549, 45.5271], [18.9054, 45.9315], [19.5308, 46.1552], [20.2419, 46.1086]]]\n    },\n    \"properties\": {\n      \"name\": \"Serbia\",\n      \"id\": \"RS\"\n    },\n    \"id\": \"RS\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-56.2671, 46.8384], [-56.3869, 47.0679], [-56.2873, 47.071], [-56.3148, 46.9538], [-56.2671, 46.8384]]]\n    },\n    \"properties\": {\n      \"name\": \"Saint Pierre and Miquelon\",\n      \"id\": \"PM\"\n    },\n    \"id\": \"PM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[41.5328, -1.6955], [40.9788, -0.8703], [40.9699, 1.378], [40.9646, 2.8145], [41.3419, 3.2016], [41.8839, 3.9779], [42.0241, 4.1377], [42.7916, 4.2922], [43.0158, 4.5634], [43.5383, 4.8404], [44.0283, 4.9509], [44.9405, 4.9119], [45.9348, 5.9972], [47.9781, 7.9969], [46.9784, 7.9969], [44.023, 8.9859], [43.4828, 9.3796], [43.1818, 9.8799], [42.8418, 10.2031], [42.6594, 10.6212], [42.9226, 10.9994], [43.2462, 11.4997], [43.853, 10.7841], [44.3865, 10.4303], [44.9427, 10.4365], [45.8168, 10.8361], [46.5652, 10.7459], [47.405, 11.1739], [48.0193, 11.1392], [48.6745, 11.3226], [48.9031, 11.2546], [50.1101, 11.5294], [50.7923, 11.9835], [51.2549, 11.8308], [51.0844, 11.3354], [51.1408, 10.6567], [50.8984, 10.2532], [50.8247, 9.428], [50.4297, 8.8452], [50.103, 8.1998], [49.3484, 6.9906], [49.0492, 6.1739], [48.6492, 5.4943], [47.9754, 4.4968], [46.879, 3.2854], [46.0511, 2.4753], [44.9201, 1.81], [44.3328, 1.3909], [43.4677, 0.6217], [41.9798, -0.9728], [41.5328, -1.6955]]]\n    },\n    \"properties\": {\n      \"name\": \"Somalia\",\n      \"id\": \"SO\"\n    },\n    \"id\": \"SO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[12.4853, 43.9016], [12.397, 43.9344], [12.441, 43.9824], [12.5146, 43.9531], [12.4853, 43.9016]]]\n    },\n    \"properties\": {\n      \"name\": \"San Marino\",\n      \"id\": \"SM\"\n    },\n    \"id\": \"SM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-89.3626, 14.416], [-89.0572, 14.329], [-88.4491, 13.851], [-88.151, 13.9872], [-87.7153, 13.8128], [-87.8143, 13.3991], [-87.9308, 13.1807], [-88.5121, 13.1838], [-89.2776, 13.4781], [-89.8043, 13.5602], [-90.0952, 13.7364], [-89.8726, 14.0454], [-89.3626, 14.416]]]\n    },\n    \"properties\": {\n      \"name\": \"El Salvador\",\n      \"id\": \"SV\"\n    },\n    \"id\": \"SV\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-10.2832, 8.4852], [-10.6474, 7.7594], [-11.2678, 7.2325], [-11.5075, 6.9067], [-11.7334, 7.0887], [-12.4856, 7.3861], [-12.5104, 7.6658], [-12.8809, 7.8566], [-13.2284, 8.696], [-13.2928, 9.0494], [-12.7559, 9.3734], [-12.5016, 9.8622], [-11.911, 9.9931], [-11.2056, 9.9776], [-10.6905, 9.3144], [-10.5005, 8.6876], [-10.2832, 8.4852]]]\n    },\n    \"properties\": {\n      \"name\": \"Sierra Leone\",\n      \"id\": \"SL\"\n    },\n    \"id\": \"SL\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[161.7152, -10.3873], [162.1054, -10.4539], [162.1236, -10.8245], [161.5381, -10.5666], [161.7152, -10.3873]]], [[[159.7505, -9.2727], [159.9707, -9.4334], [160.3547, -9.4214], [160.6254, -9.5888], [160.6494, -9.9288], [159.8535, -9.7916], [159.6218, -9.5319], [159.7505, -9.2727]]], [[[160.7493, -8.3139], [160.9979, -8.6122], [161.2584, -9.3171], [160.8736, -9.1568], [160.5904, -8.3729], [160.7493, -8.3139]]], [[[159.8793, -8.5341], [158.944, -8.0409], [159.1095, -7.9037], [159.8433, -8.3272], [159.8793, -8.5341]]]]\n    },\n    \"properties\": {\n      \"name\": \"Solomon Islands\",\n      \"id\": \"SB\"\n    },\n    \"id\": \"SB\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-5.6923, -15.9977], [-5.775, -15.9568], [-5.7078, -15.9062], [-5.6923, -15.9977]]]\n    },\n    \"properties\": {\n      \"name\": \"Saint Helena\",\n      \"id\": \"SH\"\n    },\n    \"id\": \"SH\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-37.1034, -54.0658], [-36.3264, -54.2509], [-35.7986, -54.7636], [-36.0855, -54.8666], [-37.1034, -54.0658]]]\n    },\n    \"properties\": {\n      \"name\": \"South Georgia and South Sandwich Islands\",\n      \"id\": \"GS\"\n    },\n    \"id\": \"GS\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[103.9697, 1.3314], [103.8201, 1.2653], [103.6501, 1.3257], [103.8179, 1.4473], [103.9697, 1.3314]]]\n    },\n    \"properties\": {\n      \"name\": \"Singapore\",\n      \"id\": \"SG\"\n    },\n    \"id\": \"SG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-12.2807, 14.8089], [-12.0193, 14.2065], [-12.0543, 13.633], [-11.6349, 13.3698], [-11.3903, 12.9419], [-11.3894, 12.4043], [-12.2912, 12.328], [-13.0828, 12.6334], [-13.7294, 12.6738], [-15.1962, 12.68], [-15.5748, 12.4904], [-16.7119, 12.3551], [-16.7634, 13.064], [-16.6488, 13.1541], [-15.8343, 13.1563], [-15.5096, 13.5864], [-16.5623, 13.5873], [-17.168, 14.6407], [-17.1471, 14.9221], [-16.5352, 15.8383], [-16.4411, 16.2045], [-16.1683, 16.5472], [-15.6208, 16.5068], [-15.1128, 16.6448], [-14.3, 16.5805], [-13.8685, 16.1481], [-13.4095, 16.0593], [-13.2579, 15.7002], [-12.8584, 15.2426], [-12.2807, 14.8089]]]\n    },\n    \"properties\": {\n      \"name\": \"Senegal\",\n      \"id\": \"SN\"\n    },\n    \"id\": \"SN\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[34.078, 9.4613], [34.0945, 8.5824], [33.9533, 8.4435], [33.2342, 8.3964], [33.0127, 7.9516], [33.2262, 7.7608], [33.6661, 7.6711], [34.0643, 7.2259], [34.7106, 6.6604], [35.0821, 5.6731], [35.2681, 5.4925], [33.9759, 4.2203], [33.4894, 3.7551], [32.8382, 3.7986], [32.3358, 3.7063], [32.0996, 3.5291], [31.7982, 3.8026], [31.4799, 3.6805], [31.1523, 3.7857], [30.8385, 3.4905], [30.5083, 3.8359], [30.1949, 3.9819], [29.6768, 4.5869], [29.1513, 4.3881], [28.7269, 4.5048], [28.192, 4.3503], [27.7881, 4.6446], [27.4032, 5.1094], [27.0836, 5.777], [26.5141, 6.0691], [26.3619, 6.6355], [25.8891, 7.0647], [25.3809, 7.3333], [25.2472, 7.7244], [24.8535, 8.1376], [24.2915, 8.2912], [24.1473, 8.6654], [24.5321, 8.8869], [24.7852, 9.7747], [25.067, 10.2936], [25.7981, 10.4206], [25.8913, 10.2026], [26.5514, 9.5257], [27.0743, 9.614], [27.8857, 9.5998], [28.0491, 9.3286], [28.8445, 9.3259], [28.9995, 9.61], [29.4731, 9.7685], [29.6054, 10.065], [30.0031, 10.2772], [30.7395, 9.7427], [31.2247, 9.7991], [31.6548, 10.2213], [31.9331, 10.6625], [32.4041, 11.0576], [32.3353, 11.7158], [32.0721, 12.0066], [32.7366, 12.0097], [33.1991, 12.2174], [33.0731, 11.5916], [33.172, 10.8503], [33.892, 10.1991], [34.078, 9.4613]]]\n    },\n    \"properties\": {\n      \"name\": \"South Sudan\",\n      \"id\": \"SS\"\n    },\n    \"id\": \"SS\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[36.8714, 21.9968], [36.9269, 21.5867], [37.1507, 21.1037], [37.2274, 20.5568], [37.2483, 19.5821], [37.4711, 18.8203], [37.9217, 18.5558], [38.6093, 18.0049], [38.2537, 17.5845], [37.7823, 17.458], [37.4112, 17.0616], [37.0091, 17.059], [36.9136, 16.2964], [36.4267, 15.132], [36.5243, 14.2567], [36.3907, 13.6259], [36.2123, 13.2712], [36.1075, 12.7266], [35.5961, 12.5375], [35.1123, 11.8166], [34.9312, 10.8649], [34.5716, 10.88], [34.2756, 10.528], [34.2915, 10.1249], [34.078, 9.4613], [33.892, 10.1991], [33.172, 10.8503], [33.0731, 11.5916], [33.1991, 12.2174], [32.7366, 12.0097], [32.0721, 12.0066], [32.3353, 11.7158], [32.4041, 11.0576], [31.9331, 10.6625], [31.6548, 10.2213], [31.2247, 9.7991], [30.7395, 9.7427], [30.0031, 10.2772], [29.6054, 10.065], [29.4731, 9.7685], [28.9995, 9.61], [28.8445, 9.3259], [28.0491, 9.3286], [27.8857, 9.5998], [27.0743, 9.614], [26.5514, 9.5257], [25.8913, 10.2026], [25.7981, 10.4206], [25.067, 10.2936], [24.7852, 9.7747], [24.5321, 8.8869], [24.1473, 8.6654], [23.5374, 8.8159], [23.6461, 9.8231], [23.2559, 10.4579], [22.86, 10.9195], [22.9226, 11.3448], [22.5564, 11.6697], [22.3522, 12.6604], [21.8253, 12.7905], [22.2283, 13.3294], [22.1076, 13.7302], [22.5098, 14.1275], [22.3815, 14.5505], [22.6709, 14.7223], [22.9323, 15.1622], [23.105, 15.7024], [23.9835, 15.7801], [23.9822, 17.2663], [23.9804, 19.4968], [23.9804, 19.9958], [24.9796, 20.0024], [24.9805, 21.9959], [27.2723, 21.9955], [30.3285, 21.9951], [32.6061, 21.9959], [34.2467, 21.9964], [36.8714, 21.9968]]]\n    },\n    \"properties\": {\n      \"name\": \"Sudan\",\n      \"id\": \"SD\"\n    },\n    \"id\": \"SD\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[46.5314, 29.0964], [47.4334, 28.9895], [47.6713, 28.5331], [48.4424, 28.5429], [48.9067, 27.6289], [49.4052, 27.1811], [49.9862, 26.829], [50.214, 26.3084], [50.0315, 26.1108], [50.558, 25.0868], [50.8043, 24.7894], [51.2682, 24.6074], [51.5683, 24.286], [51.5927, 24.0787], [52.555, 22.933], [55.1043, 22.6214], [55.186, 22.704], [55.641, 22.0017], [54.9774, 19.9958], [53.667, 19.559], [51.9775, 18.9961], [49.0421, 18.582], [48.172, 18.1567], [47.5795, 17.4483], [47.4418, 17.1118], [46.9758, 16.9533], [46.6819, 17.2685], [46.3104, 17.2312], [45.4066, 17.32], [45.1483, 17.4274], [44.1557, 17.3986], [43.9169, 17.3249], [43.418, 17.5162], [43.1911, 17.3595], [43.1649, 16.6892], [42.7992, 16.3718], [42.6989, 16.7372], [42.3833, 17.1225], [42.294, 17.435], [41.7498, 17.8855], [41.2296, 18.6783], [41.1159, 19.0822], [40.7591, 19.7556], [40.0808, 20.2661], [39.6138, 20.5178], [39.0936, 21.3101], [38.9879, 21.8819], [39.0958, 22.3928], [38.9413, 22.882], [38.4641, 23.712], [37.9195, 24.1852], [37.5431, 24.2918], [37.1808, 24.82], [37.1489, 25.291], [36.7627, 25.7513], [36.2496, 26.5947], [35.5815, 27.4323], [35.1807, 28.0347], [34.616, 28.1483], [34.7798, 28.5074], [34.9507, 29.3535], [36.0156, 29.1906], [36.4759, 29.4951], [36.7551, 29.8662], [37.4694, 29.9949], [37.6336, 30.3132], [37.9803, 30.5], [36.9584, 31.4917], [38.9622, 31.9951], [39.1455, 32.1247], [40.3693, 31.9391], [42.0743, 31.0802], [42.8578, 30.4952], [44.7163, 29.1937], [46.3565, 29.0636], [46.5314, 29.0964]]]\n    },\n    \"properties\": {\n      \"name\": \"Saudi Arabia\",\n      \"id\": \"SA\"\n    },\n    \"id\": \"SA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-8.6834, 27.6565], [-8.6834, 27.2858], [-8.6821, 25.9954], [-10.5624, 25.9954], [-12.0164, 25.9954], [-12.0235, 23.4674], [-12.6203, 23.2712], [-13.0316, 23], [-13.0944, 22.4958], [-13.0163, 21.3341], [-15.0018, 21.3314], [-16.9647, 21.3292], [-17.0481, 20.8063], [-16.9309, 21.9001], [-16.5143, 22.3333], [-16.2103, 23.0981], [-15.5864, 24.0729], [-15.0388, 24.5488], [-14.856, 24.8715], [-14.7949, 25.4041], [-14.4138, 26.2538], [-13.5758, 26.7349], [-13.1774, 27.652], [-8.6834, 27.6565]]]\n    },\n    \"properties\": {\n      \"name\": \"Western Sahara\",\n      \"id\": \"EH\"\n    },\n    \"id\": \"EH\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[30.51, -1.0674], [30.8128, -1.5632], [30.8287, -2.3387], [30.5535, -2.3999], [29.9303, -2.3396], [29.8682, -2.7164], [29.3901, -2.8087], [29.0146, -2.7204], [28.8765, -2.4004], [29.1064, -2.2335], [29.1295, -1.8601], [29.577, -1.3878], [30.1016, -1.3688], [30.51, -1.0674]]]\n    },\n    \"properties\": {\n      \"name\": \"Rwanda\",\n      \"id\": \"RW\"\n    },\n    \"id\": \"RW\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-178.8765, 71.5769], [-177.5322, 71.2631], [-177.8218, 71.0675], [-179.5066, 70.9235], [-180, 70.993], [-180, 71.1843], [-180, 71.3998], [-180, 71.5379], [-178.8765, 71.5769]]], [[[178.8614, 70.8265], [178.8911, 71.2311], [180, 71.5379], [180, 70.993], [178.8614, 70.8265]]], [[[60.4505, 69.935], [59.5783, 69.7385], [58.473, 70.2668], [59.0052, 70.4652], [60.4505, 69.935]]], [[[169.201, 69.5805], [167.789, 69.8369], [168.358, 70.0157], [169.375, 69.8826], [169.201, 69.5805]]], [[[50.265, 69.1857], [49.6262, 68.8596], [48.667, 68.7331], [48.279, 69.0403], [48.6315, 69.436], [49.225, 69.5113], [50.265, 69.1857]]], [[[-179.7985, 68.9404], [-178.8739, 68.7542], [-177.4075, 68.2451], [-175.3451, 67.678], [-174.4476, 67.1031], [-173.6797, 67.1449], [-172.6405, 66.9249], [-171.7956, 66.9318], [-170.192, 66.2014], [-170.6663, 65.6214], [-172.2115, 65.4252], [-172.2133, 65.0482], [-172.9239, 64.705], [-173.0092, 64.2975], [-173.7298, 64.3646], [-174.318, 64.6376], [-175.3951, 64.8025], [-175.8538, 65.0109], [-176.0933, 65.471], [-177.0563, 65.6137], [-178.3103, 65.4849], [-178.8794, 65.9364], [-179.7283, 65.8039], [-179.3521, 65.5167], [-180, 65.0672], [-180, 65.312], [-180, 65.5569], [-180, 65.8014], [-180, 66.0462], [-180, 66.291], [-180, 66.5359], [-180, 66.7807], [-180, 67.0252], [-180, 67.2701], [-180, 67.5149], [-180, 67.7597], [-180, 68.0045], [-180, 68.2491], [-180, 68.4939], [-180, 68.7387], [-180, 68.9835], [-179.7985, 68.9404]]], [[[163.635, 58.6033], [163.7611, 59.015], [164.6156, 58.8856], [163.635, 58.6033]]], [[[21.2358, 55.2641], [22.8311, 54.8384], [22.7663, 54.3568], [19.6045, 54.4591], [19.9747, 54.9212], [20.5202, 54.9949], [20.8998, 55.2867], [20.9579, 55.279], [21.2358, 55.2641]]], [[[142.761, 54.3939], [142.9181, 53.7942], [143.2235, 53.2961], [143.3234, 52.6136], [143.1556, 52.0838], [143.4552, 51.4715], [143.8161, 50.2825], [144.272, 49.3113], [143.105, 49.1988], [142.5741, 48.0719], [142.5568, 47.7381], [143.0056, 47.2228], [143.2821, 46.5592], [142.5781, 46.7008], [142.2088, 46.0891], [141.8302, 46.4508], [142.0388, 47.1402], [141.9642, 47.5872], [142.1817, 48.0133], [141.8661, 48.75], [142.1422, 49.5692], [142.0712, 50.5149], [142.2066, 51.2225], [141.7223, 51.7363], [141.8235, 53.3394], [142.5262, 53.4475], [142.761, 54.3939]]], [[[148.5995, 45.3176], [147.9137, 44.9904], [147.7694, 45.1906], [148.5995, 45.3176]]], [[[96.5265, 81.0755], [97.8316, 80.7983], [97.1751, 80.241], [94.565, 80.1261], [93.8725, 80.0102], [91.5239, 80.3584], [93.2626, 80.7912], [93.0651, 80.9885], [95.8008, 81.2804], [96.5265, 81.0755]]], [[[54.719, 81.1159], [57.694, 80.7923], [55.7124, 80.6372], [54.0665, 80.8136], [54.719, 81.1159]]], [[[62.168, 80.8347], [61.0511, 80.4186], [59.3044, 80.5216], [59.5921, 80.8165], [62.168, 80.8347]]], [[[97.6744, 80.1582], [100.0613, 79.7772], [99.4394, 78.8341], [97.5555, 78.8266], [94.6524, 79.1275], [93.0708, 79.4953], [94.9871, 80.0968], [97.6744, 80.1582]]], [[[102.8848, 79.254], [105.146, 78.8188], [105.3125, 78.4999], [103.7194, 78.2582], [101.2043, 78.192], [100.2841, 78.6792], [101.5905, 79.3504], [102.8848, 79.254]]], [[[130.6871, 42.3027], [130.5269, 42.5353], [130.5771, 42.8118], [131.0684, 42.9024], [131.262, 43.4333], [131.2553, 44.0716], [131.0822, 44.9101], [131.9775, 45.2439], [132.9359, 45.03], [133.1858, 45.4947], [133.8614, 46.2475], [134.1677, 47.3022], [134.7523, 47.7155], [134.5636, 48.3219], [134.2933, 48.3733], [133.4686, 48.0972], [133.1441, 48.1057], [132.5617, 47.7683], [131.0027, 47.6915], [130.712, 48.1279], [130.8043, 48.3414], [130.1962, 48.8916], [129.5339, 49.3235], [128.5267, 49.5943], [127.9998, 49.5685], [127.5027, 49.8735], [127.5901, 50.2091], [126.9247, 51.1002], [126.313, 52.3997], [125.649, 53.0422], [124.8122, 53.1339], [123.6079, 53.5465], [122.338, 53.485], [120.704, 53.1718], [120.0945, 52.7872], [120.6561, 52.5666], [120.7497, 52.0965], [120.067, 51.6007], [119.1921, 50.3797], [119.26, 50.0664], [118.4517, 49.8444], [117.8733, 49.5135], [116.6832, 49.8238], [116.1346, 50.0109], [115.2743, 49.9489], [114.743, 50.2337], [114.2969, 50.2743], [113.1641, 49.7971], [113.0557, 49.6162], [111.3366, 49.3559], [110.8279, 49.1661], [110.1997, 49.1704], [109.2365, 49.3348], [108.6137, 49.3228], [108.034, 49.594], [107.9479, 49.9247], [107.2332, 49.9893], [106.7112, 50.3125], [106.218, 50.3045], [105.3835, 50.4736], [103.6328, 50.1387], [102.6833, 50.3871], [102.2883, 50.585], [102.1116, 51.3534], [101.3814, 51.4526], [100.4687, 51.7261], [98.8485, 52.0701], [97.947, 51.3483], [97.8254, 50.9852], [98.2795, 50.5333], [98.1032, 50.0779], [97.2088, 49.7308], [96.986, 49.8828], [95.8518, 50.0129], [95.5229, 49.9112], [94.6147, 50.0237], [94.2511, 50.5564], [91.8044, 50.6936], [89.644, 49.903], [89.6542, 49.7175], [88.8317, 49.4485], [88.1925, 49.4518], [87.8143, 49.1624], [87.3229, 49.0858], [86.6144, 49.6098], [86.1807, 49.4993], [85.21, 49.6648], [84.9893, 50.0615], [84.2578, 50.2883], [83.9453, 50.7746], [83.3571, 50.9945], [82.4938, 50.7275], [81.4657, 50.7397], [80.8771, 51.2815], [79.9862, 50.7746], [79.4687, 51.493], [78.4757, 52.6385], [77.7042, 53.3791], [76.5758, 53.9424], [76.2664, 54.312], [74.4518, 53.6472], [73.2857, 53.5984], [73.3993, 53.8115], [72.9141, 54.1073], [71.0933, 54.2123], [71.1856, 54.5994], [70.7382, 55.3052], [70.1824, 55.1625], [68.9773, 55.3895], [68.2062, 55.1609], [68.0739, 54.9596], [66.2225, 54.6673], [65.4767, 54.6233], [65.1576, 54.3643], [64.4611, 54.3841], [63.0739, 54.1053], [61.9287, 53.9464], [61.3339, 54.0492], [60.9797, 53.6217], [61.1994, 53.2872], [62.0148, 53.1079], [61.974, 52.9437], [61.0476, 52.9725], [60.8021, 52.7448], [60.9375, 52.2805], [60.0657, 51.9764], [60.4647, 51.6513], [61.3632, 51.442], [61.5851, 51.2298], [61.3894, 50.8609], [60.6379, 50.6638], [59.9552, 50.7992], [59.8122, 50.5819], [58.8836, 50.6945], [58.3594, 51.0638], [57.8387, 51.0917], [57.4423, 50.8889], [57.0117, 51.0651], [56.4915, 51.0196], [55.7977, 50.6021], [55.5424, 50.6017], [54.727, 50.9981], [54.4216, 50.7804], [54.0416, 51.1153], [53.3381, 51.4824], [52.571, 51.4817], [52.3309, 51.6812], [51.6091, 51.4839], [50.7941, 51.7292], [50.2468, 51.2895], [49.498, 51.0835], [48.8086, 50.6012], [48.8432, 50.0131], [48.4344, 49.8284], [47.706, 50.378], [47.3264, 50.2734], [46.8022, 49.367], [47.0144, 49.0984], [46.7028, 48.8055], [46.661, 48.4124], [47.0042, 48.2846], [47.0934, 47.9477], [48.1099, 47.7452], [48.9595, 46.7744], [48.6102, 46.5663], [49.2321, 46.3372], [48.1592, 45.7371], [47.5244, 45.6017], [46.7529, 44.4205], [47.2301, 44.1923], [47.5089, 43.5096], [47.4632, 43.0351], [48.5729, 41.8446], [47.8609, 41.2129], [47.2612, 41.315], [46.7494, 41.8126], [46.4298, 41.8907], [45.6388, 42.205], [45.7275, 42.4749], [45.1602, 42.6751], [44.5059, 42.7488], [43.9573, 42.5664], [43.7824, 42.747], [42.4192, 43.2242], [41.5807, 43.2193], [40.6481, 43.534], [39.9782, 43.42], [38.7171, 44.2882], [38.1814, 44.4196], [37.8516, 44.6988], [37.4112, 44.7352], [36.9411, 45.2896], [37.6474, 45.3771], [37.9332, 46.0016], [38.1836, 46.0948], [37.9679, 46.6182], [39.2933, 47.1056], [38.2142, 47.0914], [38.2875, 47.5592], [38.9005, 47.8553], [39.7359, 47.8447], [39.9609, 48.238], [39.6866, 49.0079], [40.0701, 49.2003], [39.7807, 49.5721], [39.1748, 49.8559], [38.2586, 50.0524], [38.0469, 49.9201], [37.4228, 50.4115], [36.3059, 50.2805], [35.4115, 50.5398], [35.3121, 51.0438], [34.2809, 51.3117], [34.3976, 51.7804], [33.7353, 52.3448], [32.508, 52.3084], [31.7636, 52.1012], [31.5771, 52.3122], [31.4178, 53.196], [32.1422, 53.0913], [32.7042, 53.3363], [31.792, 54.0558], [31.4036, 54.1959], [31.1213, 54.6484], [30.9069, 55.5699], [30.2335, 55.8452], [29.4824, 55.6845], [29.375, 55.9386], [28.7948, 55.9426], [28.1481, 56.143], [27.8063, 56.867], [27.797, 57.3169], [27.3517, 57.5282], [27.753, 57.8411], [27.4272, 58.7331], [28.0127, 59.4842], [28.014, 59.7248], [28.9471, 59.8289], [29.0692, 60.1915], [28.6506, 60.611], [27.7978, 60.5362], [29.6902, 61.5461], [31.2855, 62.5679], [31.5341, 62.8855], [31.1807, 63.2082], [30.0555, 63.689], [30.5038, 64.0205], [30.1083, 64.3661], [30.0728, 64.7649], [29.604, 64.9685], [29.9032, 66.0911], [29.0869, 66.9709], [29.9414, 67.5475], [29.3439, 68.062], [28.4708, 68.4883], [28.9657, 69.0219], [30.8696, 69.7834], [31.9846, 69.9536], [32.9417, 69.7519], [32.3775, 69.4791], [33.6843, 69.3102], [35.858, 69.1917], [40.3809, 67.8318], [40.9663, 67.7135], [41.1887, 66.8262], [40.5216, 66.4466], [39.2889, 66.1321], [38.3975, 66.0644], [35.5136, 66.3958], [34.8247, 66.6111], [32.4636, 66.9163], [33.5667, 66.321], [34.7865, 65.8645], [34.4065, 65.3957], [34.8034, 64.986], [34.8695, 64.5601], [35.6472, 64.3783], [36.365, 64.0028], [37.4423, 63.8135], [38.0708, 64.0259], [37.9537, 64.3202], [37.1835, 64.4085], [36.5283, 64.8473], [36.883, 65.1724], [38.0096, 64.8788], [39.7581, 64.577], [40.281, 64.998], [39.8167, 65.5979], [41.4759, 66.1235], [42.2106, 66.5197], [44.0971, 66.2351], [44.4886, 66.6719], [44.292, 67.0996], [43.7824, 67.2545], [44.2254, 67.9956], [44.0483, 68.5489], [45.8922, 68.4797], [46.6903, 67.8489], [45.5287, 67.7577], [44.9396, 67.4776], [45.9859, 66.853], [46.6908, 66.8255], [47.7091, 67.045], [47.8746, 67.5841], [48.8778, 67.7315], [50.839, 68.3498], [52.5502, 68.5924], [53.8019, 68.9959], [53.9679, 68.2273], [54.5614, 68.273], [56.0436, 68.649], [57.1267, 68.554], [58.9191, 69.0039], [59.8975, 68.422], [60.9335, 68.9868], [60.1704, 69.5909], [61.0161, 69.8515], [63.3616, 69.6753], [68.5041, 68.3485], [69.1406, 68.9506], [68.5427, 68.9671], [68.006, 69.48], [67.0645, 69.6937], [66.9265, 70.0142], [67.2847, 70.7386], [66.6664, 70.9006], [66.9176, 71.2824], [68.2693, 71.6828], [69.039, 72.67], [69.6449, 72.8975], [71.5003, 72.9137], [72.8121, 72.6915], [72.6243, 72.0794], [71.9118, 71.5478], [72.7317, 70.823], [72.5297, 70.1724], [72.5275, 69.0805], [73.548, 68.5744], [73.1521, 67.8651], [72.5945, 67.587], [71.5514, 66.7605], [70.9393, 66.5481], [69.877, 66.8455], [69.1943, 66.5787], [70.3396, 66.3423], [71.9172, 66.2467], [72.4174, 66.5607], [73.7922, 66.9953], [74.0745, 67.4141], [74.7696, 67.7663], [74.3914, 68.4206], [74.5796, 68.7511], [76.4591, 68.9784], [77.2385, 68.4697], [77.6509, 68.9029], [76.001, 69.2349], [74.8149, 69.0907], [73.7757, 69.1983], [73.56, 69.7072], [74.3111, 70.6536], [73.0864, 71.4449], [73.6719, 71.845], [75.7413, 72.2962], [76.0325, 71.9103], [78.4828, 72.395], [79.422, 72.3808], [80.7626, 72.0892], [81.511, 71.7463], [82.9861, 71.7487], [82.1835, 72.2376], [80.827, 72.4882], [80.5096, 73.0861], [80.5833, 73.5684], [83.5449, 73.6665], [86.5913, 73.8943], [86.6513, 74.6824], [87.6713, 75.1296], [90.1851, 75.591], [93.5498, 75.854], [94.5756, 76.1517], [96.879, 75.9311], [100.3223, 76.479], [100.9899, 76.9904], [103.1312, 77.6265], [104.0146, 77.7304], [105.8944, 77.4889], [104.9121, 77.1748], [107.4299, 76.9265], [108.0278, 76.7185], [111.1151, 76.723], [112.6194, 76.3836], [113.8712, 75.856], [113.6137, 75.293], [111.8683, 74.7401], [109.8402, 74.3219], [108.1996, 73.6941], [107.2709, 73.621], [106.4782, 73.1394], [107.7503, 73.1731], [109.8553, 73.4726], [110.2614, 74.0174], [112.1471, 73.7089], [114.0607, 73.5846], [115.3378, 73.7025], [118.4504, 73.5897], [118.4304, 73.2466], [119.7505, 72.9792], [123.1605, 72.955], [123.6222, 73.1933], [123.3052, 73.5329], [124.3883, 73.7549], [125.617, 73.5207], [127.7406, 73.4817], [128.8885, 73.1902], [129.4118, 72.3156], [128.3589, 72.0883], [129.7621, 71.1195], [131.1572, 70.7422], [131.562, 70.9011], [132.5621, 71.8952], [134.1029, 71.3789], [135.8847, 71.6306], [137.3153, 71.3594], [138.1183, 71.5663], [139.695, 71.7003], [139.6014, 72.496], [142.0614, 72.7208], [145.4856, 72.5422], [146.594, 72.3025], [148.402, 72.312], [149.5015, 72.1644], [150.5997, 71.5201], [151.5825, 71.2871], [152.5089, 70.8345], [153.7944, 70.88], [155.8953, 71.0955], [158.0371, 71.0394], [159.3506, 70.7908], [160.0062, 70.3096], [159.8326, 69.7849], [161.5367, 69.3796], [162.3757, 69.6491], [164.1597, 69.7192], [164.5135, 69.6091], [166.8204, 69.4995], [167.6283, 69.7403], [168.303, 69.2716], [169.3106, 69.0796], [169.6098, 68.7862], [170.5375, 68.8254], [170.9952, 69.0454], [170.5824, 69.5834], [170.4869, 70.1076], [172.5595, 69.9682], [173.2772, 69.8238], [176.1075, 69.8604], [176.9243, 69.646], [178.8485, 69.3872], [180, 68.9835], [180, 65.0672], [178.5196, 64.6029], [177.4671, 64.7368], [177.433, 64.4445], [178.6501, 63.9653], [178.7065, 63.5216], [179.3324, 63.1902], [179.5703, 62.6875], [179.1206, 62.3204], [177.3513, 62.5874], [175.2681, 62.1025], [174.5144, 61.8237], [173.6235, 61.7161], [172.8564, 61.4693], [172.3926, 61.0618], [170.6081, 60.435], [169.9827, 60.067], [169.2267, 60.5959], [168.1374, 60.5739], [166.9642, 60.3069], [166.3521, 60.4847], [165.0843, 60.0985], [163.7802, 60.041], [163.41, 59.8349], [163.2728, 59.3026], [162.1418, 58.4475], [161.9602, 58.0768], [162.4671, 57.7661], [163.2138, 57.6869], [162.7792, 57.3577], [162.8027, 56.8115], [163.2564, 56.6881], [163.3354, 56.2325], [162.5284, 56.2606], [162.085, 56.0897], [161.7294, 55.358], [162.1058, 54.7521], [161.7258, 54.533], [160.7728, 54.5414], [160.0746, 54.1892], [159.8437, 53.7837], [159.8975, 53.3807], [158.6088, 52.8735], [158.4637, 52.3049], [158.1037, 51.8095], [156.7476, 50.9692], [156.5003, 51.475], [156.3645, 52.5093], [156.0986, 53.0065], [155.6201, 54.8646], [155.5549, 55.3484], [155.9828, 56.6952], [156.7285, 57.1522], [157.4503, 57.7994], [158.2102, 58.0253], [159.0367, 58.4239], [159.8473, 59.1271], [161.7534, 60.1522], [162.0037, 60.4201], [162.9732, 60.7828], [163.71, 60.9168], [164.0052, 61.3439], [164.2556, 62.6966], [163.3318, 62.5508], [163.0091, 61.7915], [162.3926, 61.6621], [160.7666, 60.7533], [159.8832, 61.2917], [160.3174, 61.7933], [159.5525, 61.7194], [159.0767, 61.9223], [158.07, 61.7536], [157.4694, 61.7989], [156.6801, 61.4806], [156.63, 61.2724], [155.8532, 60.7772], [154.9707, 60.3766], [154.2929, 59.8333], [154.5827, 59.5401], [155.1669, 59.3601], [154.011, 59.0756], [153.3611, 59.2147], [152.8822, 58.9391], [151.99, 59.1601], [151.4857, 59.5241], [150.4572, 59.5907], [149.6427, 59.7705], [149.205, 59.4882], [147.8746, 59.3881], [147.5146, 59.2687], [146.4444, 59.4305], [145.9317, 59.1983], [145.5544, 59.4136], [143.192, 59.3701], [142.0255, 58.9997], [141.7547, 58.7453], [140.6849, 58.2122], [140.447, 57.8136], [140.0022, 57.6875], [138.6621, 56.9655], [137.6913, 56.1395], [136.175, 55.3522], [135.2623, 54.9434], [135.8514, 54.5838], [136.7973, 54.6209], [136.6828, 53.9313], [137.1555, 53.8217], [137.3282, 53.5389], [138.2923, 53.5924], [138.6608, 53.7449], [138.6958, 54.3199], [139.7075, 54.2771], [140.3471, 53.8126], [141.4022, 53.184], [141.1696, 52.3684], [141.4853, 52.1786], [140.6876, 51.2322], [140.4763, 50.546], [140.5171, 49.596], [140.1704, 48.5238], [139.3728, 47.8873], [139.0012, 47.3835], [138.5866, 47.0572], [138.3367, 46.5432], [137.6855, 45.8183], [136.8035, 45.1711], [136.1421, 44.4893], [135.8745, 44.3734], [135.1309, 43.5256], [133.7092, 42.83], [133.1601, 42.6969], [132.4813, 42.9099], [132.3344, 43.2388], [131.7946, 43.2553], [131.1586, 42.6258], [130.6871, 42.3027]]], [[[67.7654, 76.2376], [66.2824, 75.9837], [61.3561, 75.3149], [60.2224, 74.7965], [58.5347, 74.4988], [58.4415, 74.1288], [56.9638, 73.3665], [55.0067, 73.4539], [53.7629, 73.7662], [54.6427, 73.9595], [57.0876, 75.3837], [58.8814, 75.8547], [62.9714, 76.2367], [65.8629, 76.6133], [67.5351, 77.0077], [68.4859, 76.9338], [68.9, 76.5729], [67.7654, 76.2376]]], [[[140.0488, 75.829], [140.9442, 75.7004], [142.4605, 75.9035], [143.6856, 75.8636], [145.2552, 75.5857], [144.0199, 75.0446], [141.9873, 74.9913], [139.0993, 74.6566], [138.0921, 74.7974], [137.0064, 75.235], [137.5013, 75.9097], [138.8139, 76.1996], [140.0488, 75.829]]], [[[146.7951, 75.3709], [150.1039, 75.2193], [150.6463, 74.9445], [149.5969, 74.7725], [148.0926, 74.8258], [146.1483, 75.1984], [146.7951, 75.3709]]], [[[113.3873, 74.4005], [112.7823, 74.0951], [111.6428, 74.2729], [112.0845, 74.549], [113.3873, 74.4005]]], [[[142.1848, 73.8958], [143.3438, 73.5687], [143.1934, 73.2206], [140.6627, 73.4519], [141.0849, 73.8658], [142.1848, 73.8958]]], [[[55.32, 73.3083], [56.4293, 73.2011], [55.356, 72.4651], [55.2978, 71.9354], [57.1458, 70.589], [54.6009, 70.68], [53.7225, 70.8145], [53.3638, 71.5416], [51.8124, 71.4912], [51.5825, 72.0712], [52.6221, 72.3009], [53.7531, 73.2932], [55.32, 73.3083]]]]\n    },\n    \"properties\": {\n      \"name\": \"Russia\",\n      \"id\": \"RU\"\n    },\n    \"id\": \"RU\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[28.2124, 45.4503], [28.7606, 45.2341], [29.2236, 45.4028], [29.7061, 45.2599], [29.5574, 44.8435], [29.0483, 44.7574], [28.6452, 44.2958], [28.5853, 43.7422], [27.0867, 44.1675], [26.2158, 44.0072], [25.4972, 43.6708], [23.2244, 43.8741], [22.7051, 44.2376], [21.3845, 44.8701], [21.4919, 45.1223], [20.7741, 45.4845], [20.775, 45.7499], [20.2419, 46.1086], [21.1519, 46.3044], [22.2905, 47.7279], [22.8764, 47.9472], [23.2027, 48.0844], [24.8935, 47.7177], [26.1625, 47.9925], [26.6189, 48.2597], [26.9806, 48.155], [27.3366, 47.6396], [28.0717, 46.9786], [28.2444, 46.4513], [28.0997, 45.9728], [28.2124, 45.4503]]]\n    },\n    \"properties\": {\n      \"name\": \"Romania\",\n      \"id\": \"RO\"\n    },\n    \"id\": \"RO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[55.7972, -21.3395], [55.3627, -21.2738], [55.3112, -20.904], [55.6618, -20.9062], [55.7972, -21.3395]]]\n    },\n    \"properties\": {\n      \"name\": \"Reunion\",\n      \"id\": \"RE\"\n    },\n    \"id\": \"RE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[51.2682, 24.6074], [50.8043, 24.7894], [50.763, 25.4445], [51.0032, 25.9816], [51.2624, 26.1534], [51.543, 25.9022], [51.4853, 25.5249], [51.602, 25.148], [51.2682, 24.6074]]]\n    },\n    \"properties\": {\n      \"name\": \"Qatar\",\n      \"id\": \"QA\"\n    },\n    \"id\": \"QA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-149.3215, -17.6902], [-149.579, -17.7351], [-149.6114, -17.5318], [-149.3792, -17.5224], [-149.3215, -17.6902]]]\n    },\n    \"properties\": {\n      \"name\": \"French Polynesia\",\n      \"id\": \"PF\"\n    },\n    \"id\": \"PF\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-58.1598, -20.1645], [-57.8303, -20.9981], [-57.9856, -22.0461], [-56.9374, -22.2712], [-56.5239, -22.1025], [-55.8492, -22.3076], [-55.6541, -22.8105], [-55.3662, -23.9913], [-54.6254, -23.8124], [-54.2418, -24.0472], [-54.4731, -25.2204], [-54.6158, -25.576], [-54.7552, -26.533], [-55.1358, -26.9312], [-55.4266, -27.0093], [-55.7147, -27.415], [-56.0673, -27.3076], [-56.3705, -27.5375], [-57.1118, -27.4701], [-58.6186, -27.1323], [-58.1914, -26.6302], [-58.2031, -26.3816], [-57.8906, -26.0065], [-57.5872, -25.4051], [-57.8216, -25.1365], [-58.3654, -24.9594], [-59.373, -24.4538], [-59.8924, -24.0934], [-61.0329, -23.7556], [-61.7984, -23.1821], [-62.3726, -22.439], [-62.6509, -22.2339], [-62.2767, -21.066], [-62.2763, -20.5627], [-61.917, -20.0553], [-61.7569, -19.6451], [-60.0073, -19.2976], [-59.0905, -19.286], [-58.1803, -19.8178], [-58.1598, -20.1645]]]\n    },\n    \"properties\": {\n      \"name\": \"Paraguay\",\n      \"id\": \"PY\"\n    },\n    \"id\": \"PY\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-7.4061, 37.1793], [-7.8343, 37.0057], [-8.5977, 37.1211], [-8.8141, 37.431], [-8.9147, 38.5123], [-9.4742, 38.7307], [-9.3748, 39.3384], [-9.1482, 39.5426], [-8.8867, 40.1795], [-8.6557, 41.0296], [-8.7771, 41.9409], [-8.2131, 42.1336], [-7.9208, 41.8836], [-7.4037, 41.8335], [-6.6182, 41.9422], [-6.2125, 41.5321], [-6.9285, 41.0092], [-6.8102, 40.3429], [-7.0146, 40.2084], [-7.0368, 39.7139], [-7.4452, 39.5363], [-7.0461, 38.9069], [-7.3431, 38.4572], [-7.1855, 38.0062], [-7.5036, 37.5854], [-7.4061, 37.1793]]]\n    },\n    \"properties\": {\n      \"name\": \"Portugal\",\n      \"id\": \"PT\"\n    },\n    \"id\": \"PT\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[130.5269, 42.5353], [130.6871, 42.3027], [130.4576, 42.3018], [129.7563, 41.7123], [129.7088, 40.8574], [128.3043, 40.0362], [127.5684, 39.7818], [127.3943, 39.2079], [127.7863, 39.084], [128.3745, 38.6233], [128.0389, 38.3085], [127.1697, 38.3045], [126.634, 37.7816], [125.9419, 37.8735], [125.4492, 37.7301], [125.1931, 38.0378], [124.691, 38.1292], [125.0675, 38.5567], [125.4097, 39.2882], [125.3609, 39.5266], [124.5574, 39.7907], [124.3621, 40.0042], [124.8895, 40.4596], [125.989, 40.9049], [126.9034, 41.7811], [127.1795, 41.5312], [128.1112, 41.3891], [128.291, 41.5627], [128.0451, 41.9875], [128.9236, 42.0381], [129.3137, 42.4137], [129.7199, 42.4749], [129.8983, 42.9983], [130.2406, 42.8917], [130.5269, 42.5353]]]\n    },\n    \"properties\": {\n      \"name\": \"North Korea\",\n      \"id\": \"KP\"\n    },\n    \"id\": \"KP\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-66.1295, 18.4448], [-65.6288, 18.3813], [-65.9708, 17.9743], [-67.1968, 17.9943], [-67.1587, 18.4994], [-66.1295, 18.4448]]]\n    },\n    \"properties\": {\n      \"name\": \"Puerto Rico\",\n      \"id\": \"PR\"\n    },\n    \"id\": \"PR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[19.6045, 54.4591], [22.7663, 54.3568], [23.37, 54.2005], [23.4845, 53.9398], [23.8872, 53.0276], [23.8445, 52.6642], [23.1969, 52.257], [23.6523, 52.0403], [23.6053, 51.5179], [24.1056, 50.8449], [23.7118, 50.3773], [22.6496, 49.539], [22.5386, 49.0727], [21.6397, 49.4121], [20.6161, 49.3916], [19.802, 49.1923], [19.4416, 49.5976], [18.8321, 49.5108], [18.5622, 49.8792], [17.8746, 49.9722], [17.152, 50.3784], [16.6792, 50.0974], [16.0072, 50.6117], [14.8096, 50.8589], [15.0164, 51.2527], [14.6018, 51.8324], [14.7527, 52.0818], [14.6196, 52.5284], [14.1286, 52.8782], [14.4145, 53.2835], [14.2587, 53.7296], [14.2139, 53.8707], [14.2112, 53.9504], [16.1865, 54.2904], [16.5598, 54.5539], [17.2621, 54.7294], [18.3234, 54.8382], [18.6697, 54.4309], [19.6045, 54.4591]]]\n    },\n    \"properties\": {\n      \"name\": \"Poland\",\n      \"id\": \"PL\"\n    },\n    \"id\": \"PL\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[152.9656, -4.7565], [152.6807, -4.4986], [152.5985, -3.9948], [153.1241, -4.2523], [152.9656, -4.7565]]], [[[155.9575, -6.687], [155.7191, -6.8628], [155.344, -6.7217], [155.202, -6.3075], [154.782, -5.9706], [154.7412, -5.5453], [154.9969, -5.54], [155.467, -6.145], [155.8225, -6.3803], [155.9575, -6.687]]], [[[151.9158, -4.2967], [152.4054, -4.3406], [152.4001, -4.7312], [152.0135, -5.0038], [152.1431, -5.3571], [151.8652, -5.5649], [151.515, -5.5524], [151.2291, -5.92], [150.4283, -6.2764], [149.6524, -6.2906], [149.3825, -6.078], [149.1264, -6.1277], [148.4011, -5.7651], [148.3447, -5.5449], [148.999, -5.4845], [149.2454, -5.5729], [150.2987, -5.5356], [150.953, -5.4237], [151.3268, -4.9603], [151.6712, -4.8835], [151.5518, -4.3455], [151.9158, -4.2967]]], [[[140.9761, -9.1187], [140.9748, -6.3461], [140.9739, -4.0232], [140.9734, -2.6099], [141.1856, -2.6276], [142.2115, -3.0835], [142.9053, -3.3206], [143.509, -3.4311], [144.0159, -3.7835], [144.4775, -3.8253], [145.0879, -4.349], [145.3347, -4.3854], [145.767, -4.8231], [145.8527, -5.4712], [146.4036, -5.6164], [147.0344, -5.9191], [147.3766, -5.9506], [147.8018, -6.315], [147.8453, -6.6626], [147.1191, -6.7217], [146.9607, -6.929], [147.1902, -7.3782], [147.7242, -7.8762], [148.1268, -8.1035], [148.2471, -8.5545], [148.5831, -9.0516], [149.2476, -9.0712], [149.2032, -9.4068], [149.7612, -9.8058], [149.8744, -10.0131], [150.6672, -10.2573], [150.4825, -10.6368], [150.0169, -10.5773], [149.7541, -10.3531], [147.7685, -10.0699], [146.6965, -9.0255], [146.0334, -8.0764], [144.9738, -7.8021], [144.5099, -7.5673], [143.6137, -8.2003], [143.0948, -8.3112], [143.366, -8.9611], [142.6474, -9.3277], [142.2297, -9.1697], [141.1332, -9.2212], [140.9761, -9.1187]]]]\n    },\n    \"properties\": {\n      \"name\": \"Papua New Guinea\",\n      \"id\": \"PG\"\n    },\n    \"id\": \"PG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[134.5956, 7.3821], [134.5064, 7.4372], [134.5561, 7.5939], [134.6595, 7.6631], [134.5956, 7.3821]]]\n    },\n    \"properties\": {\n      \"name\": \"Palau\",\n      \"id\": \"PW\"\n    },\n    \"id\": \"PW\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[126.0059, 9.3211], [126.1932, 9.2767], [126.3197, 8.8448], [126.4355, 7.8327], [126.5816, 7.2476], [126.08, 6.7332], [125.8243, 7.3333], [125.4008, 6.7957], [125.5886, 6.4659], [125.6681, 5.9785], [125.4559, 5.6643], [124.6364, 5.9981], [124.078, 6.4042], [123.9853, 6.9937], [124.2068, 7.3963], [123.9684, 7.6644], [123.493, 7.8078], [123.3909, 7.4074], [122.4978, 7.6729], [122.176, 7.0044], [122.0472, 7.3635], [122.132, 7.8105], [122.3371, 8.0284], [122.911, 8.1563], [123.0176, 8.3982], [123.4344, 8.7032], [124.2258, 8.2712], [124.4513, 8.6064], [124.731, 8.5629], [124.869, 8.9722], [125.5336, 9.1408], [125.5211, 9.7592], [126.0059, 9.3211]]], [[[124.5938, 9.7871], [124.3599, 9.63], [123.9355, 9.6238], [123.817, 9.8173], [124.1726, 10.1351], [124.577, 10.0268], [124.5938, 9.7871]]], [[[123.1308, 9.064], [122.5626, 9.4826], [122.4716, 9.9616], [122.8556, 10.0868], [122.8169, 10.5036], [122.9834, 10.8867], [123.2564, 10.9941], [123.5676, 10.7806], [123.1618, 9.8644], [123.3083, 9.357], [123.1308, 9.064]]], [[[123.3705, 9.4498], [123.386, 9.9669], [123.7114, 10.4738], [123.952, 10.3167], [123.6435, 10.0202], [123.3705, 9.4498]]], [[[117.3109, 8.4395], [117.35, 8.7134], [117.8848, 9.2407], [118.1148, 9.3468], [119.0239, 10.3535], [119.2241, 10.4774], [119.2614, 10.8449], [119.5268, 10.9532], [119.6844, 10.5515], [119.1917, 10.061], [118.782, 9.9163], [118.4348, 9.2562], [117.9896, 8.8772], [117.3109, 8.4395]]], [[[124.5747, 11.343], [124.9299, 11.3727], [125.0133, 10.7854], [125.2535, 10.2639], [125.0266, 10.0331], [124.7807, 10.168], [124.7869, 10.7815], [124.4456, 10.9235], [124.5747, 11.343]]], [[[122.4964, 11.6151], [123.1583, 11.5356], [123.0167, 11.1166], [122.7699, 10.8236], [122.1977, 10.623], [121.9642, 10.8716], [122.1036, 11.643], [122.4964, 11.6151]]], [[[125.2397, 12.5277], [125.5358, 12.1913], [125.4568, 11.9524], [125.6281, 11.1321], [125.2335, 11.145], [124.8841, 11.7753], [124.3848, 12.2441], [124.2946, 12.5695], [125.2397, 12.5277]]], [[[120.7045, 13.4794], [121.2029, 13.4324], [121.5225, 13.131], [121.5407, 12.6383], [121.2367, 12.2188], [120.922, 12.5117], [120.7635, 12.9698], [120.5082, 13.2601], [120.7045, 13.4794]]], [[[121.1017, 18.6153], [121.8457, 18.2952], [122.2998, 18.4026], [122.1511, 17.7563], [122.2368, 17.435], [122.5191, 17.1247], [122.1351, 16.185], [121.5953, 15.9333], [121.3925, 15.3242], [121.6957, 14.7374], [121.8004, 14.1138], [122.4907, 14.3224], [122.856, 14.2509], [123.2315, 13.7475], [123.4322, 13.9664], [123.726, 13.8843], [123.6079, 13.5283], [124.1428, 13.036], [124.0598, 12.5672], [123.311, 13.044], [123.1632, 13.4417], [122.5954, 13.9078], [122.4068, 13.4927], [121.7778, 13.9375], [121.2034, 13.6401], [120.6166, 14.1879], [120.922, 14.4933], [120.8882, 14.7157], [120.0821, 14.8511], [119.8309, 16.3266], [120.1598, 16.0478], [120.3893, 16.2218], [120.3054, 16.5294], [120.4088, 16.9555], [120.3582, 17.6383], [120.5997, 18.5078], [121.1017, 18.6153]]]]\n    },\n    \"properties\": {\n      \"name\": \"Philippines\",\n      \"id\": \"PH\"\n    },\n    \"id\": \"PH\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-69.9658, -4.2359], [-70.7995, -4.1733], [-70.9737, -4.3504], [-71.8448, -4.5044], [-72.6987, -5.0673], [-72.8871, -5.1228], [-72.9799, -5.635], [-73.2355, -6.0984], [-73.1374, -6.466], [-73.758, -6.9059], [-73.7496, -7.3356], [-74.0021, -7.5562], [-73.5491, -8.3459], [-72.9741, -8.993], [-73.2093, -9.4116], [-72.379, -9.5102], [-72.1815, -10.0038], [-71.238, -9.9661], [-70.637, -9.4782], [-70.6423, -11.0101], [-70.2202, -11.0478], [-69.5785, -10.9519], [-68.6852, -12.502], [-68.9786, -12.8802], [-69.0741, -13.6828], [-68.8803, -14.199], [-69.235, -14.5972], [-69.3748, -14.963], [-69.1726, -15.2368], [-69.4185, -15.6035], [-69.2176, -16.149], [-68.9134, -16.2618], [-69.0208, -16.6422], [-69.6249, -17.2002], [-69.5108, -17.506], [-69.8522, -17.704], [-69.9263, -18.206], [-70.4184, -18.3454], [-71.337, -17.6827], [-71.5323, -17.2943], [-72.1114, -17.0026], [-72.4676, -16.7079], [-73.825, -16.153], [-74.1471, -15.9124], [-75.1043, -15.4117], [-75.5336, -14.899], [-75.934, -14.6336], [-76.2891, -14.1333], [-76.1839, -13.5154], [-76.8322, -12.3489], [-77.1527, -12.0603], [-77.2204, -11.6635], [-77.6332, -11.288], [-77.7362, -10.8365], [-78.1856, -10.089], [-78.7622, -8.6171], [-79.3772, -7.8354], [-79.7621, -7.0666], [-80.1103, -6.6497], [-80.8117, -6.2822], [-81.1805, -5.9426], [-80.8827, -5.7589], [-81.1084, -5.0278], [-81.3366, -4.6695], [-81.2833, -4.3224], [-80.7986, -3.7312], [-80.3247, -3.388], [-80.1793, -3.8776], [-80.51, -4.0694], [-80.4885, -4.3939], [-80.1396, -4.2962], [-79.6385, -4.4547], [-79.3308, -4.9279], [-79.0763, -4.9905], [-78.4198, -3.7769], [-78.3472, -3.4311], [-77.8607, -2.9819], [-76.679, -2.5628], [-76.0898, -2.1331], [-75.5706, -1.5312], [-75.2632, -0.5555], [-75.2845, -0.1063], [-74.8018, -0.2], [-74.4178, -0.5809], [-74.2465, -0.9706], [-73.6643, -1.2489], [-73.4963, -1.6932], [-73.1969, -1.8304], [-73.1545, -2.2783], [-72.3957, -2.4288], [-71.7525, -2.1527], [-71.3969, -2.3342], [-70.9146, -2.2184], [-70.0741, -2.7502], [-70.7351, -3.7818], [-70.3396, -3.8142], [-69.9658, -4.2359]]]\n    },\n    \"properties\": {\n      \"name\": \"Peru\",\n      \"id\": \"PE\"\n    },\n    \"id\": \"PE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-128.2901, -24.3974], [-128.3205, -24.3997], [-128.3503, -24.3402], [-128.3037, -24.3335], [-128.2901, -24.3974]]]\n    },\n    \"properties\": {\n      \"name\": \"Pitcairn Islands\",\n      \"id\": \"PN\"\n    },\n    \"id\": \"PN\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-77.3742, 8.6583], [-77.2124, 8.0338], [-77.3509, 7.7057], [-77.7439, 7.537], [-77.9011, 7.2294], [-78.1701, 7.5437], [-78.4215, 8.0608], [-78.1139, 8.3796], [-79.0865, 8.997], [-79.4416, 9.0059], [-79.7505, 8.5953], [-80.3687, 8.289], [-80.4581, 8.0768], [-80.0752, 7.6671], [-80.4388, 7.2752], [-80.8456, 7.2201], [-81.0352, 7.7111], [-81.5041, 7.7213], [-81.7276, 8.1376], [-82.6796, 8.3218], [-82.8793, 8.0706], [-82.9976, 8.3676], [-82.917, 8.7404], [-82.9399, 9.4493], [-82.5635, 9.5767], [-82.2441, 9.0316], [-81.3548, 8.7804], [-80.8387, 8.8874], [-80.1272, 9.2101], [-79.5774, 9.598], [-78.5043, 9.4063], [-78.0828, 9.2363], [-77.3742, 8.6583]]]\n    },\n    \"properties\": {\n      \"name\": \"Panama\",\n      \"id\": \"PA\"\n    },\n    \"id\": \"PA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[77.7992, 35.496], [77.0486, 35.1099], [76.5945, 34.7357], [75.7093, 34.5031], [74.3004, 34.7654], [73.9613, 34.6535], [74.1499, 33.507], [73.9941, 33.2424], [74.6578, 32.5189], [75.3334, 32.2792], [74.5099, 31.7127], [74.6329, 31.0345], [73.8991, 30.4352], [73.809, 30.0934], [73.3816, 29.9345], [72.903, 29.029], [72.342, 28.752], [71.8701, 27.9623], [70.7373, 27.7293], [70.4035, 28.0249], [70.1447, 27.8491], [69.5681, 27.1744], [69.47, 26.8046], [70.1567, 26.4713], [70.0777, 26.0718], [70.2646, 25.7064], [70.6521, 25.4228], [71.048, 24.6877], [71.044, 24.4001], [70.5469, 24.4183], [69.7163, 24.1728], [69.5592, 24.2731], [68.7282, 24.2656], [68.7242, 23.9646], [68.1649, 23.8572], [67.6687, 23.811], [67.3096, 24.175], [67.1715, 24.7561], [66.7032, 24.8608], [66.6988, 25.2261], [66.4284, 25.5755], [65.6796, 25.3553], [64.7767, 25.3074], [64.6591, 25.184], [63.7207, 25.3859], [63.4912, 25.2106], [62.5723, 25.2546], [62.3153, 25.1347], [61.5878, 25.2022], [61.6686, 25.769], [61.8697, 26.2422], [62.4392, 26.5609], [63.1681, 26.6657], [63.1667, 27.2525], [62.7632, 27.2503], [62.7397, 28.0023], [62.3531, 28.4146], [61.8901, 28.5465], [61.6229, 28.7915], [61.3184, 29.3725], [60.8434, 29.8586], [62.4765, 29.4085], [63.5676, 29.4982], [64.0989, 29.3921], [64.521, 29.5643], [65.0954, 29.5594], [66.1772, 29.8355], [66.3974, 30.9124], [66.9243, 31.3057], [67.2874, 31.2178], [67.5781, 31.5063], [68.2138, 31.8073], [68.869, 31.6342], [69.2791, 31.9369], [69.2414, 32.4336], [69.5015, 33.02], [69.9201, 33.1123], [70.2841, 33.3689], [69.8682, 33.8976], [71.0516, 34.0498], [70.9655, 34.5306], [71.6206, 35.1831], [71.4276, 35.8338], [71.1852, 36.042], [71.6206, 36.4366], [72.623, 36.8295], [73.7691, 36.8885], [74.0017, 36.8233], [74.5415, 37.0221], [75.3467, 36.9134], [75.8403, 36.6497], [75.945, 36.0176], [76.2518, 35.8108], [77.4467, 35.4756], [77.7992, 35.496]]]\n    },\n    \"properties\": {\n      \"name\": \"Pakistan\",\n      \"id\": \"PK\"\n    },\n    \"id\": \"PK\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[56.388, 24.9793], [56.6406, 24.4702], [57.2199, 23.9229], [58.5782, 23.6437], [59.7998, 22.2201], [59.3714, 21.4988], [58.8956, 21.1126], [58.4743, 20.4068], [57.8618, 20.2439], [57.7153, 19.6069], [57.8116, 19.017], [57.1764, 18.9025], [56.6553, 18.5873], [56.551, 18.166], [56.2704, 17.9508], [55.479, 17.8433], [55.0644, 17.039], [54.0683, 17.0057], [53.6097, 16.7598], [53.0855, 16.6484], [52.729, 17.3005], [51.9775, 18.9961], [53.667, 19.559], [54.9774, 19.9958], [55.641, 22.0017], [55.186, 22.704], [55.1997, 23.0346], [55.7608, 24.2425], [55.7959, 24.8679], [56.064, 24.7388], [56.388, 24.9793]]]\n    },\n    \"properties\": {\n      \"name\": \"Oman\",\n      \"id\": \"OM\"\n    },\n    \"id\": \"OM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[173.1152, -41.2791], [173.738, -40.9888], [174.3026, -41.0194], [174.0922, -41.505], [174.2831, -41.7407], [173.5449, -42.518], [173.2213, -42.9765], [172.7184, -43.2589], [172.9208, -43.8914], [172.3855, -43.8297], [171.4426, -44.136], [171.1133, -45.0393], [170.7005, -45.6843], [169.6866, -46.5516], [168.382, -46.6054], [168.1889, -46.3621], [167.682, -46.193], [166.7316, -46.1979], [166.7338, -45.5436], [167.1946, -44.9634], [167.7872, -44.595], [168.3665, -44.0818], [168.8064, -43.9922], [169.6613, -43.5913], [170.3027, -43.1075], [170.7417, -42.9273], [171.2571, -42.4652], [171.4861, -41.7949], [172.0108, -41.4447], [172.1396, -40.9471], [172.6407, -40.5183], [172.9887, -40.8481], [173.1152, -41.2791]]], [[[173.2693, -34.935], [173.8441, -35.0264], [174.3204, -35.2466], [174.5437, -35.5822], [174.391, -35.7739], [174.802, -36.3093], [174.7226, -36.8411], [175.2996, -36.9933], [175.4608, -36.4757], [175.8762, -36.9578], [176.1084, -37.6449], [177.3358, -37.9907], [178.0091, -37.5548], [178.536, -37.692], [178.2679, -38.5509], [177.9763, -38.7223], [177.9656, -39.1426], [177.4077, -39.0809], [176.954, -39.3677], [177.1098, -39.6731], [176.8421, -40.1578], [175.9828, -41.2134], [175.3098, -41.6107], [174.6356, -41.2893], [175.1625, -40.6217], [175.2543, -40.2892], [175.0093, -39.9523], [173.9342, -39.5093], [173.8441, -39.1395], [174.5974, -38.7849], [174.9281, -37.8043], [174.7292, -37.4487], [174.782, -36.9436], [174.4758, -36.9418], [174.4469, -36.4509], [173.9453, -36.1761], [173.1166, -35.2053], [173.2693, -34.935]]]]\n    },\n    \"properties\": {\n      \"name\": \"New Zealand\",\n      \"id\": \"NZ\"\n    },\n    \"id\": \"NZ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[20.898, 80.2499], [22.4507, 80.4022], [26.8608, 80.16], [27.1986, 79.9065], [25.641, 79.403], [23.9475, 79.1943], [20.8611, 79.3978], [18.7251, 79.7607], [18.3438, 80.0595], [20.898, 80.2499]]], [[[16.7867, 79.9068], [18.5813, 79.5716], [19.0896, 79.157], [20.4581, 79.1293], [21.3889, 78.7404], [19.7687, 78.6228], [18.4393, 78.0251], [16.7005, 76.5794], [14.3657, 77.2345], [14.921, 77.6889], [13.6807, 78.028], [11.7738, 78.7165], [10.866, 79.7965], [12.7535, 79.7758], [13.3838, 79.4809], [15.8163, 79.6819], [16.7867, 79.9068]]], [[[21.6082, 78.5957], [23.1166, 77.9916], [24.2383, 77.8986], [23.8414, 77.4978], [22.057, 77.5011], [21.6082, 77.9161], [20.2282, 78.4779], [21.6082, 78.5957]]]]\n    },\n    \"properties\": {\n      \"name\": \"Svalbard and Jan Mayen\",\n      \"id\": \"SJ\"\n    },\n    \"id\": \"SJ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[166.9584, -0.5165], [166.9163, -0.5467], [166.9136, -0.4992], [166.9584, -0.5165]]]\n    },\n    \"properties\": {\n      \"name\": \"Nauru\",\n      \"id\": \"NR\"\n    },\n    \"id\": \"NR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[88.1099, 27.8704], [87.9843, 27.134], [88.1614, 26.7247], [88.0549, 26.43], [87.2874, 26.3603], [87.0166, 26.5556], [86.7014, 26.4349], [86.3663, 26.5743], [85.293, 26.7412], [84.6853, 27.0412], [84.6103, 27.2987], [84.0909, 27.4913], [83.2897, 27.371], [82.7335, 27.5189], [81.9877, 27.9139], [81.8528, 27.8669], [80.5868, 28.6494], [80.0706, 28.8301], [80.4017, 29.7303], [81.0103, 30.1645], [81.4169, 30.3376], [82.0432, 30.3269], [82.1591, 30.1152], [82.8542, 29.6833], [83.1556, 29.6127], [83.5835, 29.1834], [84.1016, 29.2198], [84.2285, 28.9118], [84.7141, 28.5957], [85.1589, 28.5922], [85.1225, 28.3161], [85.6783, 28.2775], [86.4089, 27.9286], [86.5545, 28.0853], [87.1413, 27.8385], [88.1099, 27.8704]]]\n    },\n    \"properties\": {\n      \"name\": \"Nepal\",\n      \"id\": \"NP\"\n    },\n    \"id\": \"NP\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[30.8696, 69.7834], [28.9657, 69.0219], [29.1415, 69.6715], [27.8897, 70.0617], [26.5257, 69.915], [26.0116, 69.6526], [25.7484, 68.9901], [24.9414, 68.5933], [23.8539, 68.8059], [22.4108, 68.7198], [21.622, 69.2707], [20.6223, 69.037], [19.9698, 68.3565], [18.3785, 68.5624], [17.9168, 67.965], [17.3247, 68.1039], [16.1275, 67.4259], [16.4036, 67.055], [15.423, 66.4899], [14.5432, 66.1292], [14.4798, 65.3014], [13.6501, 64.5816], [14.0776, 64.464], [13.9604, 64.0141], [12.6625, 63.9404], [11.9997, 63.2917], [12.2181, 63.0007], [12.3034, 62.2856], [12.1555, 61.7207], [12.8809, 61.3523], [12.294, 61.0027], [12.5888, 60.4508], [12.4862, 60.1067], [11.6806, 59.5923], [11.7982, 59.29], [11.3885, 59.0365], [10.8345, 59.1839], [9.6182, 58.946], [8.1663, 58.1452], [7.0051, 58.0242], [5.7067, 58.5236], [5.8452, 59.3535], [5.1314, 59.2265], [5.2441, 60.5695], [5.0493, 60.7076], [4.9276, 61.7107], [5.5336, 62.3109], [6.353, 62.6112], [7.2838, 62.6023], [7.0086, 62.9576], [8.1006, 63.091], [8.398, 63.5351], [9.6968, 63.6246], [9.7079, 63.865], [11.3499, 64.9059], [12.1595, 65.1789], [12.2727, 65.5682], [12.9763, 66.0192], [13.1046, 66.5394], [14.755, 67.4991], [14.7989, 67.8094], [16.0644, 68.2], [16.6517, 68.6257], [18.1015, 69.1564], [18.2932, 69.4751], [20.0688, 69.8835], [21.163, 69.8895], [21.4005, 70.1744], [22.6847, 70.3749], [23.0464, 70.1019], [24.4198, 70.702], [24.6582, 71.001], [25.7684, 70.8531], [27.5972, 71.0913], [29.1024, 70.8607], [30.9442, 70.2745], [29.6014, 69.9767], [29.7923, 69.7279], [30.8696, 69.7834]]]\n    },\n    \"properties\": {\n      \"name\": \"Norway\",\n      \"id\": \"NO\"\n    },\n    \"id\": \"NO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-169.8034, -19.0832], [-169.9039, -19.1378], [-169.9483, -19.0729], [-169.834, -18.966], [-169.8034, -19.0832]]]\n    },\n    \"properties\": {\n      \"name\": \"Niue\",\n      \"id\": \"NU\"\n    },\n    \"id\": \"NU\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-83.1576, 14.9931], [-83.2992, 14.749], [-83.1878, 14.3401], [-83.4124, 13.9966], [-83.5673, 13.3205], [-83.511, 12.4119], [-83.7693, 11.9316], [-83.6517, 11.6422], [-83.8679, 11.2999], [-83.6419, 10.9173], [-84.1684, 10.7806], [-84.3484, 10.9799], [-84.9092, 10.9453], [-85.6215, 11.1845], [-85.7444, 11.062], [-86.4688, 11.7385], [-86.7556, 12.1566], [-87.6676, 12.9037], [-87.3373, 12.9792], [-87.0592, 12.9916], [-86.7108, 13.3134], [-86.7336, 13.7635], [-86.3317, 13.7702], [-86.1512, 13.9948], [-85.7868, 13.8443], [-85.1796, 14.3432], [-84.9851, 14.7525], [-84.646, 14.6611], [-83.8674, 14.7947], [-83.1576, 14.9931]]]\n    },\n    \"properties\": {\n      \"name\": \"Nicaragua\",\n      \"id\": \"NI\"\n    },\n    \"id\": \"NI\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[13.6062, 13.7045], [14.0638, 13.0786], [14.1974, 12.3839], [14.6271, 12.1087], [14.5597, 11.4921], [13.892, 11.1401], [13.5352, 10.6052], [13.2697, 10.0362], [13.1756, 9.5394], [12.9297, 9.4263], [12.8067, 8.8865], [12.4037, 8.5957], [12.0162, 7.5899], [11.7676, 7.272], [11.5518, 6.6972], [11.1532, 6.438], [11.0325, 6.6981], [10.6064, 7.063], [10.1438, 6.9964], [9.0603, 6.0092], [8.801, 5.1973], [8.556, 4.7552], [8.2932, 4.5576], [7.1546, 4.5146], [6.7569, 4.3437], [6.0764, 4.2904], [5.5877, 4.6473], [5.2326, 5.4836], [4.8611, 6.0265], [4.4314, 6.3487], [4.126, 6.4113], [2.7064, 6.3692], [2.7748, 6.7119], [2.686, 7.874], [2.7748, 9.0485], [3.0451, 9.084], [3.3252, 9.7783], [3.5573, 9.9074], [3.5764, 10.2683], [3.8343, 10.6074], [3.7163, 11.0797], [3.4877, 11.3954], [3.5955, 11.6963], [3.6466, 12.5299], [3.948, 12.775], [4.1477, 13.4577], [4.8233, 13.76], [5.4918, 13.8727], [6.3863, 13.6037], [6.8044, 13.1074], [7.0565, 13], [7.7885, 13.3378], [8.0953, 13.2912], [8.7504, 12.9081], [9.616, 12.8105], [10.1847, 13.2699], [10.9588, 13.3716], [11.412, 13.3538], [12.4632, 13.0937], [12.6549, 13.3267], [13.3239, 13.6707], [13.6062, 13.7045]]]\n    },\n    \"properties\": {\n      \"name\": \"Nigeria\",\n      \"id\": \"NG\"\n    },\n    \"id\": \"NG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[167.9394, -29.0175], [167.979, -29.0756], [167.9204, -29.0827], [167.9394, -29.0175]]]\n    },\n    \"properties\": {\n      \"name\": \"Norfolk Island\",\n      \"id\": \"NF\"\n    },\n    \"id\": \"NF\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[14.9791, 22.996], [15.1722, 21.9223], [15.182, 21.5232], [15.6072, 20.9546], [15.5873, 20.7335], [15.949, 20.3034], [15.7351, 19.9039], [15.4745, 16.9085], [14.3679, 15.7499], [13.4481, 14.3805], [13.6062, 13.7045], [13.3239, 13.6707], [12.6549, 13.3267], [12.4632, 13.0937], [11.412, 13.3538], [10.9588, 13.3716], [10.1847, 13.2699], [9.616, 12.8105], [8.7504, 12.9081], [8.0953, 13.2912], [7.7885, 13.3378], [7.0565, 13], [6.8044, 13.1074], [6.3863, 13.6037], [5.4918, 13.8727], [4.8233, 13.76], [4.1477, 13.4577], [3.948, 12.775], [3.6466, 12.5299], [3.5955, 11.6963], [2.8782, 12.3679], [2.3659, 12.2219], [2.389, 11.897], [2.0912, 12.2778], [2.0739, 12.7142], [1.5652, 12.6356], [0.9872, 13.0418], [0.9779, 13.5518], [0.6183, 13.7036], [0.1638, 14.4973], [0.2175, 14.9114], [0.9601, 14.9869], [1.3002, 15.2723], [3.5041, 15.3562], [3.8769, 15.7553], [4.1823, 16.5818], [4.2347, 16.9964], [4.2276, 19.1426], [5.8367, 19.4791], [7.4818, 20.8729], [9.3785, 21.9915], [11.9678, 23.518], [13.4814, 23.1802], [14.2307, 22.6183], [14.9791, 22.996]]]\n    },\n    \"properties\": {\n      \"name\": \"Niger\",\n      \"id\": \"NE\"\n    },\n    \"id\": \"NE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[164.2023, -20.2462], [164.4358, -20.2821], [165.1918, -20.7691], [165.6627, -21.2671], [166.9425, -22.0901], [166.7742, -22.3759], [166.096, -21.9565], [165.2419, -21.5255], [164.4549, -20.829], [164.1699, -20.4801], [164.2023, -20.2462]]]\n    },\n    \"properties\": {\n      \"name\": \"New Caledonia\",\n      \"id\": \"NC\"\n    },\n    \"id\": \"NC\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[23.3807, -17.6405], [24.2751, -17.4812], [24.9325, -17.5433], [25.2588, -17.7936], [24.359, -17.9783], [23.5804, -18.4528], [23.2986, -18.0276], [20.9739, -18.3188], [20.9779, -20.9684], [20.9708, -22], [19.9774, -22], [19.9805, -24.777], [19.9805, -26.5312], [19.9805, -28.4515], [19.6715, -28.5039], [19.2458, -28.9016], [18.1028, -28.8719], [17.4481, -28.6983], [17.3855, -28.3534], [17.0561, -28.0311], [16.7556, -28.4524], [16.4475, -28.6175], [15.7191, -27.9659], [15.3413, -27.3866], [14.9676, -26.3182], [14.8451, -25.7256], [14.8371, -25.0331], [14.5015, -24.2021], [14.474, -23.281], [14.5259, -22.7027], [14.3217, -22.19], [13.9733, -21.7678], [13.4504, -20.9169], [13.1685, -20.1845], [12.4583, -18.9269], [12.0956, -18.5412], [11.776, -18.0018], [11.7432, -17.2494], [12.5479, -17.2126], [13.101, -16.9676], [13.4038, -17.008], [13.9382, -17.3888], [16.9136, -17.3915], [18.3962, -17.3995], [18.8259, -17.7661], [19.6396, -17.8687], [20.3928, -17.8873], [20.625, -17.9965], [21.4169, -18.0005], [23.3807, -17.6405]]]\n    },\n    \"properties\": {\n      \"name\": \"Namibia\",\n      \"id\": \"NA\"\n    },\n    \"id\": \"NA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[45.1802, -12.9765], [45.0692, -12.8957], [45.1349, -12.7093], [45.2233, -12.7519], [45.1802, -12.9765]]]\n    },\n    \"properties\": {\n      \"name\": \"Mayotte\",\n      \"id\": \"YT\"\n    },\n    \"id\": \"YT\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[102.1009, 6.2422], [102.9825, 5.5249], [103.4157, 4.8502], [103.4686, 4.3934], [103.362, 3.7693], [103.4397, 2.933], [103.8121, 2.5805], [104.2884, 1.4806], [103.6945, 1.4495], [102.7273, 1.8557], [101.2953, 2.8851], [101.2997, 3.2535], [100.7155, 3.9664], [100.6143, 4.6522], [100.3524, 5.5875], [100.3431, 5.9843], [100.119, 6.442], [100.3453, 6.5498], [101.0533, 6.2427], [101.2571, 5.7894], [101.5563, 5.908], [101.8737, 5.8254], [102.1009, 6.2422]]], [[[117.5746, 4.1706], [117.1005, 4.337], [115.8962, 4.3486], [115.5686, 3.9389], [115.4545, 3.0342], [115.0861, 2.8411], [115.1509, 2.4931], [114.7865, 2.2503], [114.8304, 1.98], [114.5459, 1.4673], [113.9022, 1.4344], [113.6222, 1.236], [112.476, 1.5592], [112.1857, 1.4393], [112.0783, 1.1432], [111.7698, 0.9994], [110.9379, 1.0172], [110.5056, 0.8618], [109.6542, 1.6151], [109.6289, 2.0275], [109.9845, 1.7176], [110.3493, 1.7198], [110.9402, 1.5174], [111.1541, 1.7389], [111.242, 2.4358], [111.7276, 2.854], [112.7375, 3.0706], [113.0446, 3.2051], [113.924, 4.2434], [114.0638, 4.5927], [114.6085, 4.0241], [114.8402, 4.3934], [114.7465, 4.7179], [115.0266, 4.8999], [115.1398, 4.8999], [115.5198, 5.049], [115.419, 5.413], [115.7968, 5.536], [116.1386, 6.1295], [116.4946, 6.5219], [117.294, 6.6768], [117.6456, 6.4735], [117.6172, 5.9408], [118.0038, 6.0531], [118.1157, 5.8627], [118.5946, 5.5919], [119.2236, 5.4126], [119.1322, 5.1005], [118.1854, 4.8284], [118.4979, 4.3623], [117.5746, 4.1706]]]]\n    },\n    \"properties\": {\n      \"name\": \"Malaysia\",\n      \"id\": \"MY\"\n    },\n    \"id\": \"MY\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[34.9596, -11.5783], [34.6595, -11.5885], [34.3608, -12.2104], [34.5636, -13.3601], [35.2477, -13.8967], [35.8474, -14.6709], [35.7555, -16.0585], [35.3587, -16.1606], [35.1673, -16.5601], [35.2903, -17.0967], [34.3954, -16.1992], [34.248, -15.8876], [34.541, -15.2972], [34.5055, -14.5981], [34.3324, -14.4085], [33.6364, -14.5683], [33.2018, -14.0135], [32.9812, -14.0095], [32.6722, -13.6104], [32.9679, -13.2251], [33.0216, -12.6303], [33.398, -12.49], [33.2524, -12.1127], [33.2262, -11.5348], [33.3798, -11.1579], [33.2613, -10.8934], [33.659, -10.5906], [33.3509, -9.8622], [32.9199, -9.4072], [34.3208, -9.7317], [34.5241, -10.03], [34.6617, -10.71], [34.608, -11.0807], [34.9596, -11.5783]]]\n    },\n    \"properties\": {\n      \"name\": \"Malawi\",\n      \"id\": \"MW\"\n    },\n    \"id\": \"MW\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[57.6514, -20.485], [57.3859, -20.2284], [57.5759, -19.9971], [57.7921, -20.2124], [57.6514, -20.485]]]\n    },\n    \"properties\": {\n      \"name\": \"Mauritius\",\n      \"id\": \"MU\"\n    },\n    \"id\": \"MU\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-60.8263, 14.4946], [-61.0638, 14.4671], [-61.2198, 14.8044], [-60.9186, 14.7352], [-60.8263, 14.4946]]]\n    },\n    \"properties\": {\n      \"name\": \"Martinique\",\n      \"id\": \"MQ\"\n    },\n    \"id\": \"MQ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-62.1484, 16.7403], [-62.1542, 16.6812], [-62.2217, 16.6994], [-62.223, 16.7518], [-62.1484, 16.7403]]]\n    },\n    \"properties\": {\n      \"name\": \"Montserrat\",\n      \"id\": \"MS\"\n    },\n    \"id\": \"MS\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-12.2807, 14.8089], [-12.8584, 15.2426], [-13.2579, 15.7002], [-13.4095, 16.0593], [-13.8685, 16.1481], [-14.3, 16.5805], [-15.1128, 16.6448], [-15.6208, 16.5068], [-16.1683, 16.5472], [-16.4411, 16.2045], [-16.5352, 15.8383], [-16.5356, 16.2866], [-16.0789, 17.5459], [-16.0849, 18.5212], [-16.2132, 19.0032], [-16.5146, 19.3619], [-16.2835, 19.7871], [-16.2105, 20.2279], [-16.4298, 20.6523], [-17.0481, 20.8063], [-16.9647, 21.3292], [-15.0018, 21.3314], [-13.0163, 21.3341], [-13.0944, 22.4958], [-13.0316, 23], [-12.6203, 23.2712], [-12.0235, 23.4674], [-12.0164, 25.9954], [-10.5624, 25.9954], [-8.6821, 25.9954], [-8.6834, 27.2858], [-6.2387, 25.848], [-4.8227, 24.9958], [-6.594, 24.9944], [-6.3113, 22.5291], [-6.1404, 21.0367], [-5.8556, 18.5505], [-5.6286, 16.5685], [-5.36, 16.2831], [-5.5125, 15.4965], [-7.3555, 15.496], [-9.1768, 15.496], [-9.9414, 15.374], [-10.6965, 15.4228], [-10.8956, 15.1502], [-11.5026, 15.6367], [-11.7603, 15.4255], [-11.8728, 14.9953], [-12.2807, 14.8089]]]\n    },\n    \"properties\": {\n      \"name\": \"Mauritania\",\n      \"id\": \"MR\"\n    },\n    \"id\": \"MR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[32.8862, -26.8495], [32.1129, -26.8393], [31.9482, -25.9577], [31.986, -24.4605], [31.7995, -23.8923], [31.5456, -23.4821], [31.2877, -22.4021], [32.3713, -21.335], [32.4778, -20.7131], [33.0069, -19.8737], [32.7166, -19.0019], [32.9932, -18.3596], [32.9479, -16.7123], [32.2434, -16.4487], [31.9398, -16.4287], [31.2362, -16.0239], [30.4377, -15.9954], [30.3959, -15.643], [30.2317, -14.9905], [31.729, -14.496], [33.2018, -14.0135], [33.6364, -14.5683], [34.3324, -14.4085], [34.5055, -14.5981], [34.541, -15.2972], [34.248, -15.8876], [34.3954, -16.1992], [35.2903, -17.0967], [35.1673, -16.5601], [35.3587, -16.1606], [35.7555, -16.0585], [35.8474, -14.6709], [35.2477, -13.8967], [34.5636, -13.3601], [34.3608, -12.2104], [34.6595, -11.5885], [34.9596, -11.5783], [35.6312, -11.5818], [35.7852, -11.4531], [36.5185, -11.7163], [36.9789, -11.5667], [37.5417, -11.675], [37.9204, -11.2946], [38.4917, -11.4131], [38.7948, -11.2289], [39.3217, -11.1224], [39.9889, -10.821], [40.4634, -10.4641], [40.5447, -11.0656], [40.403, -11.3319], [40.5806, -12.6356], [40.5451, -13.463], [40.6401, -14.3899], [40.835, -14.7916], [40.5589, -15.4734], [40.1087, -15.9795], [39.8446, -16.4358], [39.0842, -16.9729], [38.145, -17.2428], [37.2443, -17.7399], [36.5403, -18.5181], [35.6512, -19.1639], [34.9481, -19.8129], [34.7559, -19.8218], [34.6981, -20.4042], [34.9822, -20.8063], [35.2677, -21.6511], [35.3156, -22.3968], [35.5753, -22.9632], [35.3702, -23.7982], [35.4381, -24.171], [35.1558, -24.5413], [34.6072, -24.8214], [33.3474, -25.2608], [32.7921, -25.6443], [32.5905, -26.0039], [32.9337, -26.2525], [32.8862, -26.8495]]]\n    },\n    \"properties\": {\n      \"name\": \"Mozambique\",\n      \"id\": \"MZ\"\n    },\n    \"id\": \"MZ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[145.7519, 15.1334], [145.6845, 15.1249], [145.7133, 15.2155], [145.7821, 15.1747], [145.7519, 15.1334]]]\n    },\n    \"properties\": {\n      \"name\": \"Northern Mariana Islands\",\n      \"id\": \"MP\"\n    },\n    \"id\": \"MP\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[116.6832, 49.8238], [115.5575, 47.945], [115.8984, 47.6871], [116.7605, 47.87], [117.3508, 47.652], [117.7685, 47.988], [118.4983, 47.9841], [119.711, 47.15], [119.8979, 46.8579], [119.7066, 46.6062], [118.3088, 46.7172], [117.3335, 46.3621], [116.5625, 46.2897], [116.2407, 45.7961], [115.6809, 45.4583], [114.517, 45.3646], [114.0305, 44.9425], [113.5871, 44.7459], [111.8981, 45.0641], [111.4022, 44.3672], [111.9331, 43.7116], [111.0072, 43.3414], [110.4004, 42.7736], [109.4434, 42.4558], [108.1712, 42.4474], [106.7702, 42.2889], [105.1971, 41.738], [104.4984, 41.6586], [104.4984, 41.877], [103.7109, 41.7514], [103.0726, 42.0062], [101.9731, 42.2157], [101.7139, 42.4656], [99.984, 42.6773], [99.4678, 42.5681], [97.2057, 42.7896], [96.3854, 42.7204], [95.9126, 43.2064], [95.3502, 44.278], [94.7119, 44.3508], [93.6563, 44.9008], [92.7876, 45.0357], [91.5842, 45.0766], [90.8771, 45.196], [90.6618, 45.5253], [91.0019, 46.0358], [91.0338, 46.529], [90.87, 46.9547], [90.4963, 47.2854], [90.3134, 47.676], [89.561, 48.004], [89.0478, 48.0027], [88.517, 48.3844], [87.9798, 48.5549], [87.8143, 49.1624], [88.1925, 49.4518], [88.8317, 49.4485], [89.6542, 49.7175], [89.644, 49.903], [91.8044, 50.6936], [94.2511, 50.5564], [94.6147, 50.0237], [95.5229, 49.9112], [95.8518, 50.0129], [96.986, 49.8828], [97.2088, 49.7308], [98.1032, 50.0779], [98.2795, 50.5333], [97.8254, 50.9852], [97.947, 51.3483], [98.8485, 52.0701], [100.4687, 51.7261], [101.3814, 51.4526], [102.1116, 51.3534], [102.2883, 50.585], [102.6833, 50.3871], [103.6328, 50.1387], [105.3835, 50.4736], [106.218, 50.3045], [106.7112, 50.3125], [107.2332, 49.9893], [107.9479, 49.9247], [108.034, 49.594], [108.6137, 49.3228], [109.2365, 49.3348], [110.1997, 49.1704], [110.8279, 49.1661], [111.3366, 49.3559], [113.0557, 49.6162], [113.1641, 49.7971], [114.2969, 50.2743], [114.743, 50.2337], [115.2743, 49.9489], [116.1346, 50.0109], [116.6832, 49.8238]]]\n    },\n    \"properties\": {\n      \"name\": \"Mongolia\",\n      \"id\": \"MN\"\n    },\n    \"id\": \"MN\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[19.1943, 43.5331], [19.5517, 43.2122], [20.3445, 42.8278], [20.0639, 42.5473], [19.6546, 42.6285], [19.2809, 42.1726], [19.3426, 41.869], [18.5174, 42.4327], [18.4362, 42.5597], [18.4437, 42.9685], [18.9404, 43.4967], [19.1943, 43.5331]]]\n    },\n    \"properties\": {\n      \"name\": \"Montenegro\",\n      \"id\": \"ME\"\n    },\n    \"id\": \"ME\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[101.139, 21.5676], [100.7564, 21.3128], [100.2495, 20.7304], [100.1225, 20.3167], [99.8904, 20.4246], [99.3382, 20.0788], [99.0208, 20.0419], [98.9169, 19.7729], [98.1112, 19.7623], [97.8169, 19.46], [97.7539, 18.621], [97.4849, 18.4941], [97.793, 17.6813], [98.4388, 16.9755], [98.6892, 16.3052], [98.5653, 15.4037], [98.1911, 15.204], [98.2462, 14.8147], [99.1366, 13.7165], [99.2196, 12.7399], [99.4052, 12.5477], [99.6147, 11.7811], [99.1903, 11.1051], [98.7571, 10.6612], [98.7025, 10.1902], [98.465, 10.6758], [98.6754, 10.987], [98.7416, 11.5916], [98.576, 13.162], [98.2453, 13.7333], [97.8121, 14.859], [97.7104, 15.8756], [97.5843, 16.0194], [97.6194, 16.5374], [97.3757, 16.5228], [97.1782, 17.0621], [96.6224, 16.564], [95.7635, 16.169], [95.3897, 15.7229], [94.9427, 15.8183], [94.5876, 16.2888], [94.2143, 16.1268], [94.589, 17.5695], [94.4309, 18.2016], [94.07, 18.8936], [93.7056, 19.0267], [93.9981, 19.4409], [93.3625, 20.0584], [93.002, 20.0748], [92.7357, 20.5626], [92.3242, 20.7917], [92.1795, 21.2933], [92.5937, 21.4673], [92.575, 21.9782], [92.9643, 22.0039], [93.1618, 22.3604], [93.0788, 22.7182], [93.366, 23.1323], [93.4149, 23.6823], [93.3074, 24.0219], [94.1277, 23.8763], [94.2929, 24.3219], [94.7075, 25.0486], [94.6227, 25.4099], [95.1323, 26.0411], [95.1287, 26.5973], [96.0613, 27.217], [96.6659, 27.3391], [97.3353, 27.9379], [97.3224, 28.218], [97.5377, 28.5101], [98.0988, 28.1421], [98.299, 27.5499], [98.651, 27.5726], [98.7318, 26.5836], [98.6546, 25.9177], [98.0109, 25.2923], [97.8196, 25.2519], [97.5315, 24.4915], [97.686, 23.898], [98.2124, 24.1106], [98.7642, 24.116], [98.8636, 23.1913], [99.3408, 23.0959], [99.3377, 22.498], [99.193, 22.126], [99.9179, 22.0279], [100.2148, 21.4628], [101.139, 21.5676]]]\n    },\n    \"properties\": {\n      \"name\": \"Myanmar\",\n      \"id\": \"MM\"\n    },\n    \"id\": \"MM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[14.5663, 35.8529], [14.4363, 35.8219], [14.3524, 35.8725], [14.4482, 35.9572], [14.5663, 35.8529]]]\n    },\n    \"properties\": {\n      \"name\": \"Malta\",\n      \"id\": \"MT\"\n    },\n    \"id\": \"MT\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[4.2276, 19.1426], [4.2347, 16.9964], [4.1823, 16.5818], [3.8769, 15.7553], [3.5041, 15.3562], [1.3002, 15.2723], [0.9601, 14.9869], [0.2175, 14.9114], [-0.2359, 15.0592], [-0.7604, 15.0477], [-1.0496, 14.8195], [-1.7678, 14.4862], [-2.1132, 14.1684], [-2.4572, 14.274], [-3.1985, 13.673], [-3.3017, 13.2806], [-3.5758, 13.194], [-4.0512, 13.3822], [-4.3286, 13.119], [-4.2272, 12.7936], [-4.4807, 12.6724], [-4.4287, 12.3377], [-4.798, 12.0319], [-5.2881, 11.8277], [-5.2999, 11.2058], [-5.4905, 11.0425], [-5.5236, 10.4259], [-6.0345, 10.1946], [-6.2611, 10.7242], [-6.6932, 10.3495], [-7.1049, 10.2035], [-7.6611, 10.4272], [-7.9907, 10.1627], [-8.2315, 10.4379], [-8.4075, 11.3865], [-8.8219, 11.6732], [-9.043, 12.4025], [-9.8207, 12.0426], [-10.2748, 12.2126], [-10.6774, 11.8996], [-10.9333, 12.205], [-11.3053, 12.0155], [-11.3894, 12.4043], [-11.3903, 12.9419], [-11.6349, 13.3698], [-12.0543, 13.633], [-12.0193, 14.2065], [-12.2807, 14.8089], [-11.8728, 14.9953], [-11.7603, 15.4255], [-11.5026, 15.6367], [-10.8956, 15.1502], [-10.6965, 15.4228], [-9.9414, 15.374], [-9.1768, 15.496], [-7.3555, 15.496], [-5.5125, 15.4965], [-5.36, 16.2831], [-5.6286, 16.5685], [-5.8556, 18.5505], [-6.1404, 21.0367], [-6.3113, 22.5291], [-6.594, 24.9944], [-4.8227, 24.9958], [-3.2579, 23.981], [-1.2931, 22.6964], [1.1457, 21.1024], [1.1657, 20.8174], [1.6855, 20.3784], [2.2195, 20.2479], [2.4063, 20.0637], [3.2036, 19.7898], [3.2559, 19.4107], [3.1059, 19.1502], [3.4007, 18.9886], [4.2276, 19.1426]]]\n    },\n    \"properties\": {\n      \"name\": \"Mali\",\n      \"id\": \"ML\"\n    },\n    \"id\": \"ML\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[22.3442, 42.3138], [22.8369, 41.9937], [23.0056, 41.7172], [22.9159, 41.3363], [22.7246, 41.1783], [21.9296, 41.1073], [21.5758, 40.8689], [20.9641, 40.8498], [20.4892, 41.2724], [20.566, 41.8739], [21.0596, 42.1713], [21.5625, 42.2476], [22.3442, 42.3138]]]\n    },\n    \"properties\": {\n      \"name\": \"North Macedonia\",\n      \"id\": \"MK\"\n    },\n    \"id\": \"MK\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[171.1017, 7.1384], [171.2269, 7.0869], [171.2025, 7.0736], [171.0955, 7.1091], [171.1017, 7.1384]]]\n    },\n    \"properties\": {\n      \"name\": \"Marshall Islands\",\n      \"id\": \"MH\"\n    },\n    \"id\": \"MH\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-97.1462, 25.9617], [-97.5071, 25.0144], [-97.6676, 24.3899], [-97.8578, 22.6245], [-97.6376, 21.6035], [-97.1214, 20.615], [-96.456, 19.8697], [-96.2895, 19.3437], [-95.821, 18.7546], [-95.1818, 18.7005], [-94.798, 18.5145], [-94.5461, 18.1749], [-94.189, 18.1953], [-93.5523, 18.4306], [-92.8849, 18.4688], [-92.7102, 18.6117], [-91.9738, 18.716], [-91.8031, 18.4706], [-91.2753, 18.6246], [-91.343, 18.9007], [-90.7393, 19.3521], [-90.5072, 19.9119], [-90.4841, 20.5564], [-90.3531, 21.0096], [-89.8198, 21.2746], [-88.8787, 21.414], [-88.1317, 21.616], [-86.8242, 21.4215], [-86.8648, 20.8849], [-87.4672, 20.1023], [-87.4248, 19.5834], [-87.7619, 18.4461], [-88.1967, 18.7196], [-88.2957, 18.4723], [-88.523, 18.4457], [-88.8064, 17.9654], [-89.1615, 17.8149], [-90.9892, 17.8163], [-90.993, 17.2525], [-91.4096, 17.2561], [-90.7107, 16.7083], [-90.417, 16.3909], [-90.4472, 16.0726], [-91.7365, 16.07], [-92.1871, 15.3207], [-92.0748, 15.0743], [-92.2352, 14.5452], [-92.809, 15.1387], [-93.916, 16.0536], [-94.3741, 16.2848], [-94.6615, 16.2018], [-94.9004, 16.4176], [-95.4643, 15.9745], [-96.5108, 15.6518], [-97.1846, 15.9093], [-97.7548, 15.967], [-98.5203, 16.3048], [-98.7622, 16.5347], [-99.6906, 16.7198], [-100.0244, 16.9205], [-100.8478, 17.2006], [-101.6002, 17.6516], [-101.847, 17.9223], [-102.6995, 18.0626], [-103.4415, 18.3254], [-103.9125, 18.8283], [-104.9385, 19.3095], [-105.4821, 19.9762], [-105.6694, 20.3855], [-105.237, 21.1193], [-105.2086, 21.4908], [-105.6492, 21.988], [-105.7917, 22.6276], [-106.4023, 23.1958], [-106.9354, 23.8812], [-107.9512, 24.6149], [-108.3736, 25.1942], [-109.385, 25.7273], [-109.4256, 26.0327], [-109.1997, 26.3052], [-109.4829, 26.7105], [-109.7548, 26.703], [-109.9441, 27.0794], [-110.4779, 27.3227], [-110.5298, 27.8642], [-111.1215, 27.9672], [-111.6801, 28.4706], [-112.1618, 29.0188], [-112.2235, 29.2696], [-112.7384, 29.9856], [-113.1104, 30.7934], [-113.0467, 31.1792], [-114.1493, 31.5072], [-114.8395, 31.7984], [-114.8819, 31.1565], [-114.6334, 30.5067], [-114.6498, 30.2381], [-114.3726, 29.8302], [-113.7556, 29.3677], [-113.4997, 28.9269], [-112.8709, 28.4244], [-112.7339, 27.826], [-112.3291, 27.5233], [-112.0091, 26.9671], [-111.5696, 26.7074], [-111.2917, 25.7899], [-111.0345, 25.5271], [-110.6774, 24.7885], [-110.5471, 24.2141], [-110.0229, 24.1746], [-109.421, 23.4803], [-109.458, 23.2149], [-109.9234, 22.8859], [-110.3627, 23.6051], [-111.4194, 24.329], [-112.0725, 24.84], [-112.0557, 25.488], [-112.3773, 26.2138], [-113.0207, 26.5831], [-113.2058, 26.857], [-113.5986, 26.7212], [-113.841, 26.9667], [-114.4454, 27.2183], [-114.9936, 27.7359], [-114.3007, 27.8731], [-114.0485, 28.4262], [-114.1455, 28.6055], [-114.9936, 29.3845], [-115.6738, 29.7565], [-116.0622, 30.8041], [-116.6622, 31.5649], [-117.1282, 32.5335], [-114.7248, 32.7155], [-114.836, 32.5082], [-112.939, 31.916], [-111.042, 31.3243], [-108.2145, 31.3292], [-108.2118, 31.7793], [-106.4533, 31.77], [-106.2558, 31.5445], [-104.9179, 30.5835], [-104.504, 29.6775], [-104.1107, 29.3863], [-103.2577, 29.001], [-102.892, 29.2163], [-102.7342, 29.6438], [-102.269, 29.871], [-101.4404, 29.7769], [-100.6587, 29.0685], [-100.2961, 28.3276], [-99.5053, 27.5482], [-99.4436, 27.0368], [-99.1078, 26.4469], [-98.0828, 26.0642], [-97.3582, 25.8707], [-97.1462, 25.9617]]]\n    },\n    \"properties\": {\n      \"name\": \"Mexico\",\n      \"id\": \"MX\"\n    },\n    \"id\": \"MX\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[73.5121, 4.1644], [73.473, 4.1706], [73.5041, 4.2345], [73.5285, 4.2434], [73.5121, 4.1644]]]\n    },\n    \"properties\": {\n      \"name\": \"Maldives\",\n      \"id\": \"MV\"\n    },\n    \"id\": \"MV\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[49.5383, -12.4323], [49.9374, -13.0724], [50.174, -14.0401], [50.2353, -14.7321], [50.4829, -15.3855], [50.2091, -15.9604], [49.8926, -15.4579], [49.6498, -15.5671], [49.8389, -16.4864], [49.4491, -17.2406], [49.478, -17.8984], [48.6071, -20.4574], [48.3509, -21.3488], [47.9084, -22.4661], [47.5581, -23.8745], [47.1773, -24.7872], [46.7285, -25.1498], [46.1586, -25.2306], [45.5078, -25.5631], [45.1154, -25.5431], [44.8131, -25.334], [44.3457, -25.2262], [44.0354, -24.9958], [43.6874, -24.3579], [43.7225, -23.5296], [43.398, -22.8864], [43.2666, -22.0492], [43.5019, -21.3563], [43.8556, -21.0767], [44.4047, -19.9221], [44.4487, -19.4285], [44.2387, -19.0752], [44.2329, -18.7405], [44.0399, -18.2886], [43.9795, -17.3915], [44.4216, -16.7026], [44.4762, -16.2174], [44.9094, -16.1743], [45.1669, -15.983], [45.5984, -15.9928], [45.7, -15.8139], [46.3317, -15.7136], [46.475, -15.5134], [47.8116, -14.5448], [47.9954, -13.9606], [48.7966, -13.2673], [48.8996, -12.4585], [49.2072, -12.0794], [49.5383, -12.4323]]]\n    },\n    \"properties\": {\n      \"name\": \"Madagascar\",\n      \"id\": \"MG\"\n    },\n    \"id\": \"MG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[28.2124, 45.4503], [28.0997, 45.9728], [28.2444, 46.4513], [28.0717, 46.9786], [27.3366, 47.6396], [26.9806, 48.155], [26.6189, 48.2597], [27.5493, 48.4777], [29.1948, 47.8824], [29.1597, 47.4558], [29.5494, 47.2467], [29.8779, 46.829], [29.838, 46.3505], [29.1464, 46.5268], [28.9475, 46.05], [28.2124, 45.4503]]]\n    },\n    \"properties\": {\n      \"name\": \"Moldova\",\n      \"id\": \"MD\"\n    },\n    \"id\": \"MD\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[7.4387, 43.7507], [7.3779, 43.7316], [7.4143, 43.7711], [7.4387, 43.7507]]]\n    },\n    \"properties\": {\n      \"name\": \"Monaco\",\n      \"id\": \"MC\"\n    },\n    \"id\": \"MC\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-2.2197, 35.1041], [-1.7955, 34.7521], [-1.6792, 33.3187], [-1.5099, 32.8775], [-1.0656, 32.4683], [-1.2753, 32.0892], [-2.4485, 32.13], [-2.9308, 32.0426], [-3.0174, 31.8344], [-3.8268, 31.6617], [-3.8335, 31.1978], [-4.3228, 30.6989], [-4.9683, 30.4654], [-5.4488, 29.9567], [-6.5008, 29.8093], [-6.6353, 29.5687], [-7.095, 29.6251], [-7.6851, 29.3495], [-8.6599, 28.7187], [-8.6834, 27.6565], [-13.1774, 27.652], [-12.949, 27.9144], [-11.986, 28.1292], [-11.4302, 28.3822], [-11.0809, 28.7138], [-10.4865, 29.0649], [-9.6671, 30.1094], [-9.6529, 30.4477], [-9.8755, 30.718], [-9.8087, 31.4247], [-9.3475, 32.0865], [-9.2458, 32.5726], [-8.5962, 33.1874], [-6.901, 33.969], [-6.3532, 34.776], [-5.9249, 35.7859], [-5.3973, 35.9297], [-5.1054, 35.4676], [-4.3299, 35.1613], [-3.6932, 35.2799], [-2.84, 35.1281], [-2.2197, 35.1041]]]\n    },\n    \"properties\": {\n      \"name\": \"Morocco\",\n      \"id\": \"MA\"\n    },\n    \"id\": \"MA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-63.0111, 18.0688], [-63.123, 18.0688], [-63.0631, 18.1154], [-63.0111, 18.0688]]]\n    },\n    \"properties\": {\n      \"name\": \"Saint Martin\",\n      \"id\": \"MF\"\n    },\n    \"id\": \"MF\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[113.4788, 22.1957], [113.4943, 22.2414], [113.5467, 22.2241], [113.4788, 22.1957]]]\n    },\n    \"properties\": {\n      \"name\": \"Macau\",\n      \"id\": \"MO\"\n    },\n    \"id\": \"MO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[27.3517, 57.5282], [27.797, 57.3169], [27.8063, 56.867], [28.1481, 56.143], [27.5768, 55.7988], [26.5936, 55.6676], [24.9032, 56.3982], [24.1206, 56.2642], [22.0845, 56.4067], [21.0462, 56.07], [21.0711, 56.8237], [21.7285, 57.571], [22.5546, 57.7242], [23.6479, 56.9711], [24.4034, 57.3251], [24.3226, 57.8706], [25.111, 58.0635], [25.9912, 57.8382], [26.5328, 57.5311], [27.3517, 57.5282]]]\n    },\n    \"properties\": {\n      \"name\": \"Latvia\",\n      \"id\": \"LV\"\n    },\n    \"id\": \"LV\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[6.1164, 50.1209], [6.4875, 49.7985], [6.3441, 49.4527], [5.7897, 49.5383], [5.744, 49.9196], [6.1164, 50.1209]]]\n    },\n    \"properties\": {\n      \"name\": \"Luxembourg\",\n      \"id\": \"LU\"\n    },\n    \"id\": \"LU\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[26.5936, 55.6676], [26.175, 55.0033], [25.8594, 54.9192], [25.5473, 54.3317], [24.7683, 53.9746], [23.4845, 53.9398], [23.37, 54.2005], [22.7663, 54.3568], [22.8311, 54.8384], [21.2358, 55.2641], [21.0462, 56.07], [22.0845, 56.4067], [24.1206, 56.2642], [24.9032, 56.3982], [26.5936, 55.6676]]]\n    },\n    \"properties\": {\n      \"name\": \"Lithuania\",\n      \"id\": \"LT\"\n    },\n    \"id\": \"LT\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[27.8303, -28.9091], [28.6257, -28.5816], [29.3013, -29.0898], [29.3905, -29.2696], [29.098, -29.919], [28.3922, -30.1476], [28.018, -30.6421], [27.3886, -30.3158], [27.0517, -29.6642], [27.2945, -29.5195], [27.8303, -28.9091]]]\n    },\n    \"properties\": {\n      \"name\": \"Lesotho\",\n      \"id\": \"LS\"\n    },\n    \"id\": \"LS\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[79.9822, 9.8129], [80.253, 9.7965], [80.7111, 9.3663], [81.373, 8.4315], [81.436, 8.119], [81.8741, 7.2885], [81.8612, 6.9014], [81.6375, 6.4251], [80.724, 5.979], [80.0954, 6.153], [79.8593, 6.8295], [79.7923, 7.5854], [79.929, 8.8994], [80.1185, 9.3268], [79.9822, 9.8129]]]\n    },\n    \"properties\": {\n      \"name\": \"Sri Lanka\",\n      \"id\": \"LK\"\n    },\n    \"id\": \"LK\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[9.5801, 47.0572], [9.4877, 47.0621], [9.5277, 47.2707], [9.5801, 47.0572]]]\n    },\n    \"properties\": {\n      \"name\": \"Liechtenstein\",\n      \"id\": \"LI\"\n    },\n    \"id\": \"LI\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-60.8953, 13.8221], [-61.0636, 13.9158], [-60.8867, 14.0112], [-60.8953, 13.8221]]]\n    },\n    \"properties\": {\n      \"name\": \"Saint Lucia\",\n      \"id\": \"LC\"\n    },\n    \"id\": \"LC\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[25.1505, 31.655], [24.8526, 31.335], [24.9738, 30.7766], [24.7115, 30.1316], [24.9805, 29.1817], [24.9805, 27.8345], [24.9805, 25.8134], [24.9805, 24.2416], [24.9805, 21.9959], [24.9796, 20.0024], [23.9804, 19.9958], [23.9804, 19.4968], [21.5847, 20.6794], [19.6684, 21.6257], [17.7521, 22.5721], [15.9841, 23.4452], [14.9791, 22.996], [14.2307, 22.6183], [13.4814, 23.1802], [11.9678, 23.518], [11.5075, 24.3144], [10.6863, 24.5514], [10.2557, 24.5909], [10.0009, 25.3322], [9.4482, 26.0673], [9.4913, 26.3337], [9.8593, 26.5521], [9.7474, 27.3306], [9.9161, 27.7856], [9.8424, 28.9668], [9.6724, 29.567], [9.3102, 30.1152], [9.5188, 30.2293], [9.8952, 30.3873], [10.2162, 30.7832], [10.115, 31.4637], [10.8265, 32.0807], [11.5048, 32.4137], [11.5043, 33.182], [12.2798, 32.8584], [12.7535, 32.8012], [13.2835, 32.9148], [14.2369, 32.6813], [14.5135, 32.5109], [15.1767, 32.391], [15.4963, 31.6568], [16.123, 31.2644], [17.3491, 31.0815], [18.1902, 30.7775], [18.9364, 30.2905], [19.2915, 30.2879], [19.7132, 30.4885], [20.1509, 31.0784], [19.9263, 31.8175], [20.1216, 32.2188], [20.621, 32.5801], [21.6357, 32.9374], [22.1875, 32.9184], [23.0908, 32.6187], [23.2866, 32.2139], [24.1295, 32.0093], [24.6839, 32.0159], [25.1505, 31.655]]]\n    },\n    \"properties\": {\n      \"name\": \"Libya\",\n      \"id\": \"LY\"\n    },\n    \"id\": \"LY\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-8.4863, 7.5584], [-8.2966, 7.0741], [-8.3325, 6.8015], [-8.6035, 6.5077], [-7.8886, 6.2347], [-7.7965, 5.975], [-7.4543, 5.8414], [-7.4299, 5.3247], [-7.5688, 5.0805], [-7.5451, 4.3512], [-8.2591, 4.59], [-9.1322, 5.0548], [-10.2763, 6.0775], [-11.5075, 6.9067], [-11.2678, 7.2325], [-10.6474, 7.7594], [-10.2832, 8.4852], [-9.7683, 8.5345], [-9.5182, 8.3463], [-9.369, 7.6396], [-9.4598, 7.4425], [-9.1175, 7.2157], [-8.8896, 7.2627], [-8.7083, 7.6591], [-8.4863, 7.5584]]]\n    },\n    \"properties\": {\n      \"name\": \"Liberia\",\n      \"id\": \"LR\"\n    },\n    \"id\": \"LR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[35.8691, 33.4319], [35.411, 33.0755], [35.1087, 33.0835], [35.9761, 34.6291], [36.4329, 34.6136], [36.5851, 34.2212], [35.9424, 33.6676], [35.8691, 33.4319]]]\n    },\n    \"properties\": {\n      \"name\": \"Lebanon\",\n      \"id\": \"LB\"\n    },\n    \"id\": \"LB\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[102.1276, 22.379], [102.9488, 21.5698], [102.8511, 21.2657], [103.1046, 20.8915], [103.635, 20.6971], [104.0518, 20.9413], [104.5832, 20.6465], [104.6187, 20.3744], [104.9281, 20.018], [104.5463, 19.6105], [104.0319, 19.6753], [103.8965, 19.3401], [104.7163, 18.8035], [105.115, 18.6787], [105.0857, 18.4501], [105.4581, 18.1545], [105.6916, 17.7377], [106.5021, 16.9542], [106.6961, 16.4588], [107.3966, 16.0429], [107.1897, 15.7473], [107.6531, 15.255], [107.5195, 14.705], [106.82, 14.3148], [106.5012, 14.5781], [105.9788, 14.3432], [105.9046, 13.9247], [105.1833, 14.3464], [105.4754, 14.5301], [105.5131, 15.3606], [105.6223, 15.6998], [105.4062, 15.9874], [105.047, 16.1601], [104.7505, 16.6475], [104.8162, 17.3005], [103.9497, 18.3192], [103.3669, 18.4235], [103.0913, 18.1381], [102.7175, 17.8922], [102.1014, 18.2104], [101.1053, 17.4793], [100.9086, 17.5837], [101.1133, 18.0333], [101.0507, 18.4071], [101.2864, 18.977], [101.1546, 19.5794], [100.6254, 19.4999], [100.3977, 19.7561], [100.5429, 20.0885], [100.1225, 20.3167], [100.2495, 20.7304], [100.7564, 21.3128], [101.139, 21.5676], [101.2242, 21.2236], [101.705, 21.1503], [101.744, 21.778], [101.5243, 22.2538], [101.6712, 22.4625], [102.1276, 22.379]]]\n    },\n    \"properties\": {\n      \"name\": \"Lao People's Democratic Republic\",\n      \"id\": \"LA\"\n    },\n    \"id\": \"LA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[48.4424, 28.5429], [47.6713, 28.5331], [47.4334, 28.9895], [46.5314, 29.0964], [46.9056, 29.5377], [47.1143, 29.9611], [47.6727, 30.0956], [47.9785, 29.9829], [47.9696, 29.6167], [48.1836, 28.9793], [48.4424, 28.5429]]]\n    },\n    \"properties\": {\n      \"name\": \"Kuwait\",\n      \"id\": \"KW\"\n    },\n    \"id\": \"KW\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[21.5625, 42.2476], [21.0596, 42.1713], [20.566, 41.8739], [20.4856, 42.2232], [20.0639, 42.5473], [20.3445, 42.8278], [21.0569, 43.0915], [21.3907, 42.7515], [21.7529, 42.6698], [21.5625, 42.2476]]]\n    },\n    \"properties\": {\n      \"name\": \"Kosovo\",\n      \"id\": \"XK\"\n    },\n    \"id\": \"XK\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[128.3745, 38.6233], [128.619, 38.1763], [129.335, 37.2747], [129.4735, 36.742], [129.4034, 36.0522], [129.5619, 35.9475], [129.2143, 35.1818], [128.5112, 35.101], [128.4442, 34.8706], [127.7148, 34.9545], [127.0308, 34.6069], [126.4817, 34.4937], [126.2913, 35.1542], [126.7174, 35.769], [126.5483, 36.4775], [126.2171, 36.8708], [126.7463, 37.1935], [126.634, 37.7816], [127.1697, 38.3045], [128.0389, 38.3085], [128.3745, 38.6233]]]\n    },\n    \"properties\": {\n      \"name\": \"South Korea\",\n      \"id\": \"KR\"\n    },\n    \"id\": \"KR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-62.6307, 17.2401], [-62.8389, 17.3391], [-62.7945, 17.4025], [-62.7137, 17.3533], [-62.6307, 17.2401]]]\n    },\n    \"properties\": {\n      \"name\": \"Saint Kitts and Nevis\",\n      \"id\": \"KN\"\n    },\n    \"id\": \"KN\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-157.3422, 1.8557], [-157.2461, 1.7318], [-157.4201, 1.7873], [-157.3422, 1.8557]]]\n    },\n    \"properties\": {\n      \"name\": \"Kiribati\",\n      \"id\": \"KI\"\n    },\n    \"id\": \"KI\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[104.4265, 10.4112], [104.2622, 10.5413], [103.532, 10.6048], [103.722, 10.8902], [103.5325, 11.1468], [103.153, 10.9137], [103.1254, 11.4606], [102.9341, 11.7065], [102.7366, 12.0896], [102.7557, 12.4261], [102.4995, 12.6698], [102.3198, 13.5398], [102.729, 13.8421], [103.1996, 14.3326], [104.7789, 14.428], [105.1833, 14.3464], [105.9046, 13.9247], [105.9788, 14.3432], [106.5012, 14.5781], [106.82, 14.3148], [107.5195, 14.705], [107.3313, 14.1266], [107.6056, 13.4377], [107.4756, 13.0302], [107.5062, 12.3644], [106.9305, 12.0776], [106.4138, 11.9484], [106.3401, 11.6817], [105.8514, 11.6351], [105.8558, 11.2941], [106.1679, 11.0123], [105.3866, 10.9399], [104.8504, 10.5347], [104.4265, 10.4112]]]\n    },\n    \"properties\": {\n      \"name\": \"Cambodia\",\n      \"id\": \"KH\"\n    },\n    \"id\": \"KH\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[80.2095, 42.1899], [80.2162, 42.0323], [79.2938, 41.7829], [78.3625, 41.3718], [78.1232, 41.0758], [76.8239, 40.9821], [76.4804, 40.4494], [75.8718, 40.3034], [75.5837, 40.6052], [75.0044, 40.4494], [74.4118, 40.1374], [73.9915, 40.0433], [73.9147, 39.6065], [73.6315, 39.4489], [73.2351, 39.3743], [72.0428, 39.3521], [71.8062, 39.2758], [71.4045, 39.598], [70.7333, 39.4134], [70.6077, 39.5643], [69.5987, 39.5736], [69.229, 39.761], [69.5304, 40.0974], [69.9667, 40.2022], [70.4514, 40.049], [70.9579, 40.239], [71.6926, 40.1525], [73.113, 40.7859], [72.6585, 40.8698], [71.7924, 41.4131], [71.4085, 41.1361], [70.7826, 41.2626], [70.1811, 41.5716], [70.8421, 42.0195], [70.9468, 42.2485], [71.2567, 42.7337], [71.8168, 42.822], [72.8551, 42.561], [73.422, 42.5934], [73.5565, 43.0027], [74.209, 43.2402], [75.0475, 42.9046], [76.9442, 42.9716], [79.1646, 42.759], [79.49, 42.4576], [80.2095, 42.1899]]]\n    },\n    \"properties\": {\n      \"name\": \"Kyrgyzstan\",\n      \"id\": \"KG\"\n    },\n    \"id\": \"KG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[41.8839, 3.9779], [41.3419, 3.2016], [40.9646, 2.8145], [40.9699, 1.378], [40.9788, -0.8703], [41.5328, -1.6955], [40.9956, -1.9507], [40.6441, -2.5393], [40.2224, -2.6884], [40.1154, -3.2504], [39.4909, -4.4787], [39.2219, -4.6922], [37.7974, -3.6743], [37.6087, -3.4604], [37.6438, -3.0453], [36.2633, -2.2747], [34.7709, -1.4416], [33.9031, -1.0021], [33.9431, 0.1738], [34.4815, 1.042], [34.7874, 1.2307], [34.9654, 1.6435], [34.964, 2.0625], [34.7425, 2.818], [34.4478, 3.1634], [34.3928, 3.6916], [34.165, 3.8128], [33.9759, 4.2203], [35.2681, 5.4925], [35.7448, 5.3442], [35.763, 4.808], [36.0818, 4.4498], [36.9056, 4.4116], [38.0864, 3.649], [39.4944, 3.4559], [39.8424, 3.8514], [40.7653, 4.2731], [41.2207, 3.9437], [41.8839, 3.9779]]]\n    },\n    \"properties\": {\n      \"name\": \"Kenya\",\n      \"id\": \"KE\"\n    },\n    \"id\": \"KE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[87.3229, 49.0858], [86.7534, 49.0088], [86.5496, 48.5287], [85.7493, 48.3849], [85.526, 47.9157], [85.6565, 47.2547], [84.786, 46.8308], [83.1929, 47.1864], [83.0043, 47.0337], [82.3264, 45.52], [82.4787, 45.1236], [81.602, 45.3109], [80.059, 45.0064], [80.4554, 44.7463], [80.3551, 44.0973], [80.7857, 43.1616], [80.1651, 42.6653], [80.2095, 42.1899], [79.49, 42.4576], [79.1646, 42.759], [76.9442, 42.9716], [75.0475, 42.9046], [74.209, 43.2402], [73.5565, 43.0027], [73.422, 42.5934], [72.8551, 42.561], [71.8168, 42.822], [71.2567, 42.7337], [70.9468, 42.2485], [70.4159, 42.0785], [70.0954, 41.8206], [69.0652, 41.367], [68.2919, 40.6563], [67.9359, 41.1965], [66.8142, 41.1423], [66.6686, 41.2706], [66.4986, 41.9951], [66.0094, 42.0048], [66.1004, 42.9907], [65.803, 42.8771], [65.4963, 43.3108], [64.9054, 43.7147], [64.4434, 43.5513], [63.2071, 43.6281], [61.9904, 43.4923], [61.1608, 44.1688], [61.0081, 44.3939], [58.5551, 45.5555], [55.9757, 44.9949], [55.9766, 42.929], [55.9774, 41.3221], [55.5451, 41.2626], [54.9037, 41.9192], [54.1211, 42.3351], [53.2502, 42.2059], [52.4938, 41.7802], [52.5968, 42.7603], [51.8439, 42.9104], [51.3019, 43.4825], [50.8305, 44.1928], [50.3311, 44.3255], [50.4093, 44.6242], [50.8603, 44.6287], [51.4156, 45.358], [52.5311, 45.3988], [52.7739, 45.5728], [53.1352, 46.1916], [53.1703, 46.6692], [52.9159, 46.9542], [52.1888, 46.8397], [51.1781, 47.11], [50.4195, 46.8796], [50, 46.6342], [49.3475, 46.5192], [49.2321, 46.3372], [48.6102, 46.5663], [48.9595, 46.7744], [48.1099, 47.7452], [47.0934, 47.9477], [47.0042, 48.2846], [46.661, 48.4124], [46.7028, 48.8055], [47.0144, 49.0984], [46.8022, 49.367], [47.3264, 50.2734], [47.706, 50.378], [48.4344, 49.8284], [48.8432, 50.0131], [48.8086, 50.6012], [49.498, 51.0835], [50.2468, 51.2895], [50.7941, 51.7292], [51.6091, 51.4839], [52.3309, 51.6812], [52.571, 51.4817], [53.3381, 51.4824], [54.0416, 51.1153], [54.4216, 50.7804], [54.727, 50.9981], [55.5424, 50.6017], [55.7977, 50.6021], [56.4915, 51.0196], [57.0117, 51.0651], [57.4423, 50.8889], [57.8387, 51.0917], [58.3594, 51.0638], [58.8836, 50.6945], [59.8122, 50.5819], [59.9552, 50.7992], [60.6379, 50.6638], [61.3894, 50.8609], [61.5851, 51.2298], [61.3632, 51.442], [60.4647, 51.6513], [60.0657, 51.9764], [60.9375, 52.2805], [60.8021, 52.7448], [61.0476, 52.9725], [61.974, 52.9437], [62.0148, 53.1079], [61.1994, 53.2872], [60.9797, 53.6217], [61.3339, 54.0492], [61.9287, 53.9464], [63.0739, 54.1053], [64.4611, 54.3841], [65.1576, 54.3643], [65.4767, 54.6233], [66.2225, 54.6673], [68.0739, 54.9596], [68.2062, 55.1609], [68.9773, 55.3895], [70.1824, 55.1625], [70.7382, 55.3052], [71.1856, 54.5994], [71.0933, 54.2123], [72.9141, 54.1073], [73.3993, 53.8115], [73.2857, 53.5984], [74.4518, 53.6472], [76.2664, 54.312], [76.5758, 53.9424], [77.7042, 53.3791], [78.4757, 52.6385], [79.4687, 51.493], [79.9862, 50.7746], [80.8771, 51.2815], [81.4657, 50.7397], [82.4938, 50.7275], [83.3571, 50.9945], [83.9453, 50.7746], [84.2578, 50.2883], [84.9893, 50.0615], [85.21, 49.6648], [86.1807, 49.4993], [86.6144, 49.6098], [87.3229, 49.0858]]]\n    },\n    \"properties\": {\n      \"name\": \"Kazakhstan\",\n      \"id\": \"KZ\"\n    },\n    \"id\": \"KZ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[141.2296, 41.3727], [141.4626, 40.611], [141.7969, 40.2914], [141.978, 39.8444], [141.9007, 39.1115], [141.6584, 38.9748], [141.4675, 38.404], [141.1084, 38.3378], [140.9282, 37.9494], [141.0365, 37.4674], [140.9686, 37.0022], [140.6272, 36.5028], [140.6219, 36.0593], [140.874, 35.7251], [140.4572, 35.5102], [140.4164, 35.267], [139.7994, 34.9567], [139.6502, 35.409], [139.2494, 35.2781], [138.9826, 34.6984], [138.5773, 35.0863], [138.1889, 34.5963], [136.8848, 34.8058], [136.5332, 34.6784], [136.8537, 34.3242], [136.3299, 34.1768], [135.9162, 33.5616], [135.4528, 33.5536], [135.1753, 33.898], [135.1003, 34.2882], [135.3848, 34.5004], [134.7399, 34.7654], [134.2081, 34.6975], [133.9684, 34.5275], [133.1423, 34.3024], [132.2381, 34.227], [132.0903, 33.8554], [131.7405, 34.0521], [130.9188, 33.9757], [131.0041, 34.3925], [131.3543, 34.4134], [132.923, 35.5111], [133.3767, 35.4588], [134.2139, 35.5391], [135.1744, 35.7473], [135.6805, 35.5031], [136.0955, 35.7677], [136.0063, 35.9905], [136.6983, 36.742], [137.3424, 36.7705], [137.5142, 36.9516], [138.3199, 37.2183], [138.8849, 37.8438], [139.4012, 38.1425], [140.0479, 39.4635], [139.9228, 40.5986], [140.2814, 40.8463], [141.1186, 40.8822], [141.2296, 41.3727]]], [[[143.8241, 44.1169], [144.7985, 43.9402], [145.1012, 43.7644], [145.3476, 43.1767], [144.6307, 42.9468], [143.9693, 42.8815], [143.4295, 42.419], [143.2364, 42.0004], [141.8515, 42.5792], [140.9863, 42.3422], [140.4803, 42.5592], [140.3267, 42.2934], [140.7337, 42.1162], [140.3848, 41.5192], [139.9951, 41.5765], [140.1083, 41.9129], [139.8211, 42.3875], [139.8912, 42.6494], [140.7808, 43.2149], [141.2962, 43.1998], [141.6446, 44.0197], [141.7822, 44.7166], [141.5829, 45.156], [141.9376, 45.5094], [142.7042, 44.8191], [143.8241, 44.1169]]], [[[131.1745, 33.6024], [131.5829, 33.6526], [131.8967, 33.2548], [131.9766, 32.8438], [131.7321, 32.593], [131.3374, 31.4047], [130.5886, 31.1783], [130.2006, 31.2919], [130.3218, 31.6013], [130.1944, 32.0909], [130.6405, 32.6192], [129.5801, 33.2362], [130.3649, 33.6344], [130.4838, 33.8345], [130.953, 33.8718], [131.1745, 33.6024]]], [[[134.3572, 34.2562], [134.6373, 34.2265], [134.739, 33.8203], [134.3772, 33.6082], [134.1815, 33.2473], [133.6319, 33.511], [133.2861, 33.36], [132.9772, 32.842], [132.4951, 32.9166], [132.3659, 33.5123], [132.7841, 33.9926], [133.5822, 34.017], [134.0758, 34.3583], [134.3572, 34.2562]]]]\n    },\n    \"properties\": {\n      \"name\": \"Japan\",\n      \"id\": \"JP\"\n    },\n    \"id\": \"JP\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[39.1455, 32.1247], [38.9622, 31.9951], [36.9584, 31.4917], [37.9803, 30.5], [37.6336, 30.3132], [37.4694, 29.9949], [36.7551, 29.8662], [36.4759, 29.4951], [36.0156, 29.1906], [34.9507, 29.3535], [34.9734, 29.555], [35.174, 30.524], [35.4394, 31.1326], [35.4505, 31.4793], [35.5589, 31.7656], [35.5513, 32.3955], [35.7875, 32.735], [36.3721, 32.387], [36.8182, 32.3173], [38.7735, 33.372], [39.1455, 32.1247]]]\n    },\n    \"properties\": {\n      \"name\": \"Jordan\",\n      \"id\": \"JO\"\n    },\n    \"id\": \"JO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-2.0186, 49.2312], [-2.2359, 49.1763], [-2.2206, 49.2665], [-2.0186, 49.2312]]]\n    },\n    \"properties\": {\n      \"name\": \"Jersey\",\n      \"id\": \"JE\"\n    },\n    \"id\": \"JE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-77.2614, 18.4572], [-76.3499, 18.1518], [-76.5246, 17.8664], [-76.8533, 17.9738], [-77.3615, 17.8336], [-77.7681, 17.8775], [-78.2167, 18.4479], [-77.8735, 18.522], [-77.2614, 18.4572]]]\n    },\n    \"properties\": {\n      \"name\": \"Jamaica\",\n      \"id\": \"JM\"\n    },\n    \"id\": \"JM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[9.632, 40.8822], [9.8051, 40.4996], [9.5623, 39.1661], [9.0563, 39.2394], [8.8814, 38.9127], [8.418, 39.2056], [8.4712, 40.2927], [8.1898, 40.6518], [9.2831, 41.2018], [9.632, 40.8822]]], [[[15.5766, 38.2202], [15.0994, 37.4585], [15.2943, 37.0133], [15.1127, 36.6879], [14.5019, 36.7989], [12.4356, 37.8198], [13.3518, 38.1807], [13.6816, 38.0009], [14.5059, 38.0453], [14.846, 38.1718], [15.5766, 38.2202]]], [[[13.6998, 46.5201], [13.3993, 46.3177], [13.7198, 45.5875], [13.2062, 45.7713], [12.2745, 45.4459], [12.5235, 44.9678], [12.2483, 44.7223], [12.3961, 44.2238], [13.564, 43.5713], [14.0106, 42.6898], [14.8659, 42.0523], [15.1687, 41.9338], [15.9641, 41.9396], [16.0125, 41.4353], [17.1032, 41.062], [17.955, 40.6554], [18.4859, 40.105], [18.0779, 39.9367], [17.8649, 40.2803], [16.9283, 40.4579], [16.5301, 39.8595], [16.5976, 39.6389], [17.1147, 39.3805], [17.1746, 38.9979], [16.5589, 38.7147], [16.5456, 38.4093], [16.0569, 37.9419], [15.7244, 37.9392], [15.9726, 38.7125], [16.1967, 38.7591], [16.0236, 39.3535], [15.6929, 39.99], [14.9507, 40.239], [14.7656, 40.6683], [14.1024, 40.8272], [13.7331, 41.2356], [13.0886, 41.244], [12.6309, 41.4695], [11.6375, 42.2876], [10.7084, 42.9361], [10.0475, 44.0201], [8.766, 44.4223], [8.0815, 43.9189], [7.4929, 43.7671], [7.6771, 44.0831], [6.9673, 44.2802], [7.0308, 44.7166], [6.6277, 45.1178], [7.1533, 45.401], [7.021, 45.9257], [7.9932, 46.0158], [8.4584, 46.2458], [8.9537, 45.8298], [9.2512, 46.2866], [9.9392, 46.3616], [10.4528, 46.865], [11.0249, 46.7971], [11.2442, 46.9755], [12.1542, 46.9351], [12.3881, 46.7025], [13.6998, 46.5201]], [[12.4853, 43.9016], [12.5146, 43.9531], [12.441, 43.9824], [12.397, 43.9344], [12.4853, 43.9016]]]]\n    },\n    \"properties\": {\n      \"name\": \"Italy\",\n      \"id\": \"IT\"\n    },\n    \"id\": \"IT\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[35.7875, 32.735], [35.5513, 32.3955], [35.1931, 32.5344], [34.9561, 32.1611], [34.9507, 31.6022], [35.4505, 31.4793], [35.4394, 31.1326], [35.174, 30.524], [34.9734, 29.555], [34.9041, 29.4773], [34.2454, 31.2085], [34.4775, 31.5849], [34.6786, 31.8956], [35.1087, 33.0835], [35.411, 33.0755], [35.8691, 33.4319], [35.7875, 32.735]]]\n    },\n    \"properties\": {\n      \"name\": \"Israel\",\n      \"id\": \"IL\"\n    },\n    \"id\": \"IL\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-15.5431, 66.2285], [-14.6982, 66.0203], [-14.7576, 65.7557], [-13.6159, 65.4872], [-13.853, 64.8622], [-15.0215, 64.296], [-16.0605, 64.1113], [-16.6404, 63.8654], [-17.8156, 63.7129], [-18.6537, 63.4066], [-20.1982, 63.5558], [-21.8328, 64.2054], [-21.9502, 64.515], [-22.684, 65.0264], [-22.0057, 65.4934], [-22.9024, 65.5804], [-24.2241, 65.4872], [-23.7371, 66.0695], [-22.4261, 66.4302], [-21.3035, 65.8765], [-21.23, 65.4206], [-20.3567, 65.7191], [-20.3567, 66.0331], [-18.7775, 66.1688], [-16.7485, 66.1317], [-15.9854, 66.5145], [-15.5431, 66.2285]]]\n    },\n    \"properties\": {\n      \"name\": \"Iceland\",\n      \"id\": \"IS\"\n    },\n    \"id\": \"IS\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[44.7652, 37.1424], [45.3618, 36.0154], [45.7235, 35.8365], [46.1337, 35.1276], [45.6783, 34.7982], [45.4377, 34.4152], [45.3968, 33.9708], [46.1457, 33.2295], [46.1128, 32.9579], [46.57, 32.834], [47.3713, 32.4239], [47.8298, 31.7944], [47.6793, 31.0025], [48.0105, 30.9896], [48.0149, 30.4654], [48.5467, 29.9625], [47.9785, 29.9829], [47.6727, 30.0956], [47.1143, 29.9611], [46.9056, 29.5377], [46.5314, 29.0964], [46.3565, 29.0636], [44.7163, 29.1937], [42.8578, 30.4952], [42.0743, 31.0802], [40.3693, 31.9391], [39.1455, 32.1247], [38.7735, 33.372], [40.6894, 34.3322], [40.9872, 34.4289], [41.1945, 34.7689], [41.3543, 35.6403], [41.2456, 36.0735], [41.4169, 36.5148], [41.7884, 36.5973], [42.3588, 37.1087], [42.7748, 37.3719], [43.5161, 37.2445], [44.1562, 37.2831], [44.2818, 36.9782], [44.7652, 37.1424]]]\n    },\n    \"properties\": {\n      \"name\": \"Iraq\",\n      \"id\": \"IQ\"\n    },\n    \"id\": \"IQ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[46.1146, 38.8776], [46.4906, 38.9065], [47.773, 39.6486], [47.9958, 39.6842], [48.2422, 38.9788], [48.0233, 38.819], [48.5929, 38.4111], [48.8685, 38.4355], [49.0811, 37.6676], [49.47, 37.4967], [50.1305, 37.407], [50.5331, 37.0137], [51.1186, 36.7425], [52.1902, 36.6217], [54.0172, 36.9524], [53.9142, 37.3435], [54.7452, 37.502], [55.0755, 37.9024], [55.5784, 38.0999], [56.2287, 38.0733], [56.4409, 38.2495], [57.1937, 38.2162], [57.4236, 37.9477], [58.4357, 37.6387], [58.8157, 37.6835], [59.2409, 37.5206], [59.5623, 37.1788], [60.0626, 36.9631], [60.3413, 36.6377], [61.1195, 36.6426], [61.262, 35.6194], [61.08, 34.8555], [60.4856, 34.0947], [60.5109, 33.6388], [60.9171, 33.5052], [60.5606, 33.1376], [60.8292, 32.2494], [60.854, 31.4833], [61.6602, 31.3825], [61.7844, 30.8321], [61.104, 30.1285], [60.8434, 29.8586], [61.3184, 29.3725], [61.6229, 28.7915], [61.8901, 28.5465], [62.3531, 28.4146], [62.7397, 28.0023], [62.7632, 27.2503], [63.1667, 27.2525], [63.1681, 26.6657], [62.4392, 26.5609], [61.8697, 26.2422], [61.6686, 25.769], [61.5878, 25.2022], [61.412, 25.1023], [60.6641, 25.2821], [59.4562, 25.4814], [59.0461, 25.4175], [58.7979, 25.5546], [57.7961, 25.6532], [57.3344, 25.7917], [56.9824, 26.9054], [56.3561, 27.2001], [55.6503, 26.9777], [54.8957, 26.5565], [53.7056, 26.7256], [53.4548, 26.9431], [52.6918, 27.3235], [52.476, 27.6165], [51.6664, 27.8451], [51.2788, 28.1314], [51.0622, 28.7262], [50.6752, 29.1466], [50.6499, 29.42], [49.9831, 30.2093], [49.5548, 30.0291], [48.9191, 30.1209], [48.5467, 29.9625], [48.0149, 30.4654], [48.0105, 30.9896], [47.6793, 31.0025], [47.8298, 31.7944], [47.3713, 32.4239], [46.57, 32.834], [46.1128, 32.9579], [46.1457, 33.2295], [45.3968, 33.9708], [45.4377, 34.4152], [45.6783, 34.7982], [46.1337, 35.1276], [45.7235, 35.8365], [45.3618, 36.0154], [44.7652, 37.1424], [44.5614, 37.7448], [44.2112, 37.9081], [44.4309, 38.3569], [44.023, 39.3774], [44.8171, 39.6504], [45.4798, 39.0063], [46.1146, 38.8776]]]\n    },\n    \"properties\": {\n      \"name\": \"Iran\",\n      \"id\": \"IR\"\n    },\n    \"id\": \"IR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-6.218, 54.0887], [-6.0274, 52.927], [-6.5612, 52.1888], [-7.5273, 52.0989], [-8.8135, 51.5849], [-10.3786, 51.8688], [-9.9558, 52.1367], [-9.2993, 53.0975], [-9.7954, 53.3951], [-9.996, 54.276], [-8.6231, 54.3468], [-8.764, 54.6813], [-8.2746, 55.1463], [-7.2468, 55.3531], [-7.2186, 55.0921], [-8.1183, 54.4143], [-7.3553, 54.1213], [-6.218, 54.0887]]]\n    },\n    \"properties\": {\n      \"name\": \"Ireland\",\n      \"id\": \"IE\"\n    },\n    \"id\": \"IE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[72.492, -7.3773], [72.4671, -7.3675], [72.4738, -7.3098], [72.4356, -7.2304], [72.4938, -7.2619], [72.492, -7.3773]]]\n    },\n    \"properties\": {\n      \"name\": \"British Indian Ocean Territory\",\n      \"id\": \"IO\"\n    },\n    \"id\": \"IO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[78.7198, 31.8876], [78.8445, 31.3017], [79.1073, 31.4025], [79.3386, 31.1055], [79.3697, 31.0798], [79.9165, 30.8942], [79.9245, 30.8889], [80.1913, 30.5684], [80.6823, 30.4148], [81.0103, 30.1645], [80.4017, 29.7303], [80.0706, 28.8301], [80.5868, 28.6494], [81.8528, 27.8669], [81.9877, 27.9139], [82.7335, 27.5189], [83.2897, 27.371], [84.0909, 27.4913], [84.6103, 27.2987], [84.6853, 27.0412], [85.293, 26.7412], [86.3663, 26.5743], [86.7014, 26.4349], [87.0166, 26.5556], [87.2874, 26.3603], [88.0549, 26.43], [88.1614, 26.7247], [87.9843, 27.134], [88.1099, 27.8704], [88.6213, 28.0919], [88.8485, 27.8686], [88.8912, 27.316], [88.8579, 26.9613], [89.7638, 26.7016], [90.3458, 26.8903], [90.7395, 26.7718], [91.9984, 26.8548], [92.0836, 27.2907], [91.5949, 27.5575], [91.6317, 27.7599], [91.9775, 27.7301], [92.6642, 27.949], [92.702, 28.147], [93.2067, 28.5909], [93.9022, 28.803], [94.6231, 29.3126], [94.7696, 29.1759], [95.4204, 29.0543], [96.0352, 29.4471], [96.4355, 29.0507], [96.776, 28.3671], [97.3224, 28.218], [97.3353, 27.9379], [96.6659, 27.3391], [96.0613, 27.217], [95.1287, 26.5973], [95.1323, 26.0411], [94.6227, 25.4099], [94.7075, 25.0486], [94.2929, 24.3219], [94.1277, 23.8763], [93.3074, 24.0219], [93.4149, 23.6823], [93.366, 23.1323], [93.0788, 22.7182], [93.1618, 22.3604], [92.9643, 22.0039], [92.575, 21.9782], [92.4916, 22.6853], [92.3615, 22.929], [92.2461, 23.6836], [91.938, 23.5047], [91.6198, 22.9796], [91.3152, 23.1043], [91.1603, 23.6605], [91.3672, 24.0933], [91.8768, 24.1954], [92.2514, 24.895], [92.0499, 25.1693], [90.4394, 25.1578], [89.814, 25.3052], [89.8229, 25.9413], [89.2893, 26.0376], [89.1082, 26.2023], [88.4402, 26.3696], [88.0846, 25.8884], [88.4521, 25.5746], [88.4561, 25.1884], [88.1454, 24.4857], [88.7336, 24.2309], [88.5671, 23.6743], [88.7407, 23.4368], [89.0514, 22.0932], [89.0518, 21.6541], [88.2537, 21.6222], [87.9483, 21.8255], [87.1005, 21.5006], [86.8595, 21.2369], [86.9753, 20.7002], [86.7503, 20.3131], [86.2793, 19.9194], [85.5748, 19.693], [84.7709, 19.1253], [84.1042, 18.2926], [83.6541, 18.0697], [83.1982, 17.609], [82.3597, 17.0963], [82.259, 16.56], [81.7618, 16.3297], [81.2385, 16.264], [80.9788, 15.7584], [80.6467, 15.8951], [80.2934, 15.7109], [80.0533, 15.0739], [80.1656, 14.5776], [80.1119, 14.2123], [80.3422, 13.3614], [80.229, 12.6902], [79.8584, 11.9888], [79.7541, 11.5751], [79.8486, 11.1969], [79.838, 10.3225], [79.3905, 10.306], [78.9964, 9.6833], [78.9795, 9.2687], [78.4215, 9.1049], [78.1925, 8.8909], [78.0602, 8.3844], [77.5178, 8.0782], [76.9669, 8.4071], [76.5536, 8.9029], [76.3246, 9.452], [76.3463, 9.9221], [75.9224, 10.7841], [75.724, 11.3616], [75.1966, 12.0576], [74.7705, 13.0773], [74.6711, 13.6676], [74.3821, 14.4946], [73.9493, 15.0748], [73.932, 15.397], [73.4761, 16.0544], [73.3376, 16.4597], [73.1561, 17.6218], [72.8711, 18.6832], [72.6678, 19.8311], [72.8813, 20.5631], [72.8138, 21.117], [72.5431, 21.6968], [72.5901, 22.2783], [72.3326, 22.2703], [72.037, 21.8233], [72.2541, 21.5312], [72.0153, 21.1557], [71.0245, 20.7388], [70.7191, 20.7406], [70.1274, 21.0948], [69.0088, 22.1966], [70.1771, 22.5726], [70.2512, 22.9707], [69.6644, 22.759], [69.2361, 22.8487], [68.6408, 23.19], [68.1649, 23.8572], [68.7242, 23.9646], [68.7282, 24.2656], [69.5592, 24.2731], [69.7163, 24.1728], [70.5469, 24.4183], [71.044, 24.4001], [71.048, 24.6877], [70.6521, 25.4228], [70.2646, 25.7064], [70.0777, 26.0718], [70.1567, 26.4713], [69.47, 26.8046], [69.5681, 27.1744], [70.1447, 27.8491], [70.4035, 28.0249], [70.7373, 27.7293], [71.8701, 27.9623], [72.342, 28.752], [72.903, 29.029], [73.3816, 29.9345], [73.809, 30.0934], [73.8991, 30.4352], [74.6329, 31.0345], [74.5099, 31.7127], [75.3334, 32.2792], [74.6578, 32.5189], [73.9941, 33.2424], [74.1499, 33.507], [73.9613, 34.6535], [74.3004, 34.7654], [75.7093, 34.5031], [76.5945, 34.7357], [77.0486, 35.1099], [77.7992, 35.496], [77.8107, 35.4845], [78.2821, 34.654], [78.9364, 34.3521], [78.7531, 34.0876], [78.8019, 33.4999], [79.1127, 33.2264], [79.1353, 33.1718], [79.2165, 32.5641], [79.2192, 32.5011], [78.3896, 32.5197], [78.7198, 31.8876]]]\n    },\n    \"properties\": {\n      \"name\": \"India\",\n      \"id\": \"IN\"\n    },\n    \"id\": \"IN\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-4.4121, 54.1854], [-4.7457, 54.1189], [-4.5086, 54.3768], [-4.4121, 54.1854]]]\n    },\n    \"properties\": {\n      \"name\": \"Isle of Man\",\n      \"id\": \"IM\"\n    },\n    \"id\": \"IM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[96.4924, 5.2293], [97.4512, 5.2359], [97.9084, 4.8799], [98.2484, 4.4147], [98.3074, 4.0929], [99.7323, 3.1829], [100.4572, 2.2574], [100.6854, 2.1202], [101.0462, 2.2574], [101.4768, 1.6932], [101.7849, 1.6213], [102.1573, 1.2591], [102.4694, 0.7792], [102.8493, 0.7153], [103.0664, 0.492], [103.4788, 0.4801], [103.7868, 0.0468], [103.4286, -0.1916], [103.4313, -0.5334], [103.7211, -0.8867], [104.3608, -1.0385], [104.5685, -1.9218], [104.8451, -2.0932], [104.6684, -2.3857], [105.3968, -2.3804], [105.5819, -2.4918], [106.0445, -3.1062], [105.8438, -3.6135], [105.8873, -5.0096], [105.8163, -5.6767], [105.6183, -5.7997], [105.3493, -5.5493], [105.0812, -5.7455], [104.6396, -5.5205], [104.6014, -5.9044], [103.8312, -5.0797], [102.919, -4.4707], [102.5377, -4.152], [102.1276, -3.5993], [101.5785, -3.167], [100.8478, -2.1438], [100.8554, -1.9343], [100.4865, -1.2991], [100.3081, -0.8268], [99.5978, 0.1023], [99.1593, 0.3518], [98.7962, 1.4948], [98.5644, 1.9023], [97.7006, 2.3586], [97.591, 2.8464], [97.3912, 2.9752], [96.9691, 3.5753], [96.4449, 3.8163], [95.4949, 4.7614], [95.2068, 5.2839], [95.2277, 5.5648], [95.629, 5.6092], [96.1333, 5.2941], [96.4924, 5.2293]]], [[[120.0124, -9.3748], [120.5038, -9.674], [120.8327, -10.0375], [120.439, -10.2941], [120.1447, -10.2], [119.6009, -9.7734], [119.0856, -9.7068], [119.1855, -9.3846], [120.0124, -9.3748]]], [[[125.0679, -9.512], [124.4274, -10.1485], [123.8574, -10.3438], [123.5893, -9.9669], [123.7092, -9.6149], [124.0363, -9.3415], [124.4442, -9.1901], [124.9223, -8.9424], [125.0679, -9.512]]], [[[116.6406, -8.614], [116.3774, -8.9291], [116.0764, -8.7449], [116.0613, -8.4373], [116.4014, -8.2043], [116.7343, -8.3871], [116.6406, -8.614]]], [[[122.7828, -8.6117], [121.6513, -8.8989], [121.0351, -8.9353], [119.8078, -8.6974], [119.9183, -8.4453], [120.6103, -8.2407], [121.4444, -8.578], [121.9664, -8.4551], [122.263, -8.6251], [122.6034, -8.4027], [122.7828, -8.6117]]], [[[118.2426, -8.3179], [118.9879, -8.3379], [119.0061, -8.7498], [118.1898, -8.8403], [117.0614, -9.0991], [116.7884, -9.0064], [116.835, -8.5323], [117.1649, -8.3672], [117.567, -8.4266], [118.1174, -8.1221], [118.2426, -8.3179]]], [[[115.4479, -8.155], [115.7045, -8.4071], [115.2361, -8.7977], [114.4753, -8.1195], [115.4479, -8.155]]], [[[126.8009, -7.668], [126.4719, -7.9503], [125.8434, -7.8167], [126.6095, -7.5717], [126.8009, -7.668]]], [[[138.5351, -8.2735], [138.2963, -8.4053], [137.6851, -8.2624], [138.0074, -7.6414], [138.2954, -7.4385], [138.77, -7.3906], [138.9893, -7.696], [138.5351, -8.2735]]], [[[131.3255, -7.9996], [131.0866, -7.8651], [131.2602, -7.4705], [131.6912, -7.439], [131.3255, -7.9996]]], [[[113.8445, -7.1052], [113.4708, -7.2184], [112.7637, -7.1398], [112.868, -6.9001], [113.9746, -6.873], [113.8445, -7.1052]]], [[[134.537, -6.4424], [134.3559, -6.8149], [134.0589, -6.7691], [134.1681, -6.1761], [134.537, -6.4424]]], [[[107.3739, -6.0074], [107.6669, -6.2156], [108.295, -6.2649], [108.6776, -6.7905], [110.4261, -6.9471], [110.7369, -6.4722], [111.1546, -6.6693], [111.5403, -6.6484], [112.0872, -6.8934], [112.5391, -6.9263], [112.7943, -7.5526], [113.2484, -7.7182], [114.0705, -7.633], [114.4442, -7.8957], [114.387, -8.4053], [114.5836, -8.7698], [113.2533, -8.2868], [112.6789, -8.4093], [111.5101, -8.305], [110.6072, -8.1497], [110.0386, -7.8904], [109.2818, -7.7049], [108.7411, -7.6671], [108.4517, -7.7968], [107.9173, -7.724], [107.2852, -7.4718], [106.6313, -7.4155], [106.5199, -7.0537], [105.4838, -6.7816], [105.8682, -6.1166], [106.0751, -5.9142], [106.8253, -6.0984], [107.0463, -5.9044], [107.3739, -6.0074]]], [[[134.747, -5.7069], [134.7559, -6.1708], [134.4411, -6.335], [134.3413, -5.7127], [134.747, -5.7069]]], [[[122.6451, -5.2692], [122.3961, -5.0699], [122.369, -4.7672], [122.702, -4.6185], [122.6451, -5.2692]]], [[[126.8612, -3.0879], [127.2274, -3.3911], [127.2297, -3.6331], [126.6863, -3.8235], [126.2145, -3.6051], [126.0263, -3.1705], [126.8612, -3.0879]]], [[[129.7545, -2.866], [130.3791, -2.9894], [130.8598, -3.5705], [130.8052, -3.8577], [129.8442, -3.3272], [129.4678, -3.4533], [128.9675, -3.3259], [128.4193, -3.416], [128.0819, -3.1838], [128.1987, -2.866], [129.4274, -2.7905], [129.7545, -2.866]]], [[[108.2071, -2.9978], [107.6145, -3.2096], [107.6665, -2.5664], [108.0744, -2.597], [108.2071, -2.9978]]], [[[124.9694, -1.7057], [124.8344, -1.8943], [124.4176, -2.0053], [124.3808, -1.6875], [124.9694, -1.7057]]], [[[135.4741, -1.5916], [136.2016, -1.6551], [136.1927, -1.8593], [135.4741, -1.5916]]], [[[106.0458, -1.6693], [106.3658, -2.4647], [106.6788, -2.704], [106.547, -3.0555], [105.9988, -2.8247], [105.7857, -2.1815], [105.1332, -2.0426], [105.5855, -1.5268], [106.0458, -1.6693]]], [[[128.153, -1.6604], [127.5617, -1.7283], [127.6465, -1.3324], [128.153, -1.6604]]], [[[99.1637, -1.778], [98.8743, -1.6639], [98.6017, -1.1979], [98.869, -0.9155], [99.2671, -1.6275], [99.1637, -1.778]]], [[[135.3831, -0.6514], [135.8935, -0.726], [135.8389, -1.1193], [135.3831, -0.6514]]], [[[140.9734, -2.6099], [140.9739, -4.0232], [140.9748, -6.3461], [140.9761, -9.1187], [139.9347, -8.1013], [139.3856, -8.1892], [138.8561, -8.1452], [139.0878, -7.5872], [138.7478, -7.2517], [138.8645, -6.8584], [138.4388, -6.3435], [138.0611, -5.4654], [137.0894, -4.9243], [136.6189, -4.8187], [135.9797, -4.531], [135.1957, -4.4507], [134.1473, -3.7968], [133.9737, -3.8182], [133.6532, -3.3645], [133.2488, -4.0623], [132.9687, -4.0947], [132.7539, -3.7036], [132.7512, -3.2948], [132.3482, -2.9752], [133.1911, -2.4377], [133.6088, -2.5473], [133.9049, -2.391], [133.9218, -2.1021], [132.963, -2.2725], [132.3078, -2.2423], [132.0233, -1.9902], [131.9305, -1.5596], [131.2935, -1.3936], [131.2571, -0.8556], [131.8044, -0.7038], [132.1285, -0.4539], [132.6252, -0.3589], [133.4726, -0.726], [133.9746, -0.7442], [134.2596, -1.363], [134.106, -1.7212], [134.1557, -2.1953], [135.0373, -3.333], [135.4865, -3.345], [136.2433, -2.5832], [136.3898, -2.2734], [136.843, -2.1975], [137.1236, -1.8411], [137.8063, -1.4833], [138.6497, -1.7909], [139.7896, -2.3484], [140.6223, -2.4456], [140.9734, -2.6099]]], [[[97.4814, 1.4651], [97.9319, 0.9741], [97.8764, 0.6283], [97.4054, 0.947], [97.2443, 1.4238], [97.4814, 1.4651]]], [[[124.889, 0.9954], [124.4274, 0.4707], [123.754, 0.3056], [123.2653, 0.3265], [123.0824, 0.4858], [121.8421, 0.4366], [121.4258, 0.4947], [120.3489, 0.4494], [120.1274, 0.1667], [120.012, -0.307], [120.0972, -0.6501], [120.5176, -1.0394], [120.6676, -1.3701], [121.0338, -1.4065], [121.5194, -0.8556], [121.9695, -0.9333], [122.2798, -0.7571], [122.8888, -0.7553], [122.5067, -1.3479], [121.7187, -1.8628], [121.349, -1.9458], [121.8484, -2.3316], [122.3992, -3.2007], [122.2527, -3.6206], [122.8773, -4.1089], [122.8973, -4.349], [122.207, -4.4964], [121.9172, -4.848], [121.4866, -4.5812], [121.618, -4.0929], [120.9144, -3.5558], [121.0542, -3.167], [121.052, -2.7515], [120.6538, -2.6676], [120.2539, -3.0529], [120.4368, -3.7072], [120.3627, -4.0858], [120.4199, -4.6176], [120.2792, -5.1463], [120.3116, -5.5418], [119.7172, -5.6932], [119.3763, -5.425], [119.6116, -4.4236], [119.6236, -4.0343], [119.4198, -3.4755], [118.9946, -3.5376], [118.8126, -3.1568], [118.7837, -2.7648], [119.0922, -2.4829], [119.3217, -1.9298], [119.3089, -1.4083], [119.7718, -0.4836], [119.8091, 0.2386], [120.2694, 0.971], [120.5167, 0.8174], [120.9122, 1.2888], [121.44, 1.2142], [121.5918, 1.0678], [122.4365, 1.018], [122.8924, 0.8498], [123.2781, 0.9279], [123.8468, 0.8383], [124.2738, 1.022], [124.9893, 1.7012], [125.2339, 1.5023], [124.889, 0.9954]]], [[[127.7326, 0.848], [128.1609, 1.1579], [128.4242, 1.5174], [128.6883, 1.5725], [128.7025, 1.1064], [128.299, 0.8769], [128.6914, 0.3602], [127.9829, 0.4721], [127.8875, 0.2985], [128.0464, -0.706], [127.6918, -0.2417], [127.7086, 0.2883], [127.5555, 0.4898], [127.4201, 1.252], [127.6318, 1.8437], [128.0109, 1.7012], [128.0118, 1.3319], [127.6527, 1.0141], [127.7326, 0.848]]], [[[117.5746, 4.1706], [117.6301, 3.6361], [117.1662, 3.5922], [117.6105, 3.0644], [118.0664, 2.3178], [117.8649, 1.9684], [118.0806, 1.7016], [118.9848, 0.9821], [118.5347, 0.8134], [118.196, 0.8742], [117.745, 0.7295], [117.5222, 0.2359], [117.4627, -0.3238], [117.5626, -0.7708], [116.5545, -1.474], [116.4236, -2.0528], [116.5656, -2.2996], [116.3308, -2.9024], [115.9561, -3.5949], [114.6937, -4.1697], [114.5361, -3.4946], [114.0825, -3.2788], [113.7957, -3.4564], [113.5258, -3.1838], [112.9714, -3.1869], [112.6003, -3.4005], [112.2851, -3.321], [111.8222, -3.5323], [111.8231, -3.0573], [111.3676, -2.9335], [111.0445, -3.0555], [110.5739, -2.8913], [110.2326, -2.925], [110.0191, -1.3989], [109.7874, -1.0114], [109.454, -0.8689], [109.1606, -0.4947], [109.2574, 0.0313], [108.9444, 0.3558], [108.9058, 0.7939], [109.0758, 1.4957], [109.3785, 1.9227], [109.6289, 2.0275], [109.6542, 1.6151], [110.5056, 0.8618], [110.9379, 1.0172], [111.7698, 0.9994], [112.0783, 1.1432], [112.1857, 1.4393], [112.476, 1.5592], [113.6222, 1.236], [113.9022, 1.4344], [114.5459, 1.4673], [114.8304, 1.98], [114.7865, 2.2503], [115.1509, 2.4931], [115.0861, 2.8411], [115.4545, 3.0342], [115.5686, 3.9389], [115.8962, 4.3486], [117.1005, 4.337], [117.5746, 4.1706]]]]\n    },\n    \"properties\": {\n      \"name\": \"Indonesia\",\n      \"id\": \"ID\"\n    },\n    \"id\": \"ID\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[22.132, 48.4053], [22.8764, 47.9472], [22.2905, 47.7279], [21.1519, 46.3044], [20.2419, 46.1086], [19.5308, 46.1552], [18.9054, 45.9315], [17.9639, 45.7704], [17.3105, 45.9963], [16.5163, 46.4997], [16.0929, 46.8632], [16.4533, 47.0066], [16.4342, 47.3675], [17.1475, 48.0058], [17.7619, 47.7701], [18.7242, 47.787], [18.7917, 48.0005], [19.8988, 48.1314], [20.4901, 48.5269], [21.4515, 48.5522], [22.132, 48.4053]]]\n    },\n    \"properties\": {\n      \"name\": \"Hungary\",\n      \"id\": \"HU\"\n    },\n    \"id\": \"HU\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-71.7791, 19.7183], [-71.6571, 19.1306], [-71.7683, 18.0391], [-72.0599, 18.2286], [-72.8767, 18.1518], [-73.3851, 18.2513], [-73.885, 18.0418], [-74.419, 18.3463], [-74.2276, 18.6628], [-72.7894, 18.4346], [-72.3478, 18.6747], [-72.8112, 19.0716], [-72.7033, 19.4409], [-73.0527, 19.6109], [-73.1177, 19.9039], [-72.6369, 19.9008], [-71.7791, 19.7183]]]\n    },\n    \"properties\": {\n      \"name\": \"Haiti\",\n      \"id\": \"HT\"\n    },\n    \"id\": \"HT\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[18.9054, 45.9315], [19.0549, 45.5271], [19.007, 44.8693], [18.6625, 45.0774], [17.8129, 45.0779], [16.5305, 45.2168], [16.2935, 45.0086], [15.7879, 45.1791], [15.7369, 44.7658], [16.214, 44.215], [17.6247, 43.0426], [17.5852, 42.9383], [16.903, 43.3924], [15.9415, 43.6565], [15.123, 44.2567], [14.8548, 45.081], [14.3861, 45.342], [13.9657, 44.8355], [13.6293, 45.1081], [13.5778, 45.5169], [13.8787, 45.4286], [15.3396, 45.4672], [15.6246, 45.8338], [15.6361, 46.2005], [16.5163, 46.4997], [17.3105, 45.9963], [17.9639, 45.7704], [18.9054, 45.9315]]], [[[17.6678, 42.897], [18.4362, 42.5597], [18.5174, 42.4327], [17.6678, 42.897]]]]\n    },\n    \"properties\": {\n      \"name\": \"Croatia\",\n      \"id\": \"HR\"\n    },\n    \"id\": \"HR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-83.1576, 14.9931], [-83.8674, 14.7947], [-84.646, 14.6611], [-84.9851, 14.7525], [-85.1796, 14.3432], [-85.7868, 13.8443], [-86.1512, 13.9948], [-86.3317, 13.7702], [-86.7336, 13.7635], [-86.7108, 13.3134], [-87.0592, 12.9916], [-87.3373, 12.9792], [-87.4891, 13.3529], [-87.8143, 13.3991], [-87.7153, 13.8128], [-88.151, 13.9872], [-88.4491, 13.851], [-89.0572, 14.329], [-89.3626, 14.416], [-89.2223, 14.8661], [-88.9764, 15.1427], [-88.2284, 15.7291], [-87.6181, 15.9097], [-86.9072, 15.7624], [-86.3568, 15.7832], [-85.7839, 16.003], [-85.4836, 15.8995], [-84.9738, 15.9901], [-84.2614, 15.8227], [-83.7604, 15.2204], [-83.3691, 15.2399], [-83.1576, 14.9931]]]\n    },\n    \"properties\": {\n      \"name\": \"Honduras\",\n      \"id\": \"HN\"\n    },\n    \"id\": \"HN\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[73.7074, -53.1372], [73.465, -53.1843], [73.3363, -53.0298], [73.5858, -53.0271], [73.7074, -53.1372]]]\n    },\n    \"properties\": {\n      \"name\": \"Heard Island and McDonald Islands\",\n      \"id\": \"HM\"\n    },\n    \"id\": \"HM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[114.0154, 22.5117], [114.2658, 22.541], [114.268, 22.2956], [114.0154, 22.5117]]]\n    },\n    \"properties\": {\n      \"name\": \"Hong Kong\",\n      \"id\": \"HK\"\n    },\n    \"id\": \"HK\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-57.1948, 5.5484], [-57.3309, 5.0202], [-57.7111, 4.9909], [-58.0544, 4.1719], [-57.8327, 3.6761], [-57.5497, 3.3529], [-57.3036, 3.3769], [-57.2097, 2.8828], [-56.7043, 2.0363], [-56.4828, 1.9422], [-56.8368, 1.8814], [-57.1189, 2.0141], [-57.5943, 1.7043], [-58.3407, 1.5876], [-58.5119, 1.2848], [-58.8625, 1.2036], [-59.2312, 1.3758], [-59.7563, 1.9005], [-59.7552, 2.2743], [-59.9942, 2.6902], [-59.8544, 3.5873], [-59.5512, 3.9335], [-59.8333, 4.476], [-60.1112, 4.511], [-59.9907, 5.0828], [-60.142, 5.239], [-60.7422, 5.2022], [-61.3767, 5.9071], [-61.1286, 6.2142], [-61.1457, 6.6945], [-60.3951, 6.9453], [-60.7191, 7.4989], [-60.5136, 7.8131], [-60.0324, 8.0537], [-59.8315, 8.3059], [-60.0175, 8.5491], [-59.2003, 8.0746], [-58.6266, 7.5459], [-58.4806, 7.0381], [-57.9825, 6.786], [-57.1902, 6.0975], [-57.1948, 5.5484]]]\n    },\n    \"properties\": {\n      \"name\": \"Guyana\",\n      \"id\": \"GY\"\n    },\n    \"id\": \"GY\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[144.7416, 13.2593], [144.6493, 13.4288], [144.7905, 13.5269], [144.7416, 13.2593]]]\n    },\n    \"properties\": {\n      \"name\": \"Guam\",\n      \"id\": \"GU\"\n    },\n    \"id\": \"GU\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-51.6526, 4.0614], [-51.9906, 3.7018], [-52.7006, 2.3635], [-52.9648, 2.1837], [-53.7678, 2.3551], [-54.13, 2.1211], [-54.6163, 2.3266], [-54.1954, 2.818], [-54.2032, 3.1381], [-53.9904, 3.5895], [-54.3508, 4.0543], [-54.4522, 5.0135], [-54.1559, 5.3589], [-53.8472, 5.7823], [-53.4544, 5.5635], [-52.8993, 5.425], [-52.2905, 4.9421], [-51.9196, 4.5244], [-51.6526, 4.0614]]]\n    },\n    \"properties\": {\n      \"name\": \"French Guiana\",\n      \"id\": \"GF\"\n    },\n    \"id\": \"GF\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-89.1615, 17.8149], [-89.2374, 15.8942], [-88.8941, 15.8907], [-88.2284, 15.7291], [-88.9764, 15.1427], [-89.2223, 14.8661], [-89.3626, 14.416], [-89.8726, 14.0454], [-90.0952, 13.7364], [-90.607, 13.9291], [-91.1461, 13.9255], [-91.8191, 14.2283], [-92.2352, 14.5452], [-92.0748, 15.0743], [-92.1871, 15.3207], [-91.7365, 16.07], [-90.4472, 16.0726], [-90.417, 16.3909], [-90.7107, 16.7083], [-91.4096, 17.2561], [-90.993, 17.2525], [-90.9892, 17.8163], [-89.1615, 17.8149]]]\n    },\n    \"properties\": {\n      \"name\": \"Guatemala\",\n      \"id\": \"GT\"\n    },\n    \"id\": \"GT\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-25.4324, 70.9213], [-25.4022, 70.6527], [-27.898, 70.4541], [-27.7089, 70.8971], [-25.4324, 70.9213]]], [[[-52.7313, 69.9447], [-52.0452, 69.8071], [-52.1125, 69.4891], [-53.5784, 69.2567], [-53.7831, 69.5064], [-54.804, 69.6304], [-54.8304, 70.1611], [-53.3751, 70.2213], [-52.7313, 69.9447]]], [[[-29.953, 83.5649], [-25.9475, 83.2897], [-24.4702, 82.8773], [-21.5208, 82.5954], [-25.1489, 82.0011], [-21.3379, 82.0687], [-21.1466, 81.6952], [-17.2261, 81.4304], [-15.5555, 81.8337], [-12.1928, 81.649], [-11.5288, 81.424], [-14.5035, 80.7633], [-16.7607, 80.5733], [-16.8683, 80.1982], [-19.4292, 80.2577], [-20.1385, 79.8033], [-19.2836, 79.683], [-19.0749, 79.1524], [-20.9557, 78.5551], [-20.8625, 77.9119], [-20.2319, 77.3684], [-18.339, 77.2152], [-18.5103, 76.7782], [-20.9422, 76.887], [-21.8772, 76.5734], [-21.5692, 76.2937], [-20.1037, 76.2191], [-19.5091, 75.7575], [-19.4261, 75.2299], [-20.485, 75.3143], [-19.2252, 74.4795], [-19.3692, 74.284], [-21.1295, 74.1109], [-20.3673, 73.8483], [-20.5096, 73.493], [-22.1851, 73.2699], [-22.0364, 72.9184], [-22.2931, 72.1196], [-24.0692, 72.4987], [-24.6669, 72.4374], [-22.0133, 71.6888], [-21.7523, 71.4784], [-21.5228, 70.5262], [-23.3279, 70.451], [-23.7917, 70.5551], [-24.377, 71.1463], [-25.7422, 71.1836], [-26.7179, 70.9506], [-27.6887, 70.9934], [-28.5409, 70.4769], [-28.0149, 70.4024], [-26.7472, 70.4756], [-23.1732, 70.1145], [-23.0882, 69.883], [-26.3414, 68.7023], [-29.2496, 68.2988], [-29.8686, 68.3116], [-30.9786, 68.0613], [-32.1373, 68.3849], [-32.2747, 67.9228], [-33.157, 67.6267], [-34.1016, 66.7258], [-34.6329, 66.4349], [-36.3792, 65.8307], [-37.7541, 65.593], [-39.9609, 65.5562], [-39.5779, 65.3407], [-40.6554, 64.9154], [-40.1822, 64.48], [-40.6177, 64.1317], [-40.5504, 63.7254], [-42.1529, 62.5686], [-42.3216, 62.1526], [-42.1103, 61.8572], [-42.4188, 61.537], [-42.7171, 60.7675], [-43.3201, 59.9281], [-44.0654, 59.9247], [-45.3793, 60.2028], [-46.0467, 60.6157], [-46.0116, 61.0968], [-46.8746, 60.8163], [-47.7963, 60.829], [-48.922, 61.2775], [-49.2891, 61.59], [-49.5534, 62.2328], [-50.3192, 62.4731], [-50.3382, 62.8287], [-51.4688, 63.6423], [-51.4511, 63.9047], [-52.0934, 64.4158], [-52.259, 65.1549], [-53.6346, 66.4136], [-53.0382, 66.8268], [-53.8845, 67.1356], [-53.4189, 67.5746], [-53.578, 67.8369], [-53.0393, 68.6108], [-51.2493, 68.74], [-50.5, 69.9358], [-52.2545, 70.059], [-54.0143, 70.4217], [-54.1659, 70.8201], [-52.4052, 70.6867], [-51.5246, 70.4394], [-51.1302, 70.9717], [-53.117, 71.3128], [-53.4761, 71.6402], [-54.6891, 71.3672], [-55.5939, 71.5536], [-55.3156, 72.1107], [-55.6017, 72.4536], [-54.7379, 72.8724], [-56.104, 73.5582], [-55.9295, 73.8954], [-56.7063, 74.2192], [-56.2556, 74.5268], [-58.6035, 75.3853], [-58.5163, 75.6891], [-61.3747, 76.1801], [-63.4388, 76.3394], [-66.8262, 75.9688], [-69.3728, 76.3319], [-69.2521, 76.6861], [-70.7928, 76.869], [-70.8629, 77.1755], [-69.3515, 77.4671], [-72.8181, 78.1945], [-72.3957, 78.5043], [-68.9935, 78.8574], [-67.4823, 79.1169], [-65.9679, 79.1324], [-64.7923, 80.0007], [-66.8437, 80.0761], [-66.996, 80.413], [-62.9932, 81.2069], [-61.436, 81.1337], [-61.203, 81.7469], [-58.7174, 82.0932], [-54.7259, 82.3513], [-52.7757, 82.3218], [-50.8944, 81.8952], [-48.8612, 82.4054], [-45.2912, 81.8288], [-44.239, 82.3682], [-46.4782, 82.9519], [-43.1945, 83.255], [-32.9845, 83.5995], [-29.953, 83.5649]]]]\n    },\n    \"properties\": {\n      \"name\": \"Greenland\",\n      \"id\": \"GL\"\n    },\n    \"id\": \"GL\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-61.7154, 12.0128], [-61.715, 12.185], [-61.6071, 12.2232], [-61.6271, 12.0541], [-61.7154, 12.0128]]]\n    },\n    \"properties\": {\n      \"name\": \"Grenada\",\n      \"id\": \"GD\"\n    },\n    \"id\": \"GD\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[23.8521, 35.5355], [24.3129, 35.3638], [24.7212, 35.425], [25.4758, 35.3061], [25.7448, 35.1427], [24.7998, 34.9345], [24.4638, 35.1605], [23.5618, 35.295], [23.8521, 35.5355]]], [[[26.0391, 40.7269], [25.1043, 40.9945], [24.3839, 40.9129], [23.8787, 40.5444], [23.6643, 40.2239], [23.3119, 40.2164], [22.6296, 40.4956], [22.5923, 40.0371], [22.919, 39.6291], [22.9656, 39.0308], [23.2528, 38.6614], [23.9671, 38.2748], [23.5804, 38.0107], [23.1938, 37.9592], [23.1614, 37.3338], [22.765, 37.3932], [23.0735, 36.7749], [22.6083, 36.7798], [22.0805, 37.0288], [21.5829, 37.0807], [21.5714, 37.541], [21.1448, 37.9192], [21.4036, 38.1967], [21.8248, 38.3281], [22.7996, 37.9814], [22.4219, 38.4386], [21.4724, 38.3214], [21.1133, 38.3849], [20.7795, 39.0086], [20.301, 39.3273], [20.0013, 39.7095], [20.6574, 40.1174], [21.0312, 40.6585], [20.9641, 40.8498], [21.5758, 40.8689], [21.9296, 41.1073], [22.7246, 41.1783], [22.9159, 41.3363], [23.635, 41.3869], [24.0558, 41.5272], [25.2512, 41.2436], [26.1355, 41.3856], [26.321, 41.7167], [26.6246, 41.4016], [26.0391, 40.7269]]], [[[23.4153, 38.9588], [24.0989, 38.6712], [23.7589, 38.4013], [23.2519, 38.8013], [23.4153, 38.9588]]]]\n    },\n    \"properties\": {\n      \"name\": \"Greece\",\n      \"id\": \"GR\"\n    },\n    \"id\": \"GR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[9.5907, 1.0318], [9.3861, 1.1392], [9.8069, 1.9276], [9.8007, 2.3044], [9.98, 2.1677], [11.3286, 2.1673], [11.3352, 0.9998], [9.5907, 1.0318]]]\n    },\n    \"properties\": {\n      \"name\": \"Equatorial Guinea\",\n      \"id\": \"GQ\"\n    },\n    \"id\": \"GQ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-15.0431, 10.9404], [-15.3931, 11.2174], [-15.5018, 11.7238], [-16.1384, 11.9174], [-16.7119, 12.3551], [-15.5748, 12.4904], [-15.1962, 12.68], [-13.7294, 12.6738], [-13.7327, 11.7358], [-14.6831, 11.5085], [-15.0431, 10.9404]]]\n    },\n    \"properties\": {\n      \"name\": \"Guinea-Bissau\",\n      \"id\": \"GW\"\n    },\n    \"id\": \"GW\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-16.7634, 13.064], [-16.8248, 13.3409], [-16.5623, 13.5873], [-15.5096, 13.5864], [-15.8343, 13.1563], [-16.6488, 13.1541], [-16.7634, 13.064]]]\n    },\n    \"properties\": {\n      \"name\": \"Gambia\",\n      \"id\": \"GM\"\n    },\n    \"id\": \"GM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-61.3272, 16.2302], [-61.5221, 16.228], [-61.529, 16.434], [-61.4065, 16.4682], [-61.3272, 16.2302]]]\n    },\n    \"properties\": {\n      \"name\": \"Guadeloupe\",\n      \"id\": \"GP\"\n    },\n    \"id\": \"GP\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-11.3894, 12.4043], [-11.3053, 12.0155], [-10.9333, 12.205], [-10.6774, 11.8996], [-10.2748, 12.2126], [-9.8207, 12.0426], [-9.043, 12.4025], [-8.8219, 11.6732], [-8.4075, 11.3865], [-8.2315, 10.4379], [-7.9907, 10.1627], [-8.1365, 10.022], [-8.137, 9.4955], [-7.8962, 9.416], [-7.951, 8.7866], [-7.8236, 8.4674], [-8.232, 7.5566], [-8.4863, 7.5584], [-8.7083, 7.6591], [-8.8896, 7.2627], [-9.1175, 7.2157], [-9.4598, 7.4425], [-9.369, 7.6396], [-9.5182, 8.3463], [-9.7683, 8.5345], [-10.2832, 8.4852], [-10.5005, 8.6876], [-10.6905, 9.3144], [-11.2056, 9.9776], [-11.911, 9.9931], [-12.5016, 9.8622], [-12.7559, 9.3734], [-13.2928, 9.0494], [-13.7005, 9.8511], [-14.4269, 10.2483], [-14.7758, 10.9315], [-15.0431, 10.9404], [-14.6831, 11.5085], [-13.7327, 11.7358], [-13.7294, 12.6738], [-13.0828, 12.6334], [-12.2912, 12.328], [-11.3894, 12.4043]]]\n    },\n    \"properties\": {\n      \"name\": \"Guinea\",\n      \"id\": \"GN\"\n    },\n    \"id\": \"GN\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-0.0686, 11.1157], [-0.0577, 10.6305], [0.3627, 10.2364], [0.2619, 9.4955], [0.5291, 9.3583], [0.4153, 8.6525], [0.688, 8.3041], [0.5837, 8.1456], [0.6348, 7.3537], [0.5256, 6.8508], [0.7369, 6.4526], [1.1874, 6.0895], [0.9499, 5.8103], [0.2597, 5.7575], [-0.7977, 5.2266], [-1.6384, 4.9807], [-2.0017, 4.7623], [-3.1139, 5.0885], [-3.0868, 5.1285], [-3.0191, 5.1307], [-2.7952, 5.1844], [-3.2007, 6.3483], [-3.2358, 6.8073], [-2.9858, 7.205], [-2.7899, 7.9321], [-2.5058, 8.2087], [-2.7466, 9.1098], [-2.6958, 9.4813], [-2.7865, 10.4019], [-2.9148, 10.5924], [-2.8298, 10.9985], [-0.7014, 10.9888], [-0.0686, 11.1157]]]\n    },\n    \"properties\": {\n      \"name\": \"Ghana\",\n      \"id\": \"GH\"\n    },\n    \"id\": \"GH\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-2.5124, 49.4946], [-2.5475, 49.4287], [-2.646, 49.4682], [-2.5124, 49.4946]]]\n    },\n    \"properties\": {\n      \"name\": \"Guernsey\",\n      \"id\": \"GG\"\n    },\n    \"id\": \"GG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[46.4298, 41.8907], [46.1821, 41.6573], [46.6189, 41.3439], [46.4577, 41.07], [45.281, 41.4495], [45.0013, 41.291], [43.4393, 41.1073], [42.7876, 41.5636], [42.4663, 41.4398], [41.5101, 41.5174], [41.7631, 41.9702], [41.4888, 42.6591], [40.8367, 43.0635], [39.9782, 43.42], [40.6481, 43.534], [41.5807, 43.2193], [42.4192, 43.2242], [43.7824, 42.747], [43.9573, 42.5664], [44.5059, 42.7488], [45.1602, 42.6751], [45.7275, 42.4749], [45.6388, 42.205], [46.4298, 41.8907]]]\n    },\n    \"properties\": {\n      \"name\": \"Georgia\",\n      \"id\": \"GE\"\n    },\n    \"id\": \"GE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[13.2937, 2.1615], [13.1627, 1.6479], [13.2741, 1.2409], [13.8512, 1.4189], [14.181, 1.3701], [14.4345, 0.8116], [14.0874, 0.5364], [13.8845, 0.1906], [13.8601, -0.2035], [14.4806, -0.6181], [14.3839, -1.8899], [14.0874, -2.4669], [13.7842, -2.1638], [13.465, -2.3955], [12.9918, -2.3134], [12.7934, -1.9316], [12.4321, -1.929], [12.4463, -2.3298], [11.5754, -2.3973], [11.5376, -2.8367], [11.934, -3.3188], [11.5043, -3.5203], [11.1301, -3.9163], [10.3476, -3.0129], [9.6245, -2.3671], [9.2658, -1.8251], [9.3306, -1.5348], [9.0647, -1.2982], [8.8215, -0.7082], [9.2969, -0.3514], [9.5907, 1.0318], [11.3352, 0.9998], [11.3286, 2.1673], [11.3485, 2.2996], [13.2204, 2.2565], [13.2937, 2.1615]]]\n    },\n    \"properties\": {\n      \"name\": \"Gabon\",\n      \"id\": \"GA\"\n    },\n    \"id\": \"GA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[5.7897, 49.5383], [6.3441, 49.4527], [6.7356, 49.1606], [7.4507, 49.1522], [8.1348, 48.9735], [7.5843, 48.0644], [7.6154, 47.5925], [7.0006, 47.3227], [6.06, 46.4282], [6.7583, 46.4158], [7.021, 45.9257], [7.1533, 45.401], [6.6277, 45.1178], [7.0308, 44.7166], [6.9673, 44.2802], [7.6771, 44.0831], [7.4929, 43.7671], [7.4387, 43.7507], [7.4143, 43.7711], [7.3779, 43.7316], [6.4941, 43.1692], [6.1159, 43.0724], [5.4066, 43.2286], [5.0599, 43.4444], [4.7119, 43.3733], [4.0527, 43.5931], [3.2591, 43.1931], [3.0518, 42.9152], [3.2116, 42.431], [2.0326, 42.3537], [1.7059, 42.5033], [1.4284, 42.5961], [-0.0411, 42.6893], [-1.2855, 43.0595], [-1.794, 43.4075], [-1.4848, 43.5638], [-1.2456, 44.5599], [-1.066, 45.8059], [-1.1464, 46.3115], [-1.7867, 46.5148], [-2.0188, 47.0377], [-3.1587, 47.6946], [-4.312, 47.8229], [-4.6291, 48.0857], [-4.3932, 48.3676], [-4.7208, 48.5398], [-3.2315, 48.8408], [-2.6924, 48.5367], [-2.4463, 48.6483], [-1.4375, 48.6415], [-1.8564, 49.6837], [-1.2587, 49.6802], [-1.1386, 49.3879], [-0.1636, 49.2969], [0.1869, 49.703], [1.2456, 49.9982], [1.5514, 50.2938], [1.5794, 50.7393], [1.9123, 50.9905], [2.5249, 51.0971], [2.8396, 50.7118], [4.1744, 50.2466], [4.8677, 49.788], [5.7897, 49.5383]]], [[[9.4802, 42.8056], [9.5508, 42.1296], [9.1863, 41.3847], [8.8077, 41.5885], [8.7132, 42.5499], [9.4802, 42.8056]]]]\n    },\n    \"properties\": {\n      \"name\": \"France\",\n      \"id\": \"FR\"\n    },\n    \"id\": \"FR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[158.315, 6.8135], [158.1836, 6.8011], [158.1348, 6.9449], [158.2946, 6.9511], [158.315, 6.8135]]]\n    },\n    \"properties\": {\n      \"name\": \"Federated States of Micronesia\",\n      \"id\": \"FM\"\n    },\n    \"id\": \"FM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-6.6311, 62.2279], [-7.0135, 62.094], [-7.1722, 62.2856], [-6.6311, 62.2279]]]\n    },\n    \"properties\": {\n      \"name\": \"Faroe Islands\",\n      \"id\": \"FO\"\n    },\n    \"id\": \"FO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-58.8501, -51.2698], [-58.4737, -51.509], [-57.9765, -51.3843], [-57.8382, -51.7092], [-58.6834, -51.9361], [-59.0681, -52.1731], [-59.5708, -51.9254], [-59.0596, -51.6857], [-58.8501, -51.2698]]], [[[-60.2863, -51.462], [-59.268, -51.4274], [-59.9214, -51.9693], [-60.2863, -51.462]]]]\n    },\n    \"properties\": {\n      \"name\": \"Falkland Islands\",\n      \"id\": \"FK\"\n    },\n    \"id\": \"FK\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[178.2804, -17.372], [178.5915, -17.6516], [178.6679, -18.0808], [177.8471, -18.2549], [177.3215, -18.0773], [177.2638, -17.8633], [177.6181, -17.4612], [178.2804, -17.372]]], [[[179.9991, -16.1686], [179.7483, -16.4464], [179.9281, -16.7443], [179.007, -16.9001], [178.805, -16.6315], [179.5517, -16.2498], [179.9991, -16.1686]]]]\n    },\n    \"properties\": {\n      \"name\": \"Fiji\",\n      \"id\": \"FJ\"\n    },\n    \"id\": \"FJ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[28.9657, 69.0219], [28.4708, 68.4883], [29.3439, 68.062], [29.9414, 67.5475], [29.0869, 66.9709], [29.9032, 66.0911], [29.604, 64.9685], [30.0728, 64.7649], [30.1083, 64.3661], [30.5038, 64.0205], [30.0555, 63.689], [31.1807, 63.2082], [31.5341, 62.8855], [31.2855, 62.5679], [29.6902, 61.5461], [27.7978, 60.5362], [25.6565, 60.3331], [23.7216, 59.9656], [22.7934, 60.0768], [22.5759, 60.3591], [21.436, 60.5964], [21.3605, 60.9675], [21.606, 61.5916], [21.2562, 61.9897], [21.1035, 62.6229], [22.2434, 63.4379], [23.2488, 63.8963], [24.5579, 64.8009], [25.3729, 65.0095], [25.348, 65.4792], [24.1557, 65.8052], [23.7012, 66.4808], [23.9884, 66.8106], [23.4681, 67.45], [23.639, 67.9543], [22.7823, 68.3911], [21.9975, 68.5207], [20.6223, 69.037], [21.622, 69.2707], [22.4108, 68.7198], [23.8539, 68.8059], [24.9414, 68.5933], [25.7484, 68.9901], [26.0116, 69.6526], [26.5257, 69.915], [27.8897, 70.0617], [29.1415, 69.6715], [28.9657, 69.0219]]]\n    },\n    \"properties\": {\n      \"name\": \"Finland\",\n      \"id\": \"FI\"\n    },\n    \"id\": \"FI\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[42.3784, 12.4665], [41.7667, 11.5889], [41.7982, 10.9803], [42.5577, 11.0806], [42.9226, 10.9994], [42.6594, 10.6212], [42.8418, 10.2031], [43.1818, 9.8799], [43.4828, 9.3796], [44.023, 8.9859], [46.9784, 7.9969], [47.9781, 7.9969], [45.9348, 5.9972], [44.9405, 4.9119], [44.0283, 4.9509], [43.5383, 4.8404], [43.0158, 4.5634], [42.7916, 4.2922], [42.0241, 4.1377], [41.8839, 3.9779], [41.2207, 3.9437], [40.7653, 4.2731], [39.8424, 3.8514], [39.4944, 3.4559], [38.0864, 3.649], [36.9056, 4.4116], [36.0818, 4.4498], [35.763, 4.808], [35.7448, 5.3442], [35.2681, 5.4925], [35.0821, 5.6731], [34.7106, 6.6604], [34.0643, 7.2259], [33.6661, 7.6711], [33.2262, 7.7608], [33.0127, 7.9516], [33.2342, 8.3964], [33.9533, 8.4435], [34.0945, 8.5824], [34.078, 9.4613], [34.2915, 10.1249], [34.2756, 10.528], [34.5716, 10.88], [34.9312, 10.8649], [35.1123, 11.8166], [35.5961, 12.5375], [36.1075, 12.7266], [36.2123, 13.2712], [36.3907, 13.6259], [36.5243, 14.2567], [37.0246, 14.2718], [37.2572, 14.4538], [37.571, 14.1493], [37.8844, 14.8524], [38.5045, 14.4245], [39.074, 14.6282], [40.2215, 14.4311], [40.7697, 14.1444], [41.3627, 13.4998], [41.7649, 13.1838], [42.3784, 12.4665]]]\n    },\n    \"properties\": {\n      \"name\": \"Ethiopia\",\n      \"id\": \"ET\"\n    },\n    \"id\": \"ET\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[28.0127, 59.4842], [27.4272, 58.7331], [27.753, 57.8411], [27.3517, 57.5282], [26.5328, 57.5311], [25.9912, 57.8382], [25.111, 58.0635], [24.3226, 57.8706], [24.529, 58.3543], [23.7678, 58.3609], [23.5094, 58.6585], [23.4943, 59.1957], [24.3803, 59.4726], [25.5091, 59.6389], [26.9749, 59.4507], [28.0127, 59.4842]]], [[[22.6172, 58.6213], [23.2928, 58.4834], [22.1875, 58.1543], [22.0814, 58.4781], [22.6172, 58.6213]]]]\n    },\n    \"properties\": {\n      \"name\": \"Estonia\",\n      \"id\": \"EE\"\n    },\n    \"id\": \"EE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-1.794, 43.4075], [-1.2855, 43.0595], [-0.0411, 42.6893], [1.4284, 42.5961], [1.4861, 42.4345], [1.7059, 42.5033], [2.0326, 42.3537], [3.2116, 42.431], [3.248, 41.9445], [2.0827, 41.2875], [1.0329, 41.062], [-0.3269, 39.5199], [-0.2049, 39.0627], [0.2015, 38.7591], [-0.3813, 38.4355], [-0.6468, 38.1518], [-0.8221, 37.581], [-1.3275, 37.561], [-1.7975, 37.233], [-2.1116, 36.7767], [-4.3668, 36.7181], [-4.6742, 36.5063], [-5.1716, 36.4238], [-5.6254, 36.026], [-6.0407, 36.1885], [-6.4924, 36.9547], [-6.8845, 37.1944], [-7.4061, 37.1793], [-7.5036, 37.5854], [-7.1855, 38.0062], [-7.3431, 38.4572], [-7.0461, 38.9069], [-7.4452, 39.5363], [-7.0368, 39.7139], [-7.0146, 40.2084], [-6.8102, 40.3429], [-6.9285, 41.0092], [-6.2125, 41.5321], [-6.6182, 41.9422], [-7.4037, 41.8335], [-7.9208, 41.8836], [-8.2131, 42.1336], [-8.7771, 41.9409], [-8.691, 42.2743], [-9.2352, 42.977], [-8.8736, 43.3343], [-7.6982, 43.7644], [-7.2621, 43.5948], [-5.6658, 43.5824], [-4.523, 43.416], [-3.6046, 43.5194], [-3.0455, 43.3716], [-2.3371, 43.3281], [-1.794, 43.4075]]], [[[3.1454, 39.7902], [3.4619, 39.6979], [3.0726, 39.3011], [2.3713, 39.6131], [2.785, 39.8546], [3.1454, 39.7902]]], [[[-16.3346, 28.38], [-16.6579, 28.0071], [-16.9054, 28.3396], [-16.3346, 28.38]]]]\n    },\n    \"properties\": {\n      \"name\": \"Spain\",\n      \"id\": \"ES\"\n    },\n    \"id\": \"ES\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[38.6093, 18.0049], [38.9116, 17.427], [39.1424, 16.7292], [39.2991, 15.9213], [39.5064, 15.532], [39.8637, 15.4703], [40.2042, 15.014], [41.1763, 14.6202], [41.6584, 13.9832], [42.2452, 13.5877], [42.7961, 12.8642], [43.1166, 12.7084], [42.67, 12.3764], [42.3784, 12.4665], [41.7649, 13.1838], [41.3627, 13.4998], [40.7697, 14.1444], [40.2215, 14.4311], [39.074, 14.6282], [38.5045, 14.4245], [37.8844, 14.8524], [37.571, 14.1493], [37.2572, 14.4538], [37.0246, 14.2718], [36.5243, 14.2567], [36.4267, 15.132], [36.9136, 16.2964], [37.0091, 17.059], [37.4112, 17.0616], [37.7823, 17.458], [38.2537, 17.5845], [38.6093, 18.0049]]]\n    },\n    \"properties\": {\n      \"name\": \"Eritrea\",\n      \"id\": \"ER\"\n    },\n    \"id\": \"ER\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-6.218, 54.0887], [-7.3553, 54.1213], [-8.1183, 54.4143], [-7.2186, 55.0921], [-6.1293, 55.2175], [-5.4703, 54.5002], [-5.6068, 54.2727], [-6.218, 54.0887]]], [[[-3.1097, 58.5154], [-3.9901, 57.959], [-3.4029, 57.7082], [-2.0741, 57.7024], [-1.778, 57.4938], [-2.6527, 56.3183], [-3.1783, 56.0802], [-2.1471, 55.9031], [-1.6555, 55.5704], [-1.2917, 54.7738], [-0.6714, 54.5039], [-0.2055, 54.0217], [0.5589, 52.967], [1.6566, 52.7537], [1.5589, 52.0869], [0.9553, 51.8077], [0.6867, 51.3865], [1.4151, 51.3632], [0.9601, 50.9259], [0.2051, 50.763], [-1.5168, 50.7475], [-2.5477, 50.6163], [-3.4047, 50.6323], [-3.7933, 50.2293], [-4.1726, 50.3908], [-5.3422, 50.2461], [-4.583, 50.7764], [-4.1881, 51.1885], [-3.1359, 51.2049], [-4.3863, 51.7412], [-4.9023, 51.6262], [-5.0881, 51.9959], [-4.3832, 52.1973], [-3.9804, 52.5417], [-4.1111, 53.2189], [-3.0646, 53.4268], [-2.925, 53.7327], [-3.958, 54.7809], [-5.1354, 54.8575], [-4.7212, 55.421], [-5.2457, 55.9293], [-5.6097, 56.0553], [-5.392, 56.5148], [-5.9368, 56.6058], [-5.562, 57.2328], [-5.8181, 57.4361], [-5.3382, 58.2386], [-4.7155, 58.5101], [-3.1097, 58.5154]]]]\n    },\n    \"properties\": {\n      \"name\": \"United Kingdom\",\n      \"id\": \"GB\"\n    },\n    \"id\": \"GB\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[34.1983, 31.3226], [34.2454, 31.2085], [34.9041, 29.4773], [34.7363, 29.2705], [34.3999, 28.016], [34.2201, 27.7643], [33.7602, 28.0475], [33.2475, 28.5678], [33.0757, 29.0729], [32.7215, 29.5217], [32.6318, 28.9921], [32.8982, 28.5651], [33.5471, 27.8984], [33.5498, 27.6072], [33.8929, 27.0497], [33.9591, 26.6488], [34.565, 25.6913], [35.194, 24.4751], [35.6246, 24.0658], [35.5229, 23.4426], [35.6978, 22.9463], [36.2296, 22.6289], [36.8714, 21.9968], [34.2467, 21.9964], [32.6061, 21.9959], [30.3285, 21.9951], [27.2723, 21.9955], [24.9805, 21.9959], [24.9805, 24.2416], [24.9805, 25.8134], [24.9805, 27.8345], [24.9805, 29.1817], [24.7115, 30.1316], [24.9738, 30.7766], [24.8526, 31.335], [25.1505, 31.655], [25.3822, 31.513], [25.8931, 31.6209], [27.2479, 31.3781], [27.9674, 31.0975], [28.5147, 31.0505], [29.0723, 30.8303], [29.5916, 31.0114], [30.3951, 31.4575], [30.7005, 31.4038], [31.1941, 31.5876], [32.1018, 31.0926], [33.1299, 31.1681], [33.6665, 31.1304], [34.1983, 31.3226]]]\n    },\n    \"properties\": {\n      \"name\": \"Egypt\",\n      \"id\": \"EG\"\n    },\n    \"id\": \"EG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-91.2722, 0.0251], [-90.7997, -0.7522], [-90.9055, -0.9404], [-91.3692, -0.287], [-91.2722, 0.0251]]], [[[-75.2845, -0.1063], [-75.2632, -0.5555], [-75.5706, -1.5312], [-76.0898, -2.1331], [-76.679, -2.5628], [-77.8607, -2.9819], [-78.3472, -3.4311], [-78.4198, -3.7769], [-79.0763, -4.9905], [-79.3308, -4.9279], [-79.6385, -4.4547], [-80.1396, -4.2962], [-80.4885, -4.3939], [-80.51, -4.0694], [-80.1793, -3.8776], [-80.3247, -3.388], [-79.9217, -3.0902], [-79.7299, -2.5793], [-80.4501, -2.6259], [-80.9628, -2.1891], [-80.7704, -2.0768], [-80.8015, -1.3834], [-80.9024, -1.0789], [-80.554, -0.8481], [-80.4823, -0.3682], [-80.1334, -0.006], [-80.0251, 0.4104], [-80.0883, 0.7846], [-79.7412, 0.9799], [-78.8996, 1.2063], [-78.8597, 1.4553], [-78.3121, 1.046], [-77.4676, 0.6363], [-77.4228, 0.425], [-76.4946, 0.2355], [-76.311, 0.4485], [-75.8798, 0.1511], [-75.2845, -0.1063]]]]\n    },\n    \"properties\": {\n      \"name\": \"Ecuador\",\n      \"id\": \"EC\"\n    },\n    \"id\": \"EC\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[8.5764, 36.9374], [8.2306, 36.5454], [8.2457, 35.8707], [8.3944, 35.204], [8.2457, 34.7339], [7.5138, 34.0805], [7.5, 33.8323], [7.7628, 33.2331], [8.2111, 32.9268], [8.3332, 32.5437], [9.0439, 32.0723], [9.5188, 30.2293], [9.3102, 30.1152], [9.6724, 29.567], [9.8424, 28.9668], [9.9161, 27.7856], [9.7474, 27.3306], [9.8593, 26.5521], [9.4913, 26.3337], [9.4482, 26.0673], [10.0009, 25.3322], [10.2557, 24.5909], [10.6863, 24.5514], [11.5075, 24.3144], [11.9678, 23.518], [9.3785, 21.9915], [7.4818, 20.8729], [5.8367, 19.4791], [4.2276, 19.1426], [3.4007, 18.9886], [3.1059, 19.1502], [3.2559, 19.4107], [3.2036, 19.7898], [2.4063, 20.0637], [2.2195, 20.2479], [1.6855, 20.3784], [1.1657, 20.8174], [1.1457, 21.1024], [-1.2931, 22.6964], [-3.2579, 23.981], [-4.8227, 24.9958], [-6.2387, 25.848], [-8.6834, 27.2858], [-8.6834, 27.6565], [-8.6599, 28.7187], [-7.6851, 29.3495], [-7.095, 29.6251], [-6.6353, 29.5687], [-6.5008, 29.8093], [-5.4488, 29.9567], [-4.9683, 30.4654], [-4.3228, 30.6989], [-3.8335, 31.1978], [-3.8268, 31.6617], [-3.0174, 31.8344], [-2.9308, 32.0426], [-2.4485, 32.13], [-1.2753, 32.0892], [-1.0656, 32.4683], [-1.5099, 32.8775], [-1.6792, 33.3187], [-1.7955, 34.7521], [-2.2197, 35.1041], [-1.9132, 35.0943], [-0.9175, 35.6683], [0.0479, 35.9004], [0.5149, 36.2618], [1.2571, 36.5197], [2.5932, 36.6009], [2.9727, 36.7847], [3.7788, 36.8961], [4.7581, 36.8965], [5.1958, 36.6768], [6.0649, 36.8641], [6.4866, 37.0856], [6.9274, 36.9196], [7.6079, 36.9999], [7.9106, 36.8566], [8.5764, 36.9374]]]\n    },\n    \"properties\": {\n      \"name\": \"Algeria\",\n      \"id\": \"DZ\"\n    },\n    \"id\": \"DZ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-71.7683, 18.0391], [-71.6571, 19.1306], [-71.7791, 19.7183], [-71.5578, 19.8954], [-70.9542, 19.9141], [-70.1294, 19.6362], [-69.7394, 19.2993], [-68.6848, 18.9047], [-68.3594, 18.538], [-68.6588, 18.222], [-68.9349, 18.408], [-69.7707, 18.4435], [-70.1831, 18.2517], [-71.0278, 18.273], [-71.3958, 17.6462], [-71.7683, 18.0391]]]\n    },\n    \"properties\": {\n      \"name\": \"Dominican Republic\",\n      \"id\": \"DO\"\n    },\n    \"id\": \"DO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[9.7399, 54.8255], [8.6701, 54.9034], [8.6159, 55.4181], [8.1321, 55.5999], [8.1641, 56.6069], [8.6186, 57.1114], [9.5543, 57.2325], [9.9623, 57.581], [10.5371, 57.4485], [10.2828, 56.6204], [10.1829, 55.8651], [9.5912, 55.4932], [9.7399, 54.8255]]], [[[12.5688, 55.785], [11.6539, 55.1869], [11.2864, 55.2044], [10.9788, 55.7215], [12.219, 56.1186], [12.5688, 55.785]]], [[[10.645, 55.6099], [10.7852, 55.1334], [9.9889, 55.1631], [9.8606, 55.5156], [10.645, 55.6099]]]]\n    },\n    \"properties\": {\n      \"name\": \"Denmark\",\n      \"id\": \"DK\"\n    },\n    \"id\": \"DK\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-61.2817, 15.2492], [-61.481, 15.5253], [-61.3201, 15.5853], [-61.2817, 15.2492]]]\n    },\n    \"properties\": {\n      \"name\": \"Dominica\",\n      \"id\": \"DM\"\n    },\n    \"id\": \"DM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[43.2462, 11.4997], [42.9226, 10.9994], [42.5577, 11.0806], [41.7982, 10.9803], [41.7667, 11.5889], [42.3784, 12.4665], [42.67, 12.3764], [43.1166, 12.7084], [43.41, 12.1899], [43.2719, 11.9698], [42.7992, 11.7394], [43.2462, 11.4997]]]\n    },\n    \"properties\": {\n      \"name\": \"Djibouti\",\n      \"id\": \"DJ\"\n    },\n    \"id\": \"DJ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[9.7399, 54.8255], [10.3604, 54.4382], [11.3996, 53.9446], [12.1111, 54.1684], [12.5755, 54.4673], [13.0287, 54.4109], [13.8654, 53.8534], [14.2587, 53.7296], [14.4145, 53.2835], [14.1286, 52.8782], [14.6196, 52.5284], [14.7527, 52.0818], [14.6018, 51.8324], [15.0164, 51.2527], [14.8096, 50.8589], [14.3692, 50.8986], [12.4525, 50.3498], [12.2763, 50.0424], [12.6318, 49.4613], [13.8148, 48.7669], [13.4095, 48.3942], [12.8143, 48.1607], [12.686, 47.6693], [11.717, 47.5837], [11.2979, 47.4247], [10.4306, 47.541], [10.3129, 47.3133], [9.5241, 47.5242], [8.6177, 47.7661], [7.6154, 47.5925], [7.5843, 48.0644], [8.1348, 48.9735], [7.4507, 49.1522], [6.7356, 49.1606], [6.3441, 49.4527], [6.4875, 49.7985], [6.1164, 50.1209], [6.3645, 50.3163], [5.9939, 50.7504], [5.8949, 50.9843], [6.1932, 51.4888], [5.9486, 51.7625], [6.7418, 51.9109], [7.0352, 52.3801], [7.1973, 53.2823], [7.2852, 53.6814], [8.0091, 53.6907], [8.5387, 53.5569], [8.8978, 53.8357], [8.9573, 54.5383], [8.6701, 54.9034], [9.7399, 54.8255]]]\n    },\n    \"properties\": {\n      \"name\": \"Germany\",\n      \"id\": \"DE\"\n    },\n    \"id\": \"DE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[14.8096, 50.8589], [16.0072, 50.6117], [16.6792, 50.0974], [17.152, 50.3784], [17.8746, 49.9722], [18.5622, 49.8792], [18.8321, 49.5108], [18.161, 49.2574], [17.7583, 48.888], [17.1884, 48.861], [16.9531, 48.5988], [16.4777, 48.8001], [16.0573, 48.7549], [14.972, 48.9839], [14.6915, 48.5993], [14.0492, 48.6024], [13.8148, 48.7669], [12.6318, 49.4613], [12.2763, 50.0424], [12.4525, 50.3498], [14.3692, 50.8986], [14.8096, 50.8589]]]\n    },\n    \"properties\": {\n      \"name\": \"Czechia\",\n      \"id\": \"CZ\"\n    },\n    \"id\": \"CZ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[34.4633, 35.5937], [33.9418, 35.2918], [34.0501, 34.9882], [32.9417, 34.5758], [32.4489, 34.7294], [32.3171, 34.9532], [32.9417, 35.3904], [33.4588, 35.3358], [34.4633, 35.5937]]]\n    },\n    \"properties\": {\n      \"name\": \"Cyprus\",\n      \"id\": \"CY\"\n    },\n    \"id\": \"CY\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-81.3696, 19.349], [-81.1306, 19.3468], [-81.3037, 19.2718], [-81.3696, 19.349]]]\n    },\n    \"properties\": {\n      \"name\": \"Cayman Islands\",\n      \"id\": \"KY\"\n    },\n    \"id\": \"KY\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[105.7253, -10.493], [105.6969, -10.564], [105.5842, -10.5125], [105.7053, -10.4308], [105.7253, -10.493]]]\n    },\n    \"properties\": {\n      \"name\": \"Christmas Island\",\n      \"id\": \"CX\"\n    },\n    \"id\": \"CX\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-68.7511, 12.0599], [-68.8033, 12.0457], [-68.995, 12.142], [-69.154, 12.2982], [-69.0767, 12.3422], [-69.0132, 12.2312], [-68.8275, 12.1584], [-68.7511, 12.0599]]]\n    },\n    \"properties\": {\n      \"name\": \"Curaçao\",\n      \"id\": \"CW\"\n    },\n    \"id\": \"CW\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-82.5617, 21.5716], [-82.8531, 21.4437], [-83.0826, 21.7913], [-82.7146, 21.8903], [-82.5617, 21.5716]]], [[[-81.8375, 23.1629], [-81.1785, 23.0595], [-80.6501, 23.103], [-80.0752, 22.9423], [-79.183, 22.3879], [-78.6865, 22.367], [-77.8651, 21.9005], [-77.4973, 21.8717], [-76.6475, 21.2844], [-75.7229, 21.1108], [-75.6428, 20.7335], [-74.8826, 20.6505], [-74.2529, 20.0797], [-75.1165, 19.9012], [-76.1586, 19.9896], [-77.7151, 19.8555], [-77.2135, 20.3003], [-77.2297, 20.6438], [-77.9974, 20.7153], [-78.4908, 21.0536], [-78.6366, 21.5157], [-79.2745, 21.5627], [-80.2313, 21.8721], [-80.4992, 22.0634], [-80.9619, 22.0528], [-81.8162, 22.2001], [-81.9034, 22.6791], [-82.7382, 22.6893], [-83.3796, 22.2228], [-84.3264, 22.0745], [-84.3612, 22.379], [-84.045, 22.6662], [-83.2577, 22.9676], [-82.1014, 23.1905], [-81.8375, 23.1629]]]]\n    },\n    \"properties\": {\n      \"name\": \"Cuba\",\n      \"id\": \"CU\"\n    },\n    \"id\": \"CU\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-83.6419, 10.9173], [-83.4482, 10.4658], [-82.7783, 9.6695], [-82.5635, 9.5767], [-82.9399, 9.4493], [-82.917, 8.7404], [-82.9976, 8.3676], [-82.8793, 8.0706], [-83.1625, 8.5882], [-83.734, 8.6144], [-83.6373, 9.0352], [-83.8956, 9.2762], [-84.6589, 9.6469], [-85.1145, 9.5816], [-85.6248, 9.9025], [-85.8305, 10.3979], [-85.6672, 10.7451], [-85.7444, 11.062], [-85.6215, 11.1845], [-84.9092, 10.9453], [-84.3484, 10.9799], [-84.1684, 10.7806], [-83.6419, 10.9173]]]\n    },\n    \"properties\": {\n      \"name\": \"Costa Rica\",\n      \"id\": \"CR\"\n    },\n    \"id\": \"CR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-23.4442, 15.0078], [-23.7054, 14.9611], [-23.7007, 15.2714], [-23.4442, 15.0078]]]\n    },\n    \"properties\": {\n      \"name\": \"Cape Verde\",\n      \"id\": \"CV\"\n    },\n    \"id\": \"CV\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[43.4659, -11.9014], [43.2266, -11.7518], [43.3793, -11.6142], [43.4659, -11.9014]]]\n    },\n    \"properties\": {\n      \"name\": \"Comoros\",\n      \"id\": \"KM\"\n    },\n    \"id\": \"KM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-71.3197, 11.8619], [-71.958, 11.6666], [-72.2485, 11.1965], [-72.6902, 10.8361], [-72.8693, 10.4911], [-73.0065, 9.7894], [-73.3563, 9.2269], [-72.7963, 9.1089], [-72.6654, 8.6277], [-72.4166, 8.3818], [-72.443, 7.4549], [-72.0843, 7.0967], [-71.0134, 6.9946], [-70.6552, 7.0829], [-70.095, 6.9378], [-69.4392, 6.1348], [-68.4717, 6.1565], [-67.8591, 6.2897], [-67.4394, 6.0256], [-67.8249, 5.2705], [-67.8553, 4.507], [-67.6616, 3.8643], [-67.3111, 3.416], [-67.8347, 2.8926], [-67.2108, 2.3901], [-66.8761, 1.2231], [-67.352, 2.0861], [-67.8152, 1.79], [-68.1765, 1.7198], [-69.8486, 1.7087], [-69.8522, 1.0593], [-69.3615, 1.0642], [-69.1633, 0.864], [-70.0539, 0.5786], [-70.0706, -0.1387], [-69.6675, -0.4823], [-69.4003, -1.1948], [-69.6691, -2.6676], [-69.9658, -4.2359], [-70.3396, -3.8142], [-70.7351, -3.7818], [-70.0741, -2.7502], [-70.9146, -2.2184], [-71.3969, -2.3342], [-71.7525, -2.1527], [-72.3957, -2.4288], [-73.1545, -2.2783], [-73.1969, -1.8304], [-73.4963, -1.6932], [-73.6643, -1.2489], [-74.2465, -0.9706], [-74.4178, -0.5809], [-74.8018, -0.2], [-75.2845, -0.1063], [-75.8798, 0.1511], [-76.311, 0.4485], [-76.4946, 0.2355], [-77.4228, 0.425], [-77.4676, 0.6363], [-78.3121, 1.046], [-78.8597, 1.4553], [-78.5769, 1.774], [-78.6171, 2.3067], [-78.1201, 2.4882], [-77.67, 2.8788], [-77.2428, 3.5855], [-77.1666, 3.8621], [-77.4272, 4.0605], [-77.2863, 4.7219], [-77.4017, 5.4161], [-77.2492, 5.7801], [-77.4694, 6.177], [-77.36, 6.5046], [-77.9011, 7.2294], [-77.7439, 7.537], [-77.3509, 7.7057], [-77.2124, 8.0338], [-77.3742, 8.6583], [-76.8519, 8.0906], [-76.8879, 8.6197], [-76.2769, 8.989], [-76.1355, 9.2656], [-75.6394, 9.4502], [-75.671, 10.1964], [-75.4459, 10.611], [-74.8446, 11.1095], [-74.4542, 10.9892], [-74.0592, 11.3408], [-73.3134, 11.2959], [-72.722, 11.7123], [-72.275, 11.8894], [-72.1358, 12.1886], [-71.7145, 12.4199], [-71.2622, 12.3351], [-71.3197, 11.8619]]]\n    },\n    \"properties\": {\n      \"name\": \"Colombia\",\n      \"id\": \"CO\"\n    },\n    \"id\": \"CO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-159.7406, -21.2494], [-159.8395, -21.2383], [-159.832, -21.2005], [-159.7683, -21.1885], [-159.7406, -21.2494]]]\n    },\n    \"properties\": {\n      \"name\": \"Cook Islands\",\n      \"id\": \"CK\"\n    },\n    \"id\": \"CK\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[18.6102, 3.4785], [18.4908, 2.9246], [18.0722, 2.0133], [18.058, 1.5347], [17.9026, 1.1179], [17.8875, 0.2341], [17.7242, -0.2777], [17.753, -0.5489], [17.2789, -0.9994], [16.8799, -1.2258], [16.5407, -1.8402], [16.2154, -2.178], [16.2171, -3.0302], [16.1466, -3.4639], [15.8722, -3.9345], [15.6001, -4.0308], [14.7794, -4.8458], [14.4105, -4.8311], [14.3581, -4.2993], [13.4149, -4.8373], [13.0726, -4.6349], [12.8809, -4.4454], [12.3846, -4.6189], [12.0184, -5.0042], [11.7773, -4.5657], [11.1301, -3.9163], [11.5043, -3.5203], [11.934, -3.3188], [11.5376, -2.8367], [11.5754, -2.3973], [12.4463, -2.3298], [12.4321, -1.929], [12.7934, -1.9316], [12.9918, -2.3134], [13.465, -2.3955], [13.7842, -2.1638], [14.0874, -2.4669], [14.3839, -1.8899], [14.4806, -0.6181], [13.8601, -0.2035], [13.8845, 0.1906], [14.0874, 0.5364], [14.4345, 0.8116], [14.181, 1.3701], [13.8512, 1.4189], [13.2741, 1.2409], [13.1627, 1.6479], [13.2937, 2.1615], [14.4842, 2.1549], [14.9023, 2.0124], [15.7417, 1.9152], [16.0596, 1.6763], [16.1834, 2.2703], [16.4684, 2.8318], [16.6735, 3.5354], [17.4379, 3.6845], [18.161, 3.4998], [18.6102, 3.4785]]]\n    },\n    \"properties\": {\n      \"name\": \"Republic of Congo\",\n      \"id\": \"CG\"\n    },\n    \"id\": \"CG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[27.4032, 5.1094], [27.7881, 4.6446], [28.192, 4.3503], [28.7269, 4.5048], [29.1513, 4.3881], [29.6768, 4.5869], [30.1949, 3.9819], [30.5083, 3.8359], [30.8385, 3.4905], [30.7284, 2.4554], [31.1763, 2.2703], [31.2527, 2.0448], [30.9424, 1.683], [29.9427, 0.8192], [29.9343, 0.4991], [29.7177, 0.0983], [29.5619, -0.9772], [29.577, -1.3878], [29.1295, -1.8601], [29.1064, -2.2335], [28.8765, -2.4004], [29.0146, -2.7204], [29.2245, -3.0533], [29.2232, -3.9109], [29.4034, -4.4494], [29.3426, -4.9829], [29.5943, -5.651], [29.4802, -6.0252], [29.7097, -6.6169], [30.3134, -7.2037], [30.7511, -8.1936], [28.9724, -8.4648], [28.9178, -8.7005], [28.4007, -9.2248], [28.6301, -9.8311], [28.639, -10.6692], [28.3572, -11.4828], [28.4823, -11.8122], [29.0643, -12.3489], [29.4274, -12.4314], [29.7954, -12.1553], [29.7954, -13.3929], [29.5543, -13.2491], [29.0141, -13.3689], [28.3576, -12.482], [27.5333, -12.1953], [27.0459, -11.616], [26.9496, -11.8988], [26.5962, -11.972], [26.0258, -11.8903], [25.3493, -11.6231], [25.1847, -11.2431], [24.5184, -11.4384], [24.32, -11.0718], [23.9666, -10.8716], [23.8339, -11.0136], [22.5613, -11.0558], [22.3069, -10.6914], [22.1977, -10.0406], [21.8133, -9.4689], [21.9056, -8.6934], [21.7511, -7.3054], [20.6077, -7.2778], [20.4821, -6.9161], [19.8753, -6.9862], [19.5277, -7.1447], [19.3408, -7.9668], [18.6532, -7.9361], [17.536, -8.076], [17.1551, -7.4612], [16.7094, -6.4717], [16.7179, -6.2414], [16.3152, -5.8658], [14.3985, -5.8925], [13.0682, -5.8649], [12.4117, -5.9866], [12.2137, -5.7589], [12.5035, -5.6958], [12.5222, -5.1489], [12.8298, -4.7366], [13.0726, -4.6349], [13.4149, -4.8373], [14.3581, -4.2993], [14.4105, -4.8311], [14.7794, -4.8458], [15.6001, -4.0308], [15.8722, -3.9345], [16.1466, -3.4639], [16.2171, -3.0302], [16.2154, -2.178], [16.5407, -1.8402], [16.8799, -1.2258], [17.2789, -0.9994], [17.753, -0.5489], [17.7242, -0.2777], [17.8875, 0.2341], [17.9026, 1.1179], [18.058, 1.5347], [18.0722, 2.0133], [18.4908, 2.9246], [18.6102, 3.4785], [18.5676, 4.2576], [19.0687, 4.8915], [19.5011, 5.1276], [19.8065, 5.0894], [20.2264, 4.8297], [20.558, 4.4627], [21.5376, 4.2447], [22.4223, 4.1351], [22.7557, 4.6469], [23.4171, 4.6633], [24.32, 4.994], [24.7656, 4.9301], [25.2495, 5.0246], [25.5251, 5.3123], [26.8222, 5.0623], [27.1151, 5.1977], [27.4032, 5.1094]]]\n    },\n    \"properties\": {\n      \"name\": \"Democratic Republic of Congo\",\n      \"id\": \"CD\"\n    },\n    \"id\": \"CD\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[15.4803, 7.5237], [15.2459, 7.2636], [14.7394, 6.2799], [14.6169, 5.8649], [14.7088, 4.6655], [15.0226, 4.3583], [15.1287, 3.827], [15.775, 3.127], [16.0636, 2.9086], [16.1834, 2.2703], [16.0596, 1.6763], [15.7417, 1.9152], [14.9023, 2.0124], [14.4842, 2.1549], [13.2937, 2.1615], [13.2204, 2.2565], [11.3485, 2.2996], [11.3286, 2.1673], [9.98, 2.1677], [9.8007, 2.3044], [9.8762, 3.3099], [9.4252, 3.9224], [8.9999, 4.0916], [8.9027, 4.4351], [8.556, 4.7552], [8.801, 5.1973], [9.0603, 6.0092], [10.1438, 6.9964], [10.6064, 7.063], [11.0325, 6.6981], [11.1532, 6.438], [11.5518, 6.6972], [11.7676, 7.272], [12.0162, 7.5899], [12.4037, 8.5957], [12.8067, 8.8865], [12.9297, 9.4263], [13.1756, 9.5394], [13.2697, 10.0362], [13.5352, 10.6052], [13.892, 11.1401], [14.5597, 11.4921], [14.6271, 12.1087], [14.1974, 12.3839], [14.0638, 13.0786], [14.5162, 12.9796], [14.7612, 12.6556], [15.0812, 11.8455], [15.0297, 11.1135], [15.1323, 10.6483], [15.5411, 9.9603], [14.2432, 9.9798], [13.9773, 9.6917], [14.3324, 9.2034], [15.1163, 8.5571], [15.443, 7.8518], [15.4803, 7.5237]]]\n    },\n    \"properties\": {\n      \"name\": \"Cameroon\",\n      \"id\": \"CM\"\n    },\n    \"id\": \"CM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-5.5236, 10.4259], [-5.0999, 10.2417], [-4.9698, 9.9301], [-4.6258, 9.7134], [-3.8776, 9.895], [-3.2235, 9.8954], [-2.6958, 9.4813], [-2.7466, 9.1098], [-2.5058, 8.2087], [-2.7899, 7.9321], [-2.9858, 7.205], [-3.2358, 6.8073], [-3.2007, 6.3483], [-2.7952, 5.1844], [-3.0191, 5.1307], [-4.0372, 5.2301], [-5.5646, 5.0894], [-6.9229, 4.6384], [-7.5451, 4.3512], [-7.5688, 5.0805], [-7.4299, 5.3247], [-7.4543, 5.8414], [-7.7965, 5.975], [-7.8886, 6.2347], [-8.6035, 6.5077], [-8.3325, 6.8015], [-8.2966, 7.0741], [-8.4863, 7.5584], [-8.232, 7.5566], [-7.8236, 8.4674], [-7.951, 8.7866], [-7.8962, 9.416], [-8.137, 9.4955], [-8.1365, 10.022], [-7.9907, 10.1627], [-7.6611, 10.4272], [-7.1049, 10.2035], [-6.6932, 10.3495], [-6.2611, 10.7242], [-6.0345, 10.1946], [-5.5236, 10.4259]]]\n    },\n    \"properties\": {\n      \"name\": \"Côte d'Ivoire\",\n      \"id\": \"CI\"\n    },\n    \"id\": \"CI\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[110.8887, 19.9918], [111.0138, 19.6553], [110.5722, 19.1719], [110.4514, 18.748], [109.5193, 18.2184], [108.7016, 18.5354], [108.6936, 19.3384], [109.6511, 19.9842], [110.5886, 20.0726], [110.8887, 19.9918]]], [[[130.5269, 42.5353], [130.2406, 42.8917], [129.8983, 42.9983], [129.7199, 42.4749], [129.3137, 42.4137], [128.9236, 42.0381], [128.0451, 41.9875], [128.291, 41.5627], [128.1112, 41.3891], [127.1795, 41.5312], [126.9034, 41.7811], [125.989, 40.9049], [124.8895, 40.4596], [124.3621, 40.0042], [124.1056, 39.8409], [123.3483, 39.7632], [122.3349, 39.3663], [121.6499, 38.8652], [121.7853, 39.401], [121.5177, 39.6389], [122.2749, 40.5418], [121.859, 40.8423], [121.1745, 40.9013], [120.479, 40.231], [119.5912, 39.9026], [118.9125, 39.1666], [118.2977, 39.0671], [117.7845, 39.1346], [117.5577, 38.625], [118.0149, 38.1834], [118.94, 38.0426], [119.0891, 37.7008], [118.9529, 37.3311], [119.45, 37.1247], [120.3702, 37.7008], [120.7502, 37.834], [121.6402, 37.4603], [122.6025, 37.4265], [122.5195, 36.9467], [121.9327, 36.9595], [120.9899, 36.5978], [120.3933, 36.054], [120.0546, 35.8614], [119.2156, 35.0118], [119.5827, 34.5821], [120.2015, 34.3255], [120.8709, 33.0165], [120.8532, 32.6613], [121.4009, 32.3719], [121.3521, 31.8588], [121.0556, 31.7194], [121.6606, 31.3199], [121.8781, 30.9168], [120.9974, 30.5582], [121.1594, 30.3016], [121.9442, 29.8941], [121.7174, 29.2562], [121.602, 28.3667], [121.0986, 28.2903], [120.2788, 27.0972], [119.6484, 25.9186], [119.5392, 25.5915], [119.0248, 25.2235], [118.5605, 24.5803], [118.0873, 24.6269], [118.0562, 24.246], [116.5381, 23.1798], [116.4706, 22.9459], [115.4985, 22.719], [115.1957, 22.8171], [114.854, 22.6169], [114.2658, 22.541], [114.0154, 22.5117], [113.6195, 22.8615], [113.5467, 22.2241], [113.4943, 22.2414], [113.4788, 22.1957], [113.0083, 22.1193], [112.5861, 21.7767], [111.9438, 21.8495], [111.6029, 21.5592], [110.771, 21.3865], [110.1935, 21.0376], [110.5114, 20.5182], [110.123, 20.2639], [109.6626, 20.9168], [109.9307, 21.4806], [109.5441, 21.5378], [109.1486, 21.4255], [109.0305, 21.6266], [108.3247, 21.6937], [107.9727, 21.5081], [107.3513, 21.6089], [106.7294, 22.0004], [106.5363, 22.3954], [106.7804, 22.779], [106.5421, 22.9081], [105.8429, 22.9228], [105.2752, 23.3454], [104.8646, 23.1363], [104.7958, 22.9112], [104.3719, 22.704], [103.3008, 22.7643], [103.0051, 22.4532], [102.5173, 22.7408], [102.1276, 22.379], [101.6712, 22.4625], [101.5243, 22.2538], [101.744, 21.778], [101.705, 21.1503], [101.2242, 21.2236], [101.139, 21.5676], [100.2148, 21.4628], [99.9179, 22.0279], [99.193, 22.126], [99.3377, 22.498], [99.3408, 23.0959], [98.8636, 23.1913], [98.7642, 24.116], [98.2124, 24.1106], [97.686, 23.898], [97.5315, 24.4915], [97.8196, 25.2519], [98.0109, 25.2923], [98.6546, 25.9177], [98.7318, 26.5836], [98.651, 27.5726], [98.299, 27.5499], [98.0988, 28.1421], [97.5377, 28.5101], [97.3224, 28.218], [96.776, 28.3671], [96.4355, 29.0507], [96.0352, 29.4471], [95.4204, 29.0543], [94.7696, 29.1759], [94.6231, 29.3126], [93.9022, 28.803], [93.2067, 28.5909], [92.702, 28.147], [92.6642, 27.949], [91.9775, 27.7301], [91.6317, 27.7599], [91.6056, 27.9516], [90.3529, 28.0804], [89.9809, 28.3112], [89.537, 28.1075], [88.8912, 27.316], [88.8485, 27.8686], [88.6213, 28.0919], [88.1099, 27.8704], [87.1413, 27.8385], [86.5545, 28.0853], [86.4089, 27.9286], [85.6783, 28.2775], [85.1225, 28.3161], [85.1589, 28.5922], [84.7141, 28.5957], [84.2285, 28.9118], [84.1016, 29.2198], [83.5835, 29.1834], [83.1556, 29.6127], [82.8542, 29.6833], [82.1591, 30.1152], [82.0432, 30.3269], [81.4169, 30.3376], [81.0103, 30.1645], [80.6823, 30.4148], [80.1913, 30.5684], [79.9245, 30.8889], [79.9165, 30.8942], [79.3697, 31.0798], [79.3386, 31.1055], [79.1073, 31.4025], [78.8445, 31.3017], [78.7198, 31.8876], [78.3896, 32.5197], [79.2192, 32.5011], [79.2165, 32.5641], [79.1353, 33.1718], [79.1127, 33.2264], [78.8019, 33.4999], [78.7531, 34.0876], [78.9364, 34.3521], [78.2821, 34.654], [77.8107, 35.4845], [77.7992, 35.496], [77.4467, 35.4756], [76.2518, 35.8108], [75.945, 36.0176], [75.8403, 36.6497], [75.3467, 36.9134], [74.5415, 37.0221], [74.8912, 37.2317], [74.7452, 38.5101], [74.2773, 38.6597], [73.8015, 38.6068], [73.6315, 39.4489], [73.9147, 39.6065], [73.9915, 40.0433], [74.4118, 40.1374], [75.0044, 40.4494], [75.5837, 40.6052], [75.8718, 40.3034], [76.4804, 40.4494], [76.8239, 40.9821], [78.1232, 41.0758], [78.3625, 41.3718], [79.2938, 41.7829], [80.2162, 42.0323], [80.2095, 42.1899], [80.1651, 42.6653], [80.7857, 43.1616], [80.3551, 44.0973], [80.4554, 44.7463], [80.059, 45.0064], [81.602, 45.3109], [82.4787, 45.1236], [82.3264, 45.52], [83.0043, 47.0337], [83.1929, 47.1864], [84.786, 46.8308], [85.6565, 47.2547], [85.526, 47.9157], [85.7493, 48.3849], [86.5496, 48.5287], [86.7534, 49.0088], [87.3229, 49.0858], [87.8143, 49.1624], [87.9798, 48.5549], [88.517, 48.3844], [89.0478, 48.0027], [89.561, 48.004], [90.3134, 47.676], [90.4963, 47.2854], [90.87, 46.9547], [91.0338, 46.529], [91.0019, 46.0358], [90.6618, 45.5253], [90.8771, 45.196], [91.5842, 45.0766], [92.7876, 45.0357], [93.6563, 44.9008], [94.7119, 44.3508], [95.3502, 44.278], [95.9126, 43.2064], [96.3854, 42.7204], [97.2057, 42.7896], [99.4678, 42.5681], [99.984, 42.6773], [101.7139, 42.4656], [101.9731, 42.2157], [103.0726, 42.0062], [103.7109, 41.7514], [104.4984, 41.877], [104.4984, 41.6586], [105.1971, 41.738], [106.7702, 42.2889], [108.1712, 42.4474], [109.4434, 42.4558], [110.4004, 42.7736], [111.0072, 43.3414], [111.9331, 43.7116], [111.4022, 44.3672], [111.8981, 45.0641], [113.5871, 44.7459], [114.0305, 44.9425], [114.517, 45.3646], [115.6809, 45.4583], [116.2407, 45.7961], [116.5625, 46.2897], [117.3335, 46.3621], [118.3088, 46.7172], [119.7066, 46.6062], [119.8979, 46.8579], [119.711, 47.15], [118.4983, 47.9841], [117.7685, 47.988], [117.3508, 47.652], [116.7605, 47.87], [115.8984, 47.6871], [115.5575, 47.945], [116.6832, 49.8238], [117.8733, 49.5135], [118.4517, 49.8444], [119.26, 50.0664], [119.1921, 50.3797], [120.067, 51.6007], [120.7497, 52.0965], [120.6561, 52.5666], [120.0945, 52.7872], [120.704, 53.1718], [122.338, 53.485], [123.6079, 53.5465], [124.8122, 53.1339], [125.649, 53.0422], [126.313, 52.3997], [126.9247, 51.1002], [127.5901, 50.2091], [127.5027, 49.8735], [127.9998, 49.5685], [128.5267, 49.5943], [129.5339, 49.3235], [130.1962, 48.8916], [130.8043, 48.3414], [130.712, 48.1279], [131.0027, 47.6915], [132.5617, 47.7683], [133.1441, 48.1057], [133.4686, 48.0972], [134.2933, 48.3733], [134.5636, 48.3219], [134.7523, 47.7155], [134.1677, 47.3022], [133.8614, 46.2475], [133.1858, 45.4947], [132.9359, 45.03], [131.9775, 45.2439], [131.0822, 44.9101], [131.2553, 44.0716], [131.262, 43.4333], [131.0684, 42.9024], [130.5771, 42.8118], [130.5269, 42.5353]]]]\n    },\n    \"properties\": {\n      \"name\": \"China\",\n      \"id\": \"CN\"\n    },\n    \"id\": \"CN\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-67.0799, -55.1538], [-68.07, -55.2213], [-68.107, -54.9292], [-67.2452, -54.9776], [-67.0799, -55.1538]]], [[[-69.703, -54.919], [-68.9007, -55.0176], [-68.2826, -55.255], [-68.2932, -55.5214], [-69.4119, -55.4441], [-69.9798, -55.1476], [-69.703, -54.919]]], [[[-72.9233, -53.4817], [-72.2055, -53.8075], [-73.3048, -53.9438], [-73.6865, -53.4266], [-72.9233, -53.4817]]], [[[-68.6299, -52.6525], [-68.6532, -54.8538], [-69.4862, -54.8591], [-69.7235, -54.7122], [-70.4972, -54.8094], [-71.4409, -54.6198], [-70.8982, -54.338], [-70.8678, -53.8843], [-70.0903, -53.4182], [-70.3906, -53.0263], [-69.7636, -52.7315], [-68.6299, -52.6525]]], [[[-74.4762, -49.148], [-74.5699, -49.9909], [-75.3001, -49.8475], [-75.1842, -49.0836], [-74.7934, -48.705], [-74.4762, -49.148]]], [[[-74.5672, -48.5918], [-74.923, -48.6264], [-75.2129, -48.1417], [-74.7292, -48.1261], [-74.5672, -48.5918]]], [[[-72.9861, -44.7801], [-73.4451, -44.6411], [-73.2078, -44.3348], [-72.7641, -44.5488], [-72.9861, -44.7801]]], [[[-73.7354, -44.3948], [-73.9833, -44.4946], [-73.7271, -45.1192], [-74.0991, -45.3252], [-74.6178, -44.6478], [-74.5017, -44.4733], [-73.7354, -44.3948]]], [[[-73.7733, -43.3459], [-74.355, -43.2637], [-74.2094, -42.8789], [-74.0368, -41.7953], [-73.5278, -41.8961], [-73.4708, -42.4665], [-73.7893, -42.5859], [-73.4364, -42.9366], [-73.7733, -43.3459]]], [[[-67.1948, -22.8216], [-67.0088, -23.0014], [-67.3562, -24.0339], [-68.2502, -24.3921], [-68.562, -24.8378], [-68.3842, -25.0921], [-68.6002, -25.4859], [-68.4144, -26.1539], [-68.5811, -26.5183], [-68.3461, -27.0279], [-68.8463, -27.1536], [-69.1744, -27.9246], [-69.6569, -28.4138], [-69.8278, -29.1031], [-70.0269, -29.3242], [-69.9277, -29.7694], [-69.9563, -30.358], [-70.1614, -30.4401], [-70.5196, -31.1486], [-70.5853, -31.5694], [-70.1696, -32.4718], [-70.0198, -33.2717], [-69.7978, -33.3987], [-69.8524, -34.2243], [-70.2899, -34.733], [-70.4703, -35.3261], [-70.4048, -36.0616], [-71.0556, -36.5237], [-71.1677, -37.7621], [-71.0281, -38.0413], [-70.9517, -38.7383], [-71.4256, -38.9855], [-71.5394, -39.6025], [-71.7199, -39.6354], [-71.6952, -40.3354], [-71.932, -40.6918], [-71.9114, -41.6506], [-71.7501, -42.0466], [-72.1247, -42.2983], [-72.1464, -42.9899], [-71.7816, -43.167], [-71.905, -43.44], [-71.6801, -43.9296], [-71.82, -44.3832], [-71.2127, -44.4414], [-71.2611, -44.7632], [-71.5962, -44.9794], [-71.3537, -45.2306], [-71.7727, -45.7242], [-71.8757, -46.1606], [-71.6952, -46.5783], [-71.9403, -46.8313], [-71.905, -47.2015], [-72.346, -47.4927], [-72.518, -47.8762], [-72.3549, -48.3658], [-72.6143, -48.7929], [-73.5762, -49.583], [-73.5012, -50.1254], [-73.153, -50.7384], [-72.5098, -50.6075], [-72.2763, -50.9102], [-72.4077, -51.541], [-71.9187, -51.9898], [-69.9603, -52.0084], [-68.4433, -52.3569], [-69.241, -52.2055], [-69.5606, -52.4217], [-70.795, -52.7688], [-70.9959, -53.7791], [-71.2977, -53.8834], [-72.1744, -53.6322], [-71.8528, -53.2855], [-71.4003, -53.107], [-71.3878, -52.7644], [-72.4583, -53.2544], [-73.0527, -53.2433], [-74.0143, -52.6392], [-73.5183, -52.0408], [-73.9733, -51.7847], [-73.8958, -51.3315], [-74.8147, -51.0629], [-75.0948, -50.6812], [-74.3337, -49.9745], [-74.3411, -48.5958], [-74.5772, -48.2744], [-74.6549, -47.7022], [-74.1584, -47.1824], [-74.152, -46.9742], [-75.6567, -46.6102], [-74.9245, -46.1597], [-75.0666, -45.8751], [-74.1579, -45.7673], [-74.0377, -45.4175], [-73.5498, -45.4836], [-73.3625, -44.978], [-72.739, -44.7343], [-72.6638, -44.4365], [-73.2651, -44.1688], [-72.9965, -43.6317], [-72.7852, -42.3014], [-72.4993, -41.9809], [-72.6698, -41.6595], [-73.0149, -41.5441], [-73.5214, -41.7971], [-73.966, -41.1184], [-73.6694, -40.0824], [-73.4104, -39.7889], [-73.2264, -39.2243], [-73.5325, -38.3667], [-73.4648, -38.0405], [-73.6619, -37.6987], [-73.6017, -37.1886], [-73.216, -37.1669], [-73.1181, -36.6884], [-72.8747, -36.3905], [-72.6239, -35.5857], [-72.2237, -35.0961], [-72.0029, -34.1653], [-71.6644, -33.6526], [-71.743, -33.0951], [-71.4522, -32.6596], [-71.5259, -31.806], [-71.6619, -31.1695], [-71.6695, -30.3305], [-71.4005, -30.1432], [-71.3157, -29.6496], [-71.5192, -28.9265], [-71.1863, -28.3778], [-71.0527, -27.7275], [-70.6465, -26.3293], [-70.7138, -25.7842], [-70.4455, -25.1725], [-70.5742, -24.6442], [-70.4878, -23.7818], [-70.5633, -23.0569], [-70.3316, -22.8487], [-70.0875, -21.493], [-70.1971, -20.7256], [-70.1483, -19.8049], [-70.4184, -18.3454], [-69.9263, -18.206], [-69.8522, -17.704], [-69.5108, -17.506], [-69.3133, -17.9432], [-69.094, -18.0507], [-68.9684, -18.9682], [-68.4628, -19.4329], [-68.6983, -19.721], [-68.7451, -20.4588], [-68.4999, -20.6119], [-68.1969, -21.3004], [-67.9883, -22.0572], [-67.8795, -22.8229], [-67.1948, -22.8216]]]]\n    },\n    \"properties\": {\n      \"name\": \"Chile\",\n      \"id\": \"CL\"\n    },\n    \"id\": \"CL\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[9.5241, 47.5242], [9.5277, 47.2707], [9.4877, 47.0621], [9.5801, 47.0572], [10.4528, 46.865], [9.9392, 46.3616], [9.2512, 46.2866], [8.9537, 45.8298], [8.4584, 46.2458], [7.9932, 46.0158], [7.021, 45.9257], [6.7583, 46.4158], [6.06, 46.4282], [7.0006, 47.3227], [7.6154, 47.5925], [8.6177, 47.7661], [9.5241, 47.5242]]]\n    },\n    \"properties\": {\n      \"name\": \"Switzerland\",\n      \"id\": \"CH\"\n    },\n    \"id\": \"CH\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[96.8404, -12.182], [96.835, -12.1797], [96.8279, -12.1509], [96.8257, -12.126], [96.8328, -12.126], [96.8395, -12.1602], [96.8404, -12.182]]]\n    },\n    \"properties\": {\n      \"name\": \"Cocos (Keeling) Islands\",\n      \"id\": \"CC\"\n    },\n    \"id\": \"CC\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-105.289, 72.9199], [-106.9216, 73.4799], [-105.5123, 73.7657], [-104.583, 73.3538], [-105.289, 72.9199]]], [[[-79.5373, 73.6546], [-77.2066, 73.4996], [-76.2895, 73.081], [-76.4005, 72.8207], [-77.836, 72.8968], [-79.5006, 72.7559], [-80.8241, 73.3807], [-80.849, 73.7211], [-79.5373, 73.6546]]], [[[-86.5894, 71.0107], [-84.7896, 71.0933], [-84.6995, 71.6315], [-85.9115, 71.9866], [-85.3411, 72.4216], [-85.6445, 72.7745], [-85.0184, 73.3356], [-82.6596, 73.7296], [-81.406, 73.6346], [-80.2748, 72.7455], [-80.9413, 72.2101], [-78.453, 72.4352], [-77.7532, 72.7248], [-75.2943, 72.4809], [-74.9032, 72.1005], [-73.7136, 71.7198], [-71.6406, 71.5163], [-70.7926, 71.1033], [-70.5609, 70.7382], [-69.1686, 70.7641], [-67.3637, 70.0344], [-66.6852, 69.2858], [-67.7517, 69.0387], [-68.038, 68.5507], [-67.033, 68.3261], [-66.2252, 67.9588], [-64.5275, 67.8127], [-64.0079, 67.3473], [-61.9684, 67.019], [-61.2997, 66.6488], [-61.9915, 66.0354], [-62.6589, 65.6399], [-63.3643, 65.5433], [-63.4018, 65.1185], [-64.6653, 65.1689], [-65.4015, 65.7639], [-65.3054, 66.0085], [-66.4771, 66.2797], [-67.1833, 66.0345], [-68.2568, 65.9386], [-67.3034, 65.4829], [-66.8606, 65.0917], [-65.2748, 64.6316], [-64.6784, 64.0281], [-64.5144, 63.2639], [-65.0688, 63.2635], [-65.2659, 62.7151], [-65.9788, 63.0007], [-67.676, 63.0935], [-66.2813, 62.3027], [-66.2567, 61.8683], [-67.4401, 62.1513], [-69.0823, 62.4052], [-69.5452, 62.7446], [-70.2362, 62.7634], [-71.2538, 63.0424], [-73.4437, 64.4236], [-74.5124, 64.6702], [-75.0675, 64.4567], [-76.7239, 64.242], [-77.7912, 64.367], [-78.0957, 64.9392], [-77.4474, 65.1616], [-77.3267, 65.4532], [-75.8283, 65.227], [-73.5607, 65.5429], [-74.434, 66.139], [-73.0333, 66.7283], [-72.2201, 67.2543], [-73.3283, 68.2668], [-74.648, 68.7076], [-74.9172, 68.9828], [-76.4034, 68.6923], [-75.7873, 69.3186], [-77.1289, 69.6526], [-78.9797, 70.5813], [-79.3475, 70.3722], [-78.7778, 70.0477], [-79.3033, 69.8948], [-81.0982, 70.0912], [-82.1387, 69.8413], [-86.3219, 70.1454], [-86.6244, 70.4013], [-87.9006, 70.2519], [-88.8483, 70.5229], [-89.3655, 71.0671], [-88.0387, 70.9512], [-87.8724, 71.2085], [-89.0794, 71.2879], [-89.8458, 71.4924], [-90.0251, 71.9489], [-89.2631, 73.0691], [-87.7197, 73.7229], [-85.1105, 73.8081], [-86.6293, 72.8709], [-86.0361, 71.7709], [-85.0233, 71.3532], [-86.5894, 71.0107]]], [[[-100.002, 73.946], [-99.1579, 73.7316], [-97.5819, 73.8876], [-97.0017, 73.6665], [-97.7959, 73.2852], [-97.0519, 72.6367], [-96.6133, 71.8339], [-98.663, 71.3021], [-99.167, 71.3672], [-100.5944, 72.1524], [-101.7239, 72.3149], [-102.7137, 72.783], [-100.4847, 72.773], [-100.2828, 73.1203], [-101.4509, 73.4311], [-100.9151, 73.8053], [-100.002, 73.946]]], [[[-93.171, 74.161], [-92.2228, 73.9724], [-90.3547, 73.8687], [-92.118, 72.7539], [-93.3407, 72.8018], [-94.0377, 72.0288], [-95.1929, 72.0275], [-95.5475, 72.7816], [-95.633, 73.6954], [-95.0397, 74.0239], [-93.171, 74.161]]], [[[-119.7363, 74.1126], [-117.5149, 74.2318], [-115.5107, 73.6188], [-115.4468, 73.4388], [-118.9615, 72.6842], [-120.18, 72.2126], [-120.6192, 71.5057], [-123.2107, 71.1235], [-124.0077, 71.6775], [-125.7626, 72.1375], [-124.9871, 72.5881], [-124.8364, 73.0762], [-123.7973, 73.7682], [-124.6962, 74.3481], [-121.3153, 74.5299], [-119.7363, 74.1126]]], [[[-93.5427, 75.028], [-93.5472, 74.691], [-94.6973, 74.6422], [-96.5658, 75.0988], [-95.6707, 75.5287], [-94.4272, 75.5935], [-93.5427, 75.028]]], [[[-102.2275, 76.0149], [-103.3148, 75.7641], [-104.3506, 76.1823], [-102.5841, 76.2817], [-102.2275, 76.0149]]], [[[-97.7009, 76.4664], [-97.4097, 75.5522], [-97.7994, 75.1167], [-100.2344, 75.0078], [-100.712, 75.4064], [-102.5413, 75.5136], [-101.4313, 75.9919], [-102.1378, 76.2848], [-100.388, 76.6135], [-97.7009, 76.4664]]], [[[-108.2924, 76.0571], [-105.481, 75.7457], [-105.8625, 75.1915], [-107.1533, 74.9272], [-108.8312, 75.0648], [-110.9408, 74.6387], [-112.5193, 74.4169], [-113.5141, 74.43], [-114.4518, 75.0879], [-115.7289, 74.9682], [-117.6001, 75.2716], [-116.6098, 76.0738], [-115.5806, 76.4375], [-114.1939, 76.4515], [-112.6975, 76.2016], [-111.0527, 75.5484], [-109.0865, 75.5065], [-108.9449, 75.6989], [-110.2701, 76.4169], [-108.467, 76.7376], [-108.2924, 76.0571]]], [[[-94.2949, 76.9125], [-92.7162, 76.6029], [-91.3051, 76.6808], [-90.2515, 76.0536], [-88.2014, 75.512], [-86.0687, 75.5023], [-83.932, 75.819], [-82.1538, 75.831], [-79.6602, 75.4494], [-79.508, 74.8801], [-80.2777, 74.5816], [-81.8089, 74.4766], [-88.4231, 74.4942], [-89.8444, 74.5485], [-91.9616, 74.7931], [-92.4281, 75.3828], [-92.1851, 75.8465], [-93.0917, 76.3541], [-95.2739, 76.2644], [-96.6397, 76.703], [-95.6383, 77.0639], [-94.2949, 76.9125]]], [[[-115.5513, 77.3633], [-116.2205, 76.6111], [-119.3679, 76.2218], [-119.9128, 75.8589], [-121.9083, 76.0347], [-121.6138, 76.4415], [-119.0903, 77.3051], [-115.5513, 77.3633]]], [[[-95.4843, 77.7921], [-93.301, 77.7399], [-93.5196, 77.4745], [-95.987, 77.484], [-95.4843, 77.7921]]], [[[-110.4581, 78.1032], [-109.7718, 77.9574], [-110.1984, 77.5246], [-111.952, 77.3442], [-113.1643, 77.5302], [-113.1872, 77.9124], [-110.4581, 78.1032]]], [[[-109.816, 78.6503], [-109.3905, 78.3367], [-113.1499, 78.4084], [-110.4077, 78.7566], [-109.816, 78.6503]]], [[[-96.2045, 78.5314], [-94.8873, 78.3452], [-95.087, 77.9927], [-96.9895, 77.8061], [-98.2548, 78.4293], [-96.2045, 78.5314]]], [[[-103.426, 79.3157], [-99.6094, 78.5831], [-99.1664, 77.8569], [-100.5859, 77.8917], [-101.0742, 78.1938], [-102.7313, 78.3711], [-103.5183, 78.7691], [-105.5358, 79.0325], [-105.3877, 79.3235], [-103.426, 79.3157]]], [[[-91.8857, 81.1328], [-90.643, 80.5937], [-87.6749, 80.3722], [-87.1442, 79.6626], [-85.5014, 79.5303], [-85.2899, 79.2083], [-87.0164, 78.8987], [-88.7911, 78.1925], [-90.6144, 78.1498], [-92.6782, 78.3891], [-95.1032, 79.29], [-95.297, 79.6531], [-96.7734, 80.1358], [-95.6146, 80.3962], [-96.1328, 80.6913], [-95.2697, 81.0007], [-91.8857, 81.1328]]], [[[-69.4889, 83.0169], [-63.641, 82.8127], [-61.4771, 82.4674], [-62.1766, 82.0434], [-64.5741, 81.7336], [-65.4839, 81.2848], [-70.1434, 80.3977], [-71.3878, 79.7618], [-75.2595, 79.4209], [-76.2558, 79.0068], [-74.4332, 78.724], [-75.866, 78.0098], [-78.0127, 77.9461], [-78.0762, 77.5191], [-79.3408, 77.1584], [-78.2888, 76.978], [-78.2844, 76.5711], [-80.6903, 76.1765], [-81.1708, 76.5128], [-83.8856, 76.4531], [-85.1412, 76.3046], [-89.5701, 76.4919], [-89.4997, 76.8268], [-88.3982, 77.104], [-86.8737, 77.2004], [-88.0946, 77.7193], [-87.0179, 77.8922], [-87.5517, 78.1767], [-86.808, 78.7744], [-84.3162, 78.9753], [-85.0899, 79.6122], [-86.4207, 79.8453], [-86.3073, 80.3194], [-83.7236, 80.229], [-80.0511, 80.5287], [-83.4013, 80.714], [-85.3074, 80.526], [-88.9214, 80.8057], [-89.9474, 81.1725], [-88.9784, 81.5414], [-90.4903, 81.8772], [-86.5807, 82.1873], [-82.1225, 82.6019], [-79.8864, 82.9386], [-69.97, 83.1161], [-69.4889, 83.0169]]], [[[-61.1053, 45.9448], [-60.8061, 45.738], [-60.5049, 46.204], [-59.8651, 46.1597], [-60.3862, 45.6545], [-61.2837, 45.5737], [-61.4953, 45.9413], [-60.8703, 46.7966], [-60.3318, 46.7678], [-60.5768, 46.1721], [-61.1053, 45.9448]]], [[[-63.8113, 46.4686], [-63.1294, 46.422], [-62.1635, 46.4872], [-62.8784, 46.0012], [-63.641, 46.2307], [-63.8113, 46.4686]]], [[[-74.7088, 45.0038], [-73.558, 45.425], [-73.1596, 46.0101], [-71.901, 46.632], [-71.2611, 46.7562], [-70.5196, 47.0323], [-68.987, 48.2748], [-67.5608, 48.8559], [-66.1781, 49.2132], [-64.8364, 49.1917], [-64.2618, 48.9218], [-64.2538, 48.5505], [-65.2595, 48.0213], [-65.9266, 48.1887], [-65.6665, 47.696], [-65.2282, 47.8114], [-64.7033, 47.7248], [-64.9121, 47.3688], [-65.3189, 47.1012], [-64.9057, 46.8881], [-64.5415, 46.2404], [-63.2928, 45.7522], [-62.4831, 45.6217], [-61.9556, 45.868], [-61.4924, 45.6869], [-61.2837, 45.2355], [-63.7611, 44.4862], [-64.286, 44.5501], [-64.8624, 43.8678], [-65.7382, 43.5607], [-66.1257, 43.8137], [-66.0995, 44.3677], [-65.6567, 44.7605], [-64.4489, 45.2559], [-64.8979, 45.6261], [-65.8845, 45.223], [-66.8726, 45.0672], [-67.1249, 45.1693], [-67.4725, 45.2759], [-67.4328, 45.603], [-67.7845, 45.7016], [-67.8067, 47.083], [-68.311, 47.3546], [-68.8288, 47.2032], [-69.243, 47.4629], [-70.0078, 46.7088], [-70.2963, 45.9062], [-70.898, 45.2626], [-71.3272, 45.2901], [-71.5175, 45.0078], [-74.7088, 45.0038]]], [[[-61.8011, 49.094], [-62.2195, 49.0791], [-63.5658, 49.3994], [-64.1315, 49.9416], [-62.8584, 49.7055], [-61.8171, 49.2835], [-61.8011, 49.094]]], [[[-127.1973, 50.6403], [-125.4821, 50.3167], [-124.6429, 49.4287], [-123.9959, 49.2241], [-123.497, 48.582], [-123.5946, 48.3334], [-124.6893, 48.5975], [-125.8285, 49.0918], [-125.8354, 49.2767], [-126.5485, 49.4189], [-126.683, 49.8764], [-127.1143, 49.8797], [-128.2675, 50.6092], [-127.9182, 50.8605], [-127.1973, 50.6403]]], [[[-55.4588, 51.5365], [-55.8714, 50.9073], [-56.6939, 50.0597], [-55.7648, 49.9605], [-55.892, 49.5803], [-54.9827, 49.268], [-54.579, 49.4908], [-53.9577, 49.4418], [-53.5733, 49.1413], [-53.853, 48.8112], [-53.5312, 48.2317], [-52.955, 48.0293], [-53.1756, 47.6529], [-52.6536, 47.5495], [-53.0697, 46.6812], [-53.6164, 46.6803], [-54.1737, 46.8805], [-53.8692, 47.387], [-54.8566, 47.3848], [-56.2211, 47.6716], [-56.9525, 47.5743], [-58.3332, 47.6769], [-59.1169, 47.5708], [-59.3624, 47.8655], [-58.7105, 48.325], [-58.7165, 48.598], [-58.0158, 49.5426], [-57.4656, 50.4636], [-56.7503, 51.2748], [-56.0256, 51.5685], [-55.4588, 51.5365]]], [[[-80.7318, 52.7472], [-81.8391, 52.9579], [-81.8473, 53.1862], [-81.1357, 53.2058], [-80.7318, 52.7472]]], [[[-132.6556, 54.1275], [-131.7026, 53.9864], [-132.0113, 53.2653], [-132.7475, 53.3105], [-133.0522, 53.7782], [-132.6556, 54.1275]]], [[[-78.9356, 56.2662], [-79.1755, 55.8851], [-80.0009, 55.9322], [-79.5963, 56.2444], [-78.9356, 56.2662]]], [[[-79.5452, 62.4117], [-79.324, 62.0261], [-79.7144, 61.6126], [-80.2652, 61.8182], [-80.0215, 62.3431], [-79.5452, 62.4117]]], [[[-82.0004, 62.9543], [-82.1138, 62.6522], [-83.0158, 62.2099], [-83.699, 62.1602], [-83.8994, 62.4765], [-83.3765, 62.905], [-82.0004, 62.9543]]], [[[-84.9197, 65.261], [-83.4071, 65.1039], [-82.0501, 64.6442], [-81.7161, 64.0219], [-80.829, 64.09], [-80.3021, 63.7622], [-81.0463, 63.4615], [-82.3782, 63.7067], [-82.4672, 63.9269], [-83.4943, 64.0993], [-83.7283, 63.8135], [-84.6329, 63.3092], [-85.4954, 63.1392], [-85.7142, 63.6579], [-87.1888, 63.6723], [-86.252, 64.1368], [-86.3743, 64.5659], [-85.9617, 65.7042], [-85.241, 65.7954], [-84.9197, 65.261]]], [[[-75.6758, 68.3225], [-75.1538, 68.234], [-75.1274, 67.5373], [-75.7801, 67.2836], [-77.0048, 67.2669], [-77.3058, 67.7062], [-76.7403, 68.2313], [-75.6758, 68.3225]]], [[[-97.4394, 69.6427], [-96.2999, 69.3444], [-95.6856, 68.7358], [-96.4016, 68.4708], [-97.472, 68.5438], [-99.254, 68.8632], [-99.5641, 69.0341], [-97.4394, 69.6427]]], [[[-74.7088, 45.0038], [-75.1793, 44.8994], [-76.4646, 44.0574], [-76.82, 43.6286], [-78.7205, 43.625], [-79.1719, 43.4666], [-79.0368, 42.8025], [-80.2475, 42.3662], [-81.2778, 42.209], [-82.439, 41.675], [-83.1419, 41.976], [-83.0731, 42.3005], [-82.5453, 42.6245], [-82.1378, 43.5709], [-82.5511, 45.3473], [-83.5926, 45.817], [-83.9777, 46.0851], [-84.1921, 46.5494], [-84.5617, 46.4575], [-84.8759, 46.9001], [-88.3782, 48.3032], [-89.4556, 47.996], [-90.8403, 48.2007], [-91.5183, 48.0582], [-92.9963, 48.6117], [-93.3778, 48.6166], [-93.7078, 48.5256], [-94.6209, 48.7427], [-95.162, 48.9917], [-97.5297, 48.9932], [-99.2354, 48.993], [-102.2201, 48.993], [-103.9256, 48.993], [-106.4839, 48.993], [-109.895, 48.993], [-112.4532, 48.993], [-115.8643, 48.993], [-118.4226, 48.993], [-120.1281, 48.993], [-122.7888, 48.993], [-123.0491, 48.993], [-123.3356, 49.4591], [-123.859, 49.4829], [-124.4833, 49.8082], [-125.21, 50.4763], [-126.4045, 50.5298], [-126.6318, 50.9151], [-127.0577, 50.8676], [-127.7082, 51.1512], [-127.6449, 51.4784], [-128.3576, 52.1589], [-128.1088, 52.858], [-128.6524, 53.2437], [-129.2842, 53.3931], [-129.5637, 53.2515], [-130.3351, 53.724], [-130.0433, 54.1335], [-130.4304, 54.4209], [-129.6666, 55.4366], [-130.0251, 55.8882], [-130.4772, 56.2307], [-131.5752, 56.5989], [-131.8661, 56.7929], [-133.8208, 58.7049], [-134.9439, 59.2882], [-135.4759, 59.7934], [-136.3219, 59.6049], [-136.5787, 59.1522], [-137.4385, 58.9031], [-137.5932, 59.2263], [-139.1852, 60.0837], [-141.0021, 60.3003], [-141.0021, 63.2222], [-141.0021, 65.56], [-141.0021, 68.4819], [-141.0021, 69.6509], [-139.1815, 69.5155], [-138.1283, 69.1519], [-136.7174, 68.8891], [-135.8763, 68.9169], [-135.6914, 69.3111], [-135.1409, 69.4678], [-133.1632, 69.4338], [-130.4985, 70.1431], [-128.9715, 69.7123], [-127.765, 70.2219], [-127.1385, 70.2392], [-126.6122, 69.7303], [-125.9073, 69.4185], [-124.7679, 69.99], [-123.6091, 69.3774], [-123.0258, 69.81], [-120.9624, 69.6604], [-120.2925, 69.4205], [-118.8687, 69.2571], [-118.0953, 69.043], [-116.0651, 68.8554], [-115.6312, 68.9726], [-114.4138, 68.6597], [-115.1332, 67.8191], [-112.4352, 67.6849], [-110.9901, 67.7907], [-110.0426, 67.9772], [-109.6305, 67.7328], [-108.5929, 67.591], [-107.6263, 67.0031], [-108.2611, 68.1498], [-108.3134, 68.6108], [-106.1646, 68.9198], [-105.4286, 68.4584], [-104.1935, 68.0311], [-103.4741, 68.115], [-102.692, 67.8116], [-101.555, 67.6931], [-100.4561, 67.8396], [-99.1468, 67.7237], [-98.4171, 67.8265], [-98.2184, 68.3174], [-97.2659, 68.453], [-96.0361, 68.1578], [-96.3714, 67.5539], [-95.7826, 67.1937], [-95.2588, 67.2625], [-95.6505, 67.7375], [-93.6517, 68.5431], [-93.6814, 68.8874], [-94.2707, 69.4551], [-96.0503, 69.8311], [-96.4924, 70.1249], [-96.2265, 70.5418], [-96.549, 70.8088], [-96.4056, 71.2737], [-95.2013, 71.9036], [-94.3084, 71.7649], [-92.9488, 71.2622], [-92.9814, 70.8523], [-91.5641, 70.1782], [-92.751, 69.7139], [-90.8221, 69.2904], [-90.4683, 68.8638], [-89.0567, 69.266], [-88.0413, 68.8117], [-87.8103, 68.4042], [-88.347, 68.2883], [-88.1958, 67.7659], [-87.2663, 67.1839], [-86.5363, 67.5162], [-85.9526, 68.0724], [-85.7338, 68.6301], [-84.8622, 69.074], [-85.3869, 69.2318], [-85.5074, 69.8453], [-82.6183, 69.691], [-82.6421, 69.4584], [-81.3286, 69.12], [-81.2815, 68.6572], [-82.5526, 68.4464], [-81.9764, 67.862], [-81.2702, 67.4598], [-81.4675, 67.0699], [-82.6416, 66.5876], [-84.4784, 66.1794], [-85.6039, 66.5683], [-86.6331, 66.5314], [-86.0429, 66.0225], [-87.2914, 65.3549], [-87.9701, 65.3489], [-89.7494, 65.9359], [-89.9241, 65.7804], [-88.974, 65.3482], [-87.0275, 65.1982], [-87.2805, 64.8262], [-88.1057, 64.1832], [-88.653, 64.0094], [-90.1418, 63.9819], [-90.0135, 63.8044], [-91.3301, 63.5067], [-90.7466, 63.3516], [-90.8711, 62.9459], [-91.4491, 62.8041], [-92.3613, 62.8194], [-93.4206, 61.7059], [-93.9127, 61.4815], [-94.6467, 60.4164], [-94.7858, 59.9534], [-94.7135, 58.9034], [-94.2871, 58.716], [-93.2782, 58.7564], [-92.249, 57.009], [-91.1113, 57.2412], [-90.5922, 57.2246], [-89.7909, 56.9813], [-88.9484, 56.8512], [-88.0751, 56.4673], [-87.5608, 56.0565], [-85.8305, 55.6569], [-85.061, 55.2856], [-83.9107, 55.3147], [-82.5775, 55.1487], [-82.2195, 54.8136], [-82.4181, 54.3559], [-82.1413, 53.8177], [-82.2605, 52.9612], [-81.5994, 52.4325], [-81.6613, 52.2938], [-80.6579, 51.7582], [-80.368, 51.3299], [-79.8362, 51.1734], [-79.4975, 51.5698], [-78.9777, 51.7338], [-78.4917, 52.2521], [-78.7238, 52.6278], [-79.2418, 54.0989], [-79.6655, 54.6975], [-77.8911, 55.2364], [-77.3249, 55.5555], [-76.6504, 56.1073], [-76.5729, 57.1813], [-77.1569, 58.0189], [-78.5152, 58.6823], [-77.7606, 59.3801], [-77.3118, 60.0424], [-77.8715, 60.7859], [-77.7362, 61.4373], [-78.1372, 62.1074], [-78.0682, 62.3555], [-77.3724, 62.5726], [-74.69, 62.1835], [-73.6299, 62.4543], [-72.0814, 61.7283], [-71.4227, 61.159], [-70.2792, 61.0687], [-69.6405, 60.6898], [-69.7559, 60.3886], [-69.682, 59.3417], [-69.1735, 58.8967], [-68.6981, 58.9045], [-67.5697, 58.2135], [-66.608, 58.5489], [-65.6061, 59.1107], [-64.9312, 60.2519], [-64.4995, 60.2683], [-63.1854, 58.8579], [-62.5939, 58.4741], [-62.3056, 57.9723], [-61.899, 57.8613], [-61.851, 57.3812], [-61.3337, 57.0106], [-61.5146, 56.3903], [-59.9303, 55.2594], [-58.997, 55.1494], [-58.7802, 54.8384], [-58.1951, 54.8659], [-57.4046, 54.5705], [-58.1514, 54.3504], [-57.4161, 54.1628], [-57.1489, 53.8476], [-56.4651, 53.7651], [-55.7979, 53.212], [-55.8336, 52.3104], [-55.6951, 52.1378], [-56.976, 51.4577], [-58.5103, 51.295], [-59.1655, 50.7799], [-60.0801, 50.2546], [-61.2897, 50.202], [-62.7155, 50.3016], [-64.868, 50.2754], [-65.2686, 50.32], [-66.4955, 50.2119], [-66.9411, 49.9938], [-67.3719, 49.3486], [-68.2819, 49.1972], [-68.9291, 48.829], [-69.775, 48.0981], [-69.9055, 47.8322], [-70.7058, 47.1398], [-71.2678, 46.7958], [-71.8797, 46.687], [-72.981, 46.2098], [-73.974, 45.3451], [-74.7088, 45.0038]]], [[[-114.5215, 72.593], [-113.5001, 72.6944], [-112.7537, 72.986], [-111.2698, 72.7137], [-108.7549, 72.551], [-107.72, 73.329], [-106.4822, 73.1962], [-105.415, 72.7883], [-104.3495, 71.434], [-104.5697, 71.1039], [-103.9535, 70.7626], [-100.9732, 70.0295], [-100.9351, 69.7152], [-102.2343, 69.8422], [-102.9197, 69.5648], [-101.9756, 69.4069], [-101.857, 69.0239], [-103.4681, 68.8086], [-105.0195, 69.0814], [-106.1408, 69.1621], [-106.6591, 69.4396], [-107.4399, 69.0021], [-108.946, 68.7598], [-111.3108, 68.542], [-113.1277, 68.4941], [-113.6941, 69.195], [-116.5135, 69.4247], [-117.1354, 70.1001], [-114.5923, 70.3125], [-112.6378, 70.2253], [-112.1143, 70.4468], [-113.7573, 70.6907], [-115.991, 70.5864], [-117.587, 70.6296], [-118.2642, 70.8882], [-117.8141, 71.1585], [-118.8683, 71.6868], [-118.9447, 71.9855], [-118.2136, 72.2629], [-118.3745, 72.5339], [-117.5517, 72.8311], [-114.6382, 73.3727], [-114.1091, 72.8611], [-114.5215, 72.593]]]]\n    },\n    \"properties\": {\n      \"name\": \"Canada\",\n      \"id\": \"CA\"\n    },\n    \"id\": \"CA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[22.86, 10.9195], [23.2559, 10.4579], [23.6461, 9.8231], [23.5374, 8.8159], [24.1473, 8.6654], [24.2915, 8.2912], [24.8535, 8.1376], [25.2472, 7.7244], [25.3809, 7.3333], [25.8891, 7.0647], [26.3619, 6.6355], [26.5141, 6.0691], [27.0836, 5.777], [27.4032, 5.1094], [27.1151, 5.1977], [26.8222, 5.0623], [25.5251, 5.3123], [25.2495, 5.0246], [24.7656, 4.9301], [24.32, 4.994], [23.4171, 4.6633], [22.7557, 4.6469], [22.4223, 4.1351], [21.5376, 4.2447], [20.558, 4.4627], [20.2264, 4.8297], [19.8065, 5.0894], [19.5011, 5.1276], [19.0687, 4.8915], [18.5676, 4.2576], [18.6102, 3.4785], [18.161, 3.4998], [17.4379, 3.6845], [16.6735, 3.5354], [16.4684, 2.8318], [16.1834, 2.2703], [16.0636, 2.9086], [15.775, 3.127], [15.1287, 3.827], [15.0226, 4.3583], [14.7088, 4.6655], [14.6169, 5.8649], [14.7394, 6.2799], [15.2459, 7.2636], [15.4803, 7.5237], [15.8452, 7.4753], [16.3787, 7.6835], [16.7849, 7.5508], [17.6496, 7.9836], [18.4553, 8.032], [19.1087, 8.6561], [19.1455, 9.0161], [20.3422, 9.1271], [20.7733, 9.4058], [21.2638, 9.9745], [21.7258, 10.3664], [21.7063, 10.5746], [22.4938, 10.9963], [22.86, 10.9195]]]\n    },\n    \"properties\": {\n      \"name\": \"Central African Republic\",\n      \"id\": \"CF\"\n    },\n    \"id\": \"CF\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[5.6938, 50.7748], [5.7972, 50.7546], [5.9939, 50.7504], [6.3645, 50.3163], [6.1164, 50.1209], [5.744, 49.9196], [5.7897, 49.5383], [4.8677, 49.788], [4.1744, 50.2466], [2.8396, 50.7118], [2.5249, 51.0971], [3.35, 51.3776], [3.9023, 51.2076], [4.2263, 51.3865], [4.5033, 51.4746], [5.827, 51.1257], [5.6938, 50.7748]]]\n    },\n    \"properties\": {\n      \"name\": \"Belgium\",\n      \"id\": \"BE\"\n    },\n    \"id\": \"BE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[25.2588, -17.7936], [25.2242, -17.9153], [25.7613, -18.6495], [26.1683, -19.5381], [26.6784, -19.8928], [27.2217, -20.1458], [27.2807, -20.4788], [27.6997, -20.5307], [27.6696, -21.0642], [28.0455, -21.5729], [29.0372, -21.8113], [29.3648, -22.194], [28.8397, -22.4807], [28.2102, -22.6938], [27.8906, -23.0737], [27.1462, -23.5243], [26.835, -24.2407], [26.3974, -24.6136], [25.9122, -24.7477], [25.5837, -25.6062], [24.7483, -25.8174], [23.8938, -25.6008], [23.2662, -25.2666], [22.8786, -25.4579], [22.6403, -26.0714], [22.0907, -26.5801], [21.6464, -26.8544], [20.74, -26.849], [20.6268, -26.4438], [20.7932, -25.9155], [20.3453, -25.03], [19.9805, -24.777], [19.9774, -22], [20.9708, -22], [20.9779, -20.9684], [20.9739, -18.3188], [23.2986, -18.0276], [23.5804, -18.4528], [24.359, -17.9783], [25.2588, -17.7936]]]\n    },\n    \"properties\": {\n      \"name\": \"Botswana\",\n      \"id\": \"BW\"\n    },\n    \"id\": \"BW\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[91.6317, 27.7599], [91.5949, 27.5575], [92.0836, 27.2907], [91.9984, 26.8548], [90.7395, 26.7718], [90.3458, 26.8903], [89.7638, 26.7016], [88.8579, 26.9613], [88.8912, 27.316], [89.537, 28.1075], [89.9809, 28.3112], [90.3529, 28.0804], [91.6056, 27.9516], [91.6317, 27.7599]]]\n    },\n    \"properties\": {\n      \"name\": \"Bhutan\",\n      \"id\": \"BT\"\n    },\n    \"id\": \"BT\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[115.0266, 4.8999], [114.7465, 4.7179], [114.8402, 4.3934], [114.6085, 4.0241], [114.0638, 4.5927], [114.2995, 4.6074], [115.0266, 4.8999], [115.1398, 4.8999], [115.0266, 4.8999]]]\n    },\n    \"properties\": {\n      \"name\": \"Brunei\",\n      \"id\": \"BN\"\n    },\n    \"id\": \"BN\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-59.4933, 13.0822], [-59.6114, 13.1021], [-59.5916, 13.3179], [-59.4276, 13.1527], [-59.4933, 13.0822]]]\n    },\n    \"properties\": {\n      \"name\": \"Barbados\",\n      \"id\": \"BB\"\n    },\n    \"id\": \"BB\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-51.8326, -1.4336], [-51.5461, -0.6497], [-51.1608, -0.6665], [-51.2764, -1.0216], [-51.8326, -1.4336]]], [[[-49.6287, -0.2293], [-49.1169, -0.1636], [-48.3798, -0.3527], [-48.5396, -0.801], [-48.9289, -1.4824], [-49.5878, -1.7123], [-50.5076, -1.7878], [-50.7597, -1.2405], [-50.7713, -0.6452], [-50.6454, -0.2728], [-50.2481, -0.1165], [-49.6287, -0.2293]]], [[[-56.4828, 1.9422], [-56.0198, 1.8424], [-56.1295, 2.2996], [-55.0058, 2.593], [-54.6163, 2.3266], [-54.13, 2.1211], [-53.7678, 2.3551], [-52.9648, 2.1837], [-52.7006, 2.3635], [-51.9906, 3.7018], [-51.6526, 4.0614], [-51.2198, 4.0938], [-51.0525, 3.2819], [-50.659, 2.1309], [-50.459, 1.8295], [-49.9572, 1.6599], [-49.8988, 1.1628], [-50.2945, 0.8356], [-50.8163, 0.1724], [-51.2829, -0.085], [-51.7026, -0.7624], [-51.9476, -1.5867], [-51.2973, -1.2236], [-50.9177, -1.1153], [-50.69, -1.7616], [-50.4033, -2.0155], [-49.9991, -1.8317], [-49.7195, -1.9263], [-49.3137, -1.7319], [-48.9913, -1.83], [-48.115, -0.7375], [-47.3981, -0.6266], [-46.8113, -0.7797], [-46.6173, -0.9706], [-46.2192, -1.0314], [-45.6448, -1.3479], [-45.0764, -1.4664], [-44.6513, -1.7456], [-44.3082, -2.5353], [-43.9329, -2.5832], [-42.9368, -2.4652], [-42.2496, -2.7919], [-41.8761, -2.7466], [-41.3181, -2.9361], [-40.4745, -2.7954], [-39.9647, -2.8616], [-38.4757, -3.7174], [-38.0489, -4.2163], [-37.1746, -4.9123], [-36.5907, -5.0975], [-35.9799, -5.0544], [-35.5493, -5.1294], [-35.2355, -5.5666], [-34.9882, -6.3936], [-34.8056, -7.2885], [-34.8347, -7.9717], [-35.1578, -8.9305], [-35.3409, -9.2305], [-36.3983, -10.4841], [-36.9378, -10.8206], [-37.4119, -11.497], [-37.6887, -12.0998], [-38.2397, -12.8443], [-38.788, -12.7826], [-38.8352, -13.147], [-39.0894, -13.5882], [-38.9422, -14.0308], [-39.0596, -14.6549], [-38.8805, -15.8645], [-39.2152, -17.3156], [-39.1539, -17.704], [-39.4869, -17.9903], [-39.7399, -18.6397], [-39.6999, -19.278], [-40.0013, -19.7419], [-40.396, -20.5693], [-40.7892, -20.9062], [-41.0471, -21.5059], [-41.1226, -22.0843], [-41.7054, -22.3098], [-41.9804, -22.5806], [-42.0424, -22.9472], [-42.9583, -22.9672], [-43.5327, -23.0462], [-43.8661, -22.9104], [-44.6373, -23.0555], [-45.4233, -23.6854], [-45.9721, -23.7955], [-46.8672, -24.2363], [-47.8766, -24.9976], [-48.5451, -25.8161], [-48.6776, -26.703], [-48.5542, -27.1962], [-48.6208, -28.0755], [-48.7997, -28.5753], [-49.2714, -28.871], [-49.7461, -29.3633], [-50.2994, -30.4259], [-51.1572, -30.3642], [-51.4637, -31.0527], [-51.9724, -31.3839], [-52.1935, -31.8854], [-52.1274, -32.1678], [-52.6523, -33.1377], [-53.3707, -33.7422], [-53.5314, -33.171], [-53.1254, -32.7368], [-53.6017, -32.403], [-53.7618, -32.0568], [-54.2205, -31.8553], [-54.5876, -31.4851], [-55.2546, -31.2258], [-55.5573, -30.876], [-55.8736, -31.0696], [-56.1761, -30.6283], [-56.8328, -30.1072], [-57.2144, -30.2834], [-57.609, -30.188], [-56.9387, -29.595], [-55.7255, -28.2043], [-55.1014, -27.8669], [-54.8291, -27.5508], [-54.3271, -27.4234], [-53.8381, -27.1212], [-53.6712, -26.2249], [-53.8912, -25.6687], [-54.1546, -25.5231], [-54.6158, -25.576], [-54.4731, -25.2204], [-54.2418, -24.0472], [-54.6254, -23.8124], [-55.3662, -23.9913], [-55.6541, -22.8105], [-55.8492, -22.3076], [-56.5239, -22.1025], [-56.9374, -22.2712], [-57.9856, -22.0461], [-57.8303, -20.9981], [-58.1598, -20.1645], [-58.1314, -19.7446], [-57.8005, -19.0809], [-57.5741, -18.2793], [-57.8325, -17.5122], [-58.396, -17.2343], [-58.538, -16.3284], [-60.1756, -16.2693], [-60.299, -14.6185], [-60.5065, -13.7897], [-61.0769, -13.4897], [-61.79, -13.5256], [-62.176, -13.1337], [-62.7654, -12.9974], [-63.0675, -12.6694], [-63.5858, -12.5189], [-64.4205, -12.4399], [-64.5135, -12.2508], [-64.9925, -11.9751], [-65.39, -11.2462], [-65.334, -10.8929], [-65.4368, -10.449], [-65.3132, -10.2533], [-65.3962, -9.7126], [-66.2635, -9.8262], [-66.7301, -9.9754], [-67.5824, -10.5058], [-68.0717, -10.7029], [-68.398, -11.0185], [-69.5785, -10.9519], [-70.2202, -11.0478], [-70.6423, -11.0101], [-70.637, -9.4782], [-71.238, -9.9661], [-72.1815, -10.0038], [-72.379, -9.5102], [-73.2093, -9.4116], [-72.9741, -8.993], [-73.5491, -8.3459], [-74.0021, -7.5562], [-73.7496, -7.3356], [-73.758, -6.9059], [-73.1374, -6.466], [-73.2355, -6.0984], [-72.9799, -5.635], [-72.8871, -5.1228], [-72.6987, -5.0673], [-71.8448, -4.5044], [-70.9737, -4.3504], [-70.7995, -4.1733], [-69.9658, -4.2359], [-69.6691, -2.6676], [-69.4003, -1.1948], [-69.6675, -0.4823], [-70.0706, -0.1387], [-70.0539, 0.5786], [-69.1633, 0.864], [-69.3615, 1.0642], [-69.8522, 1.0593], [-69.8486, 1.7087], [-68.1765, 1.7198], [-67.8152, 1.79], [-67.352, 2.0861], [-66.8761, 1.2231], [-66.4293, 0.8218], [-66.06, 0.7854], [-65.6814, 0.9834], [-65.3609, 0.8685], [-65.1037, 1.1082], [-64.1149, 1.6191], [-64.0354, 1.9045], [-63.394, 2.2223], [-63.3893, 2.4119], [-63.9242, 2.4523], [-64.2188, 3.2047], [-64.2212, 3.5873], [-64.5679, 3.8998], [-64.2556, 4.1404], [-64.0214, 3.9291], [-63.2948, 3.9224], [-62.9685, 3.594], [-62.7122, 4.0179], [-62.1531, 4.0982], [-61.0028, 4.5354], [-60.6046, 4.9944], [-60.7422, 5.2022], [-60.142, 5.239], [-59.9907, 5.0828], [-60.1112, 4.511], [-59.8333, 4.476], [-59.5512, 3.9335], [-59.8544, 3.5873], [-59.9942, 2.6902], [-59.7552, 2.2743], [-59.7563, 1.9005], [-59.2312, 1.3758], [-58.8625, 1.2036], [-58.5119, 1.2848], [-58.3407, 1.5876], [-57.5943, 1.7043], [-57.1189, 2.0141], [-56.8368, 1.8814], [-56.4828, 1.9422]]]]\n    },\n    \"properties\": {\n      \"name\": \"Brazil\",\n      \"id\": \"BR\"\n    },\n    \"id\": \"BR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-58.1598, -20.1645], [-58.1803, -19.8178], [-59.0905, -19.286], [-60.0073, -19.2976], [-61.7569, -19.6451], [-61.917, -20.0553], [-62.2763, -20.5627], [-62.2767, -21.066], [-62.6509, -22.2339], [-62.8434, -21.9973], [-63.8186, -22.0053], [-63.9762, -22.0728], [-64.3739, -22.7612], [-64.6056, -22.229], [-65.0579, -22.103], [-65.771, -22.0994], [-66.0986, -21.8353], [-66.3652, -22.1136], [-66.7117, -22.2161], [-67.1948, -22.8216], [-67.8795, -22.8229], [-67.9883, -22.0572], [-68.1969, -21.3004], [-68.4999, -20.6119], [-68.7451, -20.4588], [-68.6983, -19.721], [-68.4628, -19.4329], [-68.9684, -18.9682], [-69.094, -18.0507], [-69.3133, -17.9432], [-69.5108, -17.506], [-69.6249, -17.2002], [-69.0208, -16.6422], [-68.9134, -16.2618], [-69.2176, -16.149], [-69.4185, -15.6035], [-69.1726, -15.2368], [-69.3748, -14.963], [-69.235, -14.5972], [-68.8803, -14.199], [-69.0741, -13.6828], [-68.9786, -12.8802], [-68.6852, -12.502], [-69.5785, -10.9519], [-68.398, -11.0185], [-68.0717, -10.7029], [-67.5824, -10.5058], [-66.7301, -9.9754], [-66.2635, -9.8262], [-65.3962, -9.7126], [-65.3132, -10.2533], [-65.4368, -10.449], [-65.334, -10.8929], [-65.39, -11.2462], [-64.9925, -11.9751], [-64.5135, -12.2508], [-64.4205, -12.4399], [-63.5858, -12.5189], [-63.0675, -12.6694], [-62.7654, -12.9974], [-62.176, -13.1337], [-61.79, -13.5256], [-61.0769, -13.4897], [-60.5065, -13.7897], [-60.299, -14.6185], [-60.1756, -16.2693], [-58.538, -16.3284], [-58.396, -17.2343], [-57.8325, -17.5122], [-57.5741, -18.2793], [-57.8005, -19.0809], [-58.1314, -19.7446], [-58.1598, -20.1645]]]\n    },\n    \"properties\": {\n      \"name\": \"Bolivia\",\n      \"id\": \"BO\"\n    },\n    \"id\": \"BO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-64.7303, 32.2934], [-64.8202, 32.2596], [-64.6946, 32.387], [-64.7303, 32.2934]]]\n    },\n    \"properties\": {\n      \"name\": \"Bermuda\",\n      \"id\": \"BM\"\n    },\n    \"id\": \"BM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-88.8941, 15.8907], [-89.2374, 15.8942], [-89.1615, 17.8149], [-88.8064, 17.9654], [-88.523, 18.4457], [-88.2957, 18.4723], [-88.0973, 18.1217], [-88.2717, 17.6098], [-88.3134, 16.6328], [-88.8941, 15.8907]]]\n    },\n    \"properties\": {\n      \"name\": \"Belize\",\n      \"id\": \"BZ\"\n    },\n    \"id\": \"BZ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[28.1481, 56.143], [28.7948, 55.9426], [29.375, 55.9386], [29.4824, 55.6845], [30.2335, 55.8452], [30.9069, 55.5699], [31.1213, 54.6484], [31.4036, 54.1959], [31.792, 54.0558], [32.7042, 53.3363], [32.1422, 53.0913], [31.4178, 53.196], [31.5771, 52.3122], [31.7636, 52.1012], [30.9806, 52.0461], [30.5331, 51.5964], [29.3466, 51.3825], [29.1357, 51.6173], [28.5991, 51.5427], [27.2701, 51.6135], [27.1422, 51.752], [25.9251, 51.9136], [24.3617, 51.8674], [23.6053, 51.5179], [23.6523, 52.0403], [23.1969, 52.257], [23.8445, 52.6642], [23.8872, 53.0276], [23.4845, 53.9398], [24.7683, 53.9746], [25.5473, 54.3317], [25.8594, 54.9192], [26.175, 55.0033], [26.5936, 55.6676], [27.5768, 55.7988], [28.1481, 56.143]]]\n    },\n    \"properties\": {\n      \"name\": \"Belarus\",\n      \"id\": \"BY\"\n    },\n    \"id\": \"BY\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-62.832, 17.8766], [-62.8655, 17.9184], [-62.7996, 17.9086], [-62.832, 17.8766]]]\n    },\n    \"properties\": {\n      \"name\": \"Saint Barthelemy\",\n      \"id\": \"BL\"\n    },\n    \"id\": \"BL\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-77.7439, 24.7072], [-78.0449, 24.2873], [-78.2988, 24.7538], [-78.0333, 25.1431], [-77.7439, 24.7072]]], [[[-77.2257, 25.904], [-77.4032, 26.0247], [-77.2468, 26.1565], [-77.2062, 26.489], [-77.0384, 26.3332], [-77.1673, 26.2404], [-77.2257, 25.904]]]]\n    },\n    \"properties\": {\n      \"name\": \"Bahamas\",\n      \"id\": \"BS\"\n    },\n    \"id\": \"BS\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[50.6072, 25.8831], [50.4661, 25.9657], [50.4523, 26.1907], [50.6099, 26.1246], [50.6072, 25.8831]]]\n    },\n    \"properties\": {\n      \"name\": \"Bahrain\",\n      \"id\": \"BH\"\n    },\n    \"id\": \"BH\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[19.007, 44.8693], [19.3568, 44.8586], [19.1517, 44.3024], [19.4882, 43.7036], [19.1943, 43.5331], [18.9404, 43.4967], [18.4437, 42.9685], [18.4362, 42.5597], [17.6678, 42.897], [17.5852, 42.9383], [17.6247, 43.0426], [16.214, 44.215], [15.7369, 44.7658], [15.7879, 45.1791], [16.2935, 45.0086], [16.5305, 45.2168], [17.8129, 45.0779], [18.6625, 45.0774], [19.007, 44.8693]]]\n    },\n    \"properties\": {\n      \"name\": \"Bosnia and Herzegovina\",\n      \"id\": \"BA\"\n    },\n    \"id\": \"BA\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[28.5853, 43.7422], [28.4655, 43.3893], [27.9288, 43.186], [27.8888, 42.7497], [27.4849, 42.4683], [28.0145, 41.9689], [27.2949, 42.0794], [26.6153, 41.9649], [26.321, 41.7167], [26.1355, 41.3856], [25.2512, 41.2436], [24.0558, 41.5272], [23.635, 41.3869], [22.9159, 41.3363], [23.0056, 41.7172], [22.8369, 41.9937], [22.3442, 42.3138], [22.4667, 42.8425], [22.9767, 43.1878], [22.5546, 43.4546], [22.421, 44.0077], [22.7051, 44.2376], [23.2244, 43.8741], [25.4972, 43.6708], [26.2158, 44.0072], [27.0867, 44.1675], [28.5853, 43.7422]]]\n    },\n    \"properties\": {\n      \"name\": \"Bulgaria\",\n      \"id\": \"BG\"\n    },\n    \"id\": \"BG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[92.575, 21.9782], [92.5937, 21.4673], [92.1795, 21.2933], [92.3242, 20.7917], [92.0561, 21.1747], [92.0082, 21.6848], [91.693, 22.5046], [91.4094, 22.7972], [90.9455, 22.597], [90.6334, 23.0941], [90.435, 22.7519], [90.5895, 22.2583], [90.1589, 21.8171], [89.8118, 21.9835], [89.2343, 21.7225], [89.0514, 22.0932], [88.7407, 23.4368], [88.5671, 23.6743], [88.7336, 24.2309], [88.1454, 24.4857], [88.4561, 25.1884], [88.4521, 25.5746], [88.0846, 25.8884], [88.4402, 26.3696], [89.1082, 26.2023], [89.2893, 26.0376], [89.8229, 25.9413], [89.814, 25.3052], [90.4394, 25.1578], [92.0499, 25.1693], [92.2514, 24.895], [91.8768, 24.1954], [91.3672, 24.0933], [91.1603, 23.6605], [91.3152, 23.1043], [91.6198, 22.9796], [91.938, 23.5047], [92.2461, 23.6836], [92.3615, 22.929], [92.4916, 22.6853], [92.575, 21.9782]]]\n    },\n    \"properties\": {\n      \"name\": \"Bangladesh\",\n      \"id\": \"BD\"\n    },\n    \"id\": \"BD\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[0.2175, 14.9114], [0.1638, 14.4973], [0.6183, 13.7036], [0.9779, 13.5518], [0.9872, 13.0418], [1.5652, 12.6356], [2.0739, 12.7142], [2.0912, 12.2778], [2.389, 11.897], [1.9802, 11.4184], [1.4267, 11.4473], [0.9007, 10.9932], [-0.0686, 11.1157], [-0.7014, 10.9888], [-2.8298, 10.9985], [-2.9148, 10.5924], [-2.7865, 10.4019], [-2.6958, 9.4813], [-3.2235, 9.8954], [-3.8776, 9.895], [-4.6258, 9.7134], [-4.9698, 9.9301], [-5.0999, 10.2417], [-5.5236, 10.4259], [-5.4905, 11.0425], [-5.2999, 11.2058], [-5.2881, 11.8277], [-4.798, 12.0319], [-4.4287, 12.3377], [-4.4807, 12.6724], [-4.2272, 12.7936], [-4.3286, 13.119], [-4.0512, 13.3822], [-3.5758, 13.194], [-3.3017, 13.2806], [-3.1985, 13.673], [-2.4572, 14.274], [-2.1132, 14.1684], [-1.7678, 14.4862], [-1.0496, 14.8195], [-0.7604, 15.0477], [-0.2359, 15.0592], [0.2175, 14.9114]]]\n    },\n    \"properties\": {\n      \"name\": \"Burkina Faso\",\n      \"id\": \"BF\"\n    },\n    \"id\": \"BF\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[3.5955, 11.6963], [3.4877, 11.3954], [3.7163, 11.0797], [3.8343, 10.6074], [3.5764, 10.2683], [3.5573, 9.9074], [3.3252, 9.7783], [3.0451, 9.084], [2.7748, 9.0485], [2.686, 7.874], [2.7748, 6.7119], [2.7064, 6.3692], [1.6224, 6.2169], [1.6002, 9.0498], [1.4244, 9.2851], [1.3299, 9.9971], [0.7799, 10.3598], [0.9007, 10.9932], [1.4267, 11.4473], [1.9802, 11.4184], [2.389, 11.897], [2.3659, 12.2219], [2.8782, 12.3679], [3.5955, 11.6963]]]\n    },\n    \"properties\": {\n      \"name\": \"Benin\",\n      \"id\": \"BJ\"\n    },\n    \"id\": \"BJ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[30.5535, -2.3999], [30.5149, -2.9175], [30.7901, -3.2744], [30.4252, -3.5891], [30.1469, -4.0854], [29.7177, -4.456], [29.4034, -4.4494], [29.2232, -3.9109], [29.2245, -3.0533], [29.0146, -2.7204], [29.3901, -2.8087], [29.8682, -2.7164], [29.9303, -2.3396], [30.5535, -2.3999]]]\n    },\n    \"properties\": {\n      \"name\": \"Burundi\",\n      \"id\": \"BI\"\n    },\n    \"id\": \"BI\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[48.5729, 41.8446], [49.1064, 41.3017], [49.2263, 41.026], [49.7758, 40.5839], [49.3244, 39.6083], [49.363, 39.3495], [49.0137, 39.1342], [48.8685, 38.4355], [48.5929, 38.4111], [48.0233, 38.819], [48.2422, 38.9788], [47.9958, 39.6842], [47.773, 39.6486], [46.4906, 38.9065], [46.5501, 39.2012], [45.7897, 39.8812], [45.9646, 40.2337], [45.376, 40.6381], [45.5877, 40.8467], [45.0013, 41.291], [45.281, 41.4495], [46.4577, 41.07], [46.6189, 41.3439], [46.1821, 41.6573], [46.4298, 41.8907], [46.7494, 41.8126], [47.2612, 41.315], [47.8609, 41.2129], [48.5729, 41.8446]]], [[[46.1146, 38.8776], [45.4798, 39.0063], [44.8171, 39.6504], [44.7683, 39.7037], [45.0315, 39.7649], [45.7662, 39.3783], [46.1146, 38.8776]]]]\n    },\n    \"properties\": {\n      \"name\": \"Azerbaijan\",\n      \"id\": \"AZ\"\n    },\n    \"id\": \"AZ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[16.9531, 48.5988], [17.1475, 48.0058], [16.4342, 47.3675], [16.4533, 47.0066], [16.0929, 46.8632], [15.9575, 46.6777], [15.0009, 46.6262], [14.5037, 46.4171], [13.6998, 46.5201], [12.3881, 46.7025], [12.1542, 46.9351], [11.2442, 46.9755], [11.0249, 46.7971], [10.4528, 46.865], [9.5801, 47.0572], [9.5277, 47.2707], [9.5241, 47.5242], [10.3129, 47.3133], [10.4306, 47.541], [11.2979, 47.4247], [11.717, 47.5837], [12.686, 47.6693], [12.8143, 48.1607], [13.4095, 48.3942], [13.8148, 48.7669], [14.0492, 48.6024], [14.6915, 48.5993], [14.972, 48.9839], [16.0573, 48.7549], [16.4777, 48.8001], [16.9531, 48.5988]]]\n    },\n    \"properties\": {\n      \"name\": \"Austria\",\n      \"id\": \"AT\"\n    },\n    \"id\": \"AT\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[145.0431, -40.7868], [145.2832, -40.7699], [146.3175, -41.1637], [146.99, -40.9923], [147.4547, -41.0017], [147.9687, -40.7797], [148.2928, -40.9471], [148.3017, -42.0399], [147.9244, -42.5726], [147.9807, -43.1572], [147.4081, -42.894], [146.8741, -43.6126], [146.0431, -43.5474], [145.2681, -42.5442], [145.2384, -42.0195], [144.778, -41.4189], [144.6462, -40.9808], [145.0431, -40.7868]]], [[[137.5963, -35.7384], [137.4485, -36.0749], [136.7551, -36.0332], [136.6388, -35.7491], [137.334, -35.5924], [137.5963, -35.7384]]], [[[136.7147, -13.8039], [136.8945, -14.2931], [136.3632, -14.2288], [136.4249, -13.8648], [136.7147, -13.8039]]], [[[130.6188, -11.3763], [131.2682, -11.1899], [131.5385, -11.4367], [130.9508, -11.9263], [130.645, -11.7425], [130.6188, -11.3763]]], [[[143.1787, -11.9547], [143.1103, -12.3036], [143.4015, -12.6401], [143.5866, -13.4435], [143.5485, -13.7409], [143.7562, -14.349], [143.9617, -14.4627], [144.4731, -14.2319], [144.648, -14.4924], [145.2876, -14.943], [145.2717, -15.4765], [145.4581, -16.0563], [145.4261, -16.406], [145.902, -17.0701], [146.1257, -17.6352], [146.0325, -18.2731], [146.3334, -18.5536], [146.4813, -19.0787], [147.1387, -19.393], [147.4183, -19.3783], [147.9155, -19.8693], [148.7593, -20.2897], [148.6839, -20.5804], [149.205, -21.1251], [149.7039, -22.4408], [150.0763, -22.1647], [150.5415, -22.5593], [150.7639, -22.5761], [150.8429, -23.4582], [151.1537, -23.784], [151.9025, -24.2008], [152.1298, -24.5976], [152.4565, -24.8023], [152.9137, -25.4321], [153.1649, -25.9644], [153.0842, -26.3039], [153.117, -27.1944], [153.5755, -28.2407], [153.6044, -28.8546], [153.3483, -29.2905], [153.2724, -29.8924], [153.0304, -30.5635], [152.9439, -31.4349], [152.5595, -32.0457], [152.4703, -32.439], [151.8128, -32.9011], [151.4839, -33.3476], [151.2313, -34.0294], [150.9601, -34.2971], [150.6902, -35.1778], [150.1953, -35.8334], [149.9605, -36.8455], [149.9325, -37.5286], [149.2986, -37.8021], [148.2626, -37.8309], [147.3957, -38.2189], [146.8568, -38.6632], [145.9353, -38.9016], [145.791, -38.6668], [144.6653, -38.21], [143.5391, -38.8208], [142.6123, -38.4515], [141.725, -38.2713], [141.4244, -38.3636], [141.0112, -38.0769], [140.6272, -38.0285], [139.7843, -37.2459], [139.8575, -36.6622], [139.5486, -36.0967], [139.0376, -35.6892], [138.1845, -35.6128], [138.5112, -35.0242], [138.4899, -34.7636], [138.0895, -34.1697], [137.6918, -35.1432], [136.8834, -35.2399], [137.0144, -34.9159], [137.3908, -34.9132], [137.4938, -34.1613], [137.9319, -33.5789], [137.8524, -33.2007], [137.4423, -33.1936], [137.2372, -33.6295], [136.4307, -34.0299], [135.6476, -34.9394], [135.1855, -33.9069], [134.7909, -33.3285], [134.3013, -33.1652], [134.1002, -32.7488], [134.2343, -32.5486], [133.5511, -32.1829], [133.212, -32.1837], [132.7575, -31.956], [132.2146, -32.0071], [131.7214, -31.6964], [131.1435, -31.4957], [130.783, -31.604], [130.1296, -31.5792], [128.9462, -31.7026], [128.0677, -32.0666], [127.3198, -32.2641], [125.9171, -32.2969], [124.759, -32.8829], [124.126, -33.1292], [123.6506, -33.8364], [123.2076, -33.9882], [122.7774, -33.891], [122.1511, -33.9917], [121.4054, -33.8266], [119.854, -33.9748], [119.4505, -34.3681], [118.8951, -34.48], [118.1356, -34.9865], [117.5817, -35.0979], [116.5172, -34.9878], [115.9868, -34.7952], [115.7262, -34.5262], [115.0089, -34.2558], [115.1815, -33.6433], [115.5154, -33.5314], [115.6831, -33.1927], [115.6982, -31.6946], [115.1767, -30.8081], [114.9947, -30.2164], [114.9592, -29.4334], [114.5375, -28.5429], [114.165, -28.0808], [114.0283, -27.3471], [113.5818, -26.5583], [113.853, -26.3319], [113.5889, -26.0984], [113.5396, -25.6252], [114.2156, -26.2893], [114.2143, -25.8516], [113.671, -24.9772], [113.4175, -24.4356], [113.5529, -23.7329], [113.7571, -23.4182], [113.683, -22.6378], [113.9586, -21.9392], [114.1637, -22.3231], [114.3777, -22.3413], [114.8588, -21.7359], [115.4563, -21.4917], [116.0107, -21.0305], [116.7068, -20.6536], [117.4063, -20.7211], [118.1991, -20.3753], [118.7513, -20.2617], [119.1047, -19.9954], [119.5858, -20.0384], [120.8785, -19.6651], [121.4937, -19.1067], [121.8337, -18.4772], [122.2372, -17.9685], [122.1604, -17.3138], [122.7202, -16.7878], [122.9705, -16.4367], [123.5254, -17.4856], [123.778, -16.8677], [123.4903, -16.4908], [124.577, -16.1135], [124.3817, -15.758], [124.8389, -15.1609], [125.2432, -14.9448], [125.1789, -14.7148], [125.6814, -14.3881], [126.0209, -14.4946], [126.1115, -14.1142], [126.5696, -14.1608], [126.9034, -13.744], [127.6727, -14.195], [128.1996, -14.7517], [129.4589, -14.9332], [129.7536, -14.7894], [129.3785, -14.3926], [129.7097, -13.9802], [129.8389, -13.5731], [130.2597, -13.3024], [130.1682, -12.9574], [130.3999, -12.688], [130.898, -12.5238], [131.0458, -12.1895], [131.4382, -12.277], [132.3722, -12.2392], [132.5839, -12.1101], [132.6829, -11.5055], [133.0247, -11.4527], [133.1854, -11.7057], [133.904, -11.8322], [134.2369, -12.008], [134.7301, -11.9844], [135.2179, -12.2215], [135.7883, -11.9072], [136.0818, -12.4226], [136.5403, -11.9578], [136.9473, -12.3498], [136.5372, -12.7843], [136.5945, -13.0036], [135.9273, -13.3041], [135.9894, -13.8102], [135.8833, -14.1533], [135.4053, -14.7583], [135.5309, -15.0002], [136.2052, -15.4033], [136.7844, -15.8942], [137.0019, -15.8783], [137.7037, -16.2329], [138.2448, -16.7181], [139.0097, -16.8992], [139.2485, -17.3285], [140.0359, -17.7027], [140.5114, -17.6245], [140.8305, -17.4146], [141.2189, -16.6462], [141.412, -16.0696], [141.6255, -15.0566], [141.523, -14.4702], [141.5945, -14.1528], [141.4724, -13.7977], [141.6455, -13.2593], [141.6779, -12.4914], [141.9513, -11.8961], [142.1684, -10.9466], [142.4565, -10.7074], [142.8369, -11.3071], [142.8724, -11.8215], [143.1787, -11.9547]]]]\n    },\n    \"properties\": {\n      \"name\": \"Australia\",\n      \"id\": \"AU\"\n    },\n    \"id\": \"AU\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[69.185, -49.1093], [69.9157, -49.3486], [69.6129, -49.6509], [68.8721, -49.4445], [69.185, -49.1093]]]\n    },\n    \"properties\": {\n      \"name\": \"French Southern and Antarctic Lands\",\n      \"id\": \"TF\"\n    },\n    \"id\": \"TF\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-59.7339, -80.3442], [-60.5828, -80.9484], [-64.2683, -80.7486], [-65.9801, -80.3846], [-62.5189, -80.3736], [-61.3432, -79.8866], [-59.7064, -79.8755], [-59.7339, -80.3442]]], [[[-159.053, -79.8076], [-161.8655, -79.7037], [-164.2259, -79.3206], [-163.2562, -78.7223], [-161.6431, -78.9012], [-159.6842, -79.4023], [-159.053, -79.8076]]], [[[-70.334, -79.6797], [-71.7836, -79.4445], [-70.544, -78.8838], [-67.4785, -78.3627], [-66.7281, -78.3836], [-69.2509, -79.2101], [-70.334, -79.6797]]], [[[-45.2226, -78.8106], [-43.722, -78.8186], [-42.9654, -79.4769], [-43.5278, -80.1916], [-49.1875, -80.643], [-49.773, -80.7842], [-54.1626, -80.8703], [-53.4823, -80.1889], [-52.2971, -80.1414], [-50.3391, -79.4796], [-50.7331, -79.2829], [-50.2197, -78.6051], [-49.0811, -78.0476], [-46.8257, -77.7852], [-45.5302, -77.8815], [-43.8086, -78.2864], [-43.9473, -78.5975], [-45.2226, -78.8106]]], [[[-120.5562, -73.756], [-120.2726, -73.9891], [-121.0625, -74.3375], [-122.8591, -74.3428], [-122.6247, -73.9655], [-123.1121, -73.6823], [-120.5562, -73.756]]], [[[-126.3299, -73.2864], [-124.9933, -73.8297], [-124.8731, -74.2083], [-127.4143, -73.5163], [-126.3299, -73.2864]]], [[[-74.3544, -73.0986], [-74.5748, -73.6113], [-75.9009, -73.3325], [-75.3769, -72.8203], [-74.3544, -73.0986]]], [[[-91.1608, -73.1821], [-91.6699, -72.6236], [-90.8072, -72.6108], [-91.1608, -73.1821]]], [[[-98.0911, -71.9125], [-96.8695, -71.8508], [-95.6095, -72.0683], [-96.0518, -72.5775], [-98.4078, -72.5477], [-100.1951, -72.2725], [-102.2647, -72.1354], [-102.128, -71.9853], [-98.6155, -71.7638], [-98.0911, -71.9125]]], [[[-73.7067, -70.635], [-74.205, -70.924], [-76.1763, -71.1326], [-76.5004, -70.9413], [-75.0076, -70.6088], [-73.7067, -70.635]]], [[[-74.9871, -69.7277], [-74.8489, -70.1791], [-75.7267, -70.0961], [-74.9871, -69.7277]]], [[[-70.0511, -69.1892], [-69.417, -69.5834], [-68.3361, -70.8561], [-68.2411, -71.822], [-69.2092, -72.5344], [-72.3675, -72.6698], [-73.0864, -72.4079], [-71.1066, -72.047], [-72.4121, -71.6622], [-73.8994, -72.1522], [-75.3531, -71.8783], [-75.2925, -71.6151], [-74.1872, -71.383], [-72.6216, -71.3883], [-71.1941, -70.9848], [-71.0611, -70.5369], [-70.328, -70.3611], [-71.8537, -69.9692], [-71.869, -68.9411], [-70.417, -68.7889], [-70.0511, -69.1892]]], [[[-67.9885, -67.4745], [-68.5804, -67.7328], [-69.0825, -67.403], [-68.3359, -66.802], [-67.6878, -67.1473], [-67.9885, -67.4745]]], [[[-57.0206, -63.3729], [-58.2631, -63.7636], [-58.8954, -64.389], [-59.9632, -64.4312], [-61.0598, -64.9812], [-61.7361, -65.0335], [-62.1453, -65.3318], [-62.3051, -65.8405], [-61.8754, -66.296], [-63.7525, -66.2778], [-64.0778, -66.6542], [-64.6862, -66.8064], [-64.8193, -67.3076], [-65.4432, -67.3262], [-65.6394, -68.1306], [-64.8984, -68.6734], [-63.3436, -68.8106], [-63.4559, -69.0419], [-62.4505, -69.5843], [-61.9611, -70.1201], [-61.9611, -70.9005], [-61.0172, -71.1668], [-61.2136, -71.5641], [-60.7193, -72.0728], [-60.3846, -73.0072], [-61.4054, -73.467], [-60.8789, -73.6122], [-61.0107, -74.4782], [-62.2257, -74.5057], [-63.9247, -75.0047], [-63.3634, -75.4517], [-66.3705, -76.0132], [-69.3044, -76.3506], [-70.0954, -76.6546], [-71.7987, -76.7527], [-75.2683, -76.5814], [-77.19, -76.6298], [-76.2487, -77.2747], [-75.3869, -77.474], [-72.852, -77.5903], [-73.2515, -77.8944], [-74.812, -78.1776], [-80.6015, -77.7519], [-81.4411, -77.8855], [-77.4325, -78.4346], [-77.8691, -78.7454], [-80.2923, -78.8226], [-83.246, -78.3569], [-83.26, -78.7742], [-80.1512, -79.2683], [-76.499, -79.3255], [-76.5578, -79.9035], [-75.2366, -80.8028], [-73.0296, -80.9173], [-70.239, -80.8565], [-64.7501, -81.5219], [-64.1371, -81.8695], [-65.9133, -82.1833], [-62.7357, -82.5273], [-61.5898, -83.3414], [-59.5159, -83.4586], [-57.3535, -82.8403], [-53.9862, -82.2006], [-48.3607, -81.8921], [-43.6692, -82.2699], [-41.4338, -81.2977], [-38.7718, -80.8823], [-37.2093, -81.0638], [-35.3269, -80.6505], [-29.3291, -80.172], [-24.2403, -80.0619], [-25.2586, -79.7623], [-29.9494, -79.599], [-30.3161, -79.1631], [-32.9943, -79.2288], [-36.2391, -78.7742], [-36.181, -78.4684], [-34.0758, -77.4252], [-32.0634, -77.1598], [-28.9336, -76.3701], [-26.0594, -75.9573], [-24.2696, -75.7668], [-19.4931, -75.54], [-17.2989, -74.334], [-15.6725, -74.4072], [-15.7488, -73.9456], [-16.5188, -73.6441], [-15.5959, -73.0968], [-14.3211, -73.123], [-14.2978, -72.7328], [-13.2087, -72.7852], [-11.497, -72.4128], [-10.8254, -71.5534], [-9.8879, -71.0274], [-9.2307, -71.1739], [-8.6466, -71.6728], [-7.7137, -71.5463], [-7.8735, -70.9404], [-5.9364, -70.7127], [-5.5879, -70.8569], [-5.9499, -71.3417], [-2.8121, -71.3208], [-0.8958, -71.3492], [-0.5431, -71.7128], [0.835, -71.2023], [2.6096, -70.9], [5.1132, -70.6559], [8.5232, -70.4739], [9.1415, -70.1836], [10.2175, -70.5081], [11.7014, -70.7664], [12.9292, -70.2133], [13.8228, -70.3434], [15.807, -70.3238], [18.1246, -70.5405], [19.1966, -70.2932], [19.2649, -70.9022], [21.0707, -70.8436], [21.705, -70.2586], [22.979, -70.8103], [23.8037, -70.4046], [24.7567, -70.892], [25.9743, -71.0372], [27.207, -70.9111], [30.0035, -70.2999], [31.3787, -70.2257], [32.6212, -70.0007], [32.9892, -69.6243], [32.5675, -69.0743], [33.1214, -68.689], [34.193, -68.7023], [35.2246, -69.6371], [37.5599, -69.7184], [38.8592, -70.006], [39.7053, -69.4258], [39.8637, -68.9669], [41.1328, -68.5749], [42.409, -68.3521], [42.8196, -68.123], [44.6999, -67.9042], [44.9893, -67.7692], [47.1174, -67.5726], [48.6479, -67.7941], [48.7136, -67.217], [49.2472, -66.9414], [50.6059, -67.15], [50.3325, -66.4447], [51.8843, -66.0199], [53.6719, -65.8587], [54.9481, -65.9164], [55.7102, -66.0798], [57.1853, -66.6133], [56.4533, -66.7798], [56.8919, -67.0563], [57.6274, -67.0142], [58.7376, -67.2295], [59.2507, -67.4851], [60.4821, -67.3853], [62.6878, -67.6476], [63.6989, -67.5082], [68.3279, -67.8895], [69.4163, -67.743], [69.9822, -68.4644], [69.5344, -68.7369], [69.6293, -69.2314], [68.9062, -69.3726], [69.0825, -69.8666], [68.1783, -69.8373], [67.2678, -70.2732], [67.9408, -70.4228], [69.2503, -70.4313], [68.8725, -71.0354], [68.0375, -71.391], [67.4321, -72.0031], [66.8919, -72.9486], [67.9714, -73.0857], [68.4197, -72.5149], [69.5548, -72.3746], [71.2766, -71.624], [71.9047, -70.7069], [72.7601, -70.3957], [72.8223, -70.0961], [73.9422, -69.7432], [75.4239, -69.8933], [75.8913, -69.5754], [77.8174, -69.069], [78.7265, -68.2779], [79.288, -68.1195], [82.017, -67.6902], [83.3043, -67.6032], [84.4851, -67.1145], [85.7107, -67.1611], [87.9803, -66.7882], [89.6986, -66.8229], [92.0734, -66.5077], [93.9644, -66.6897], [94.8397, -66.5015], [95.5411, -66.6311], [98.2577, -66.4673], [99.3701, -66.6484], [100.8891, -66.3581], [101.4746, -65.9511], [102.674, -65.8654], [103.9511, -65.9879], [108.1578, -66.6391], [109.4629, -66.9085], [110.6223, -66.5241], [110.9069, -66.0767], [113.0992, -65.8001], [113.7096, -65.9297], [114.3368, -66.3603], [115.3103, -66.561], [115.2739, -67.0279], [113.991, -67.2117], [114.0265, -67.4412], [116.7134, -67.047], [118.1388, -67.0825], [119.1331, -67.3706], [121.4875, -67.0905], [122.1826, -66.8593], [123.9693, -66.608], [124.5978, -66.7083], [125.8656, -66.3643], [126.6646, -66.4975], [127.5413, -67.051], [129.2369, -67.0417], [129.7412, -66.4686], [130.9517, -66.1912], [131.831, -66.2356], [133.4446, -66.0816], [134.9716, -66.3301], [135.352, -66.1273], [136.1941, -66.2924], [137.7539, -66.4065], [139.9001, -66.715], [141.9726, -66.8069], [142.8884, -67], [143.4481, -66.877], [144.6214, -67.1416], [143.9422, -67.7941], [145.9752, -67.6241], [146.8279, -67.9645], [147.0938, -68.3685], [148.4561, -68.467], [151.068, -68.3849], [151.562, -68.6939], [153.0819, -68.8568], [154.1997, -68.4178], [155.5202, -69.0246], [157.4813, -69.3087], [158.1578, -69.2088], [159.7838, -69.5217], [160.2095, -69.9749], [161.0369, -70.3172], [161.4244, -70.8268], [162.6749, -70.3047], [163.3487, -70.6208], [164.4034, -70.5103], [166.6269, -70.6643], [167.5692, -70.8103], [168.1725, -71.1832], [170.1625, -71.6307], [169.8287, -72.7288], [169.545, -73.0502], [167.6158, -73.337], [164.7758, -74.0286], [165.3027, -74.5936], [163.1672, -74.6021], [162.5337, -75.1671], [161.6797, -75.2177], [162.8156, -75.8463], [162.7628, -76.7456], [164.4296, -78.0422], [166.2087, -78.4515], [164.6347, -78.6033], [160.4829, -79.2017], [160.542, -80.425], [160.9078, -81.3901], [162.8214, -81.8664], [167.2328, -82.9521], [168.1099, -83.3618], [171.9172, -83.6441], [179.403, -84.2061], [180, -84.3517], [180, -89.9989], [-180, -89.9989], [-180, -89.583], [-180, -89.2931], [-180, -88.5869], [-180, -87.8811], [-180, -87.1753], [-180, -86.4695], [-180, -85.7633], [-180, -85.0575], [-180, -84.3517], [-171.7037, -84.5426], [-162.9335, -84.9012], [-157.1276, -85.1858], [-156.9864, -84.8111], [-163.5685, -84.5288], [-164.951, -83.8057], [-167.5528, -83.8111], [-169.1677, -83.4497], [-174.0661, -82.9002], [-171.8213, -82.8474], [-168.4178, -83.2287], [-163.111, -83.329], [-159.4445, -83.5434], [-157.6796, -83.1292], [-155.4594, -82.9805], [-153.0098, -82.4496], [-154.7175, -81.9409], [-153.9566, -81.7003], [-157.0326, -81.319], [-156.5283, -81.1623], [-148.1228, -80.9009], [-150.5755, -80.3536], [-148.3172, -80.0708], [-148.1765, -79.7761], [-152.0914, -79.2416], [-155.21, -78.9646], [-156.4693, -78.6353], [-154.7164, -78.3982], [-155.3416, -78.1918], [-157.2667, -78.1998], [-158.5003, -77.7786], [-158.2136, -77.1571], [-154.8149, -77.1269], [-153.4606, -77.4159], [-151.719, -77.4261], [-149.7177, -77.7976], [-145.967, -77.0688], [-145.7504, -76.7492], [-147.3404, -76.4384], [-146.383, -76.0998], [-143.5742, -75.5635], [-142.3298, -75.4907], [-141.5057, -75.6905], [-139.6911, -75.2129], [-137.6181, -75.0757], [-136.5494, -75.1396], [-135.362, -74.6904], [-133.4748, -74.852], [-132.0495, -74.7659], [-129.7907, -74.8915], [-127.8633, -74.7193], [-123.8894, -74.773], [-119.6771, -74.6544], [-118.3421, -74.3815], [-115.1052, -74.4551], [-114.7909, -73.9886], [-113.5085, -74.0889], [-113.9318, -74.982], [-111.6963, -74.7921], [-111.8064, -74.2696], [-110.307, -74.3668], [-110.3005, -74.7108], [-111.4631, -75.1334], [-109.2722, -75.1849], [-106.6189, -75.3438], [-104.9019, -75.1152], [-101.7081, -75.1272], [-101.0394, -75.4219], [-98.5578, -75.1898], [-101.2518, -74.4858], [-101.7154, -74.0237], [-102.7663, -73.8838], [-102.4108, -73.6166], [-100.9854, -73.7573], [-99.7812, -73.7201], [-100.0209, -73.4027], [-102.6751, -73.321], [-102.4092, -72.9876], [-98.0125, -73.0334], [-96.1521, -73.3095], [-94.2463, -73.313], [-92.241, -73.1785], [-90.9209, -73.3192], [-90.2954, -72.9779], [-88.1945, -72.8585], [-88.4193, -73.2291], [-87.0379, -73.3538], [-85.9808, -73.2087], [-84.9811, -73.5021], [-82.1835, -73.8568], [-81.3088, -73.7383], [-81.2624, -73.3148], [-80.4421, -72.9446], [-79.5217, -73.0897], [-78.4078, -73.5558], [-76.8506, -73.4604], [-77.1349, -73.8177], [-75.293, -73.6388], [-73.9961, -73.6996], [-72.9293, -73.4479], [-68.821, -73.1053], [-67.6671, -72.8345], [-66.8277, -72.0905], [-67.4603, -71.5268], [-67.8884, -70.4215], [-68.4033, -70.0198], [-68.7078, -69.4321], [-67.3717, -69.4125], [-66.9749, -69.1608], [-67.3906, -68.8612], [-66.7933, -68.2402], [-67.1498, -68.0245], [-66.705, -67.5273], [-67.5859, -67.435], [-67.4934, -67.1127], [-66.371, -66.6089], [-65.7664, -66.6249], [-65.6172, -66.1353], [-64.0658, -65.5538], [-64.0381, -65.1791], [-62.5761, -64.7557], [-61.6317, -64.6047], [-60.8643, -64.0734], [-59.5102, -63.8208], [-58.8721, -63.5518], [-57.3897, -63.2264], [-57.0206, -63.3729]]]]\n    },\n    \"properties\": {\n      \"name\": \"Antarctica\",\n      \"id\": \"AQ\"\n    },\n    \"id\": \"AQ\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-170.7262, -14.3513], [-170.8205, -14.3122], [-170.6891, -14.2576], [-170.7262, -14.3513]]]\n    },\n    \"properties\": {\n      \"name\": \"American Samoa\",\n      \"id\": \"AS\"\n    },\n    \"id\": \"AS\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[46.4906, 38.9065], [46.1146, 38.8776], [45.7662, 39.3783], [45.0315, 39.7649], [44.7683, 39.7037], [44.2893, 40.0406], [43.7917, 40.0703], [43.5693, 40.4823], [43.7225, 40.7193], [43.4393, 41.1073], [45.0013, 41.291], [45.5877, 40.8467], [45.376, 40.6381], [45.9646, 40.2337], [45.7897, 39.8812], [46.5501, 39.2012], [46.4906, 38.9065]]]\n    },\n    \"properties\": {\n      \"name\": \"Armenia\",\n      \"id\": \"AM\"\n    },\n    \"id\": \"AM\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[-62.6509, -22.2339], [-62.3726, -22.439], [-61.7984, -23.1821], [-61.0329, -23.7556], [-59.8924, -24.0934], [-59.373, -24.4538], [-58.3654, -24.9594], [-57.8216, -25.1365], [-57.5872, -25.4051], [-57.8906, -26.0065], [-58.2031, -26.3816], [-58.1914, -26.6302], [-58.6186, -27.1323], [-57.1118, -27.4701], [-56.3705, -27.5375], [-56.0673, -27.3076], [-55.7147, -27.415], [-55.4266, -27.0093], [-55.1358, -26.9312], [-54.7552, -26.533], [-54.6158, -25.576], [-54.1546, -25.5231], [-53.8912, -25.6687], [-53.6712, -26.2249], [-53.8381, -27.1212], [-54.3271, -27.4234], [-54.8291, -27.5508], [-55.1014, -27.8669], [-55.7255, -28.2043], [-56.9387, -29.595], [-57.609, -30.188], [-57.8724, -30.5911], [-57.8105, -30.8587], [-58.1889, -31.9241], [-58.2011, -32.4718], [-58.1709, -32.9592], [-58.4244, -33.1115], [-58.5471, -33.6637], [-58.2835, -34.6837], [-57.3036, -35.1884], [-57.1589, -35.5058], [-57.354, -35.7202], [-57.265, -36.1441], [-56.6981, -36.4265], [-56.6721, -36.8513], [-57.3957, -37.7448], [-57.5471, -38.0857], [-58.1792, -38.436], [-59.8282, -38.8381], [-61.1122, -38.993], [-62.067, -38.9189], [-62.3382, -39.1506], [-62.0537, -39.3739], [-62.2869, -39.8955], [-62.395, -40.8907], [-62.959, -41.1095], [-63.7731, -41.1499], [-64.8531, -40.8139], [-65.1334, -40.8805], [-65.059, -41.9698], [-64.4205, -42.4337], [-63.596, -42.4066], [-63.6925, -42.8052], [-64.1306, -42.8616], [-64.6504, -42.5313], [-65.0269, -42.759], [-64.4323, -43.0591], [-64.9856, -43.2935], [-65.2837, -43.6299], [-65.3613, -44.4773], [-65.6476, -44.6615], [-65.6388, -45.0078], [-66.1901, -44.9647], [-66.9414, -45.2573], [-67.5566, -45.9701], [-67.5633, -46.3452], [-66.7769, -47.0057], [-65.9985, -47.0936], [-65.7382, -47.3449], [-65.8101, -47.941], [-67.033, -48.6277], [-67.6849, -49.2465], [-67.7834, -49.8591], [-68.9396, -50.3824], [-69.2352, -50.9506], [-69.0325, -51.6364], [-68.4433, -52.3569], [-69.9603, -52.0084], [-71.9187, -51.9898], [-72.4077, -51.541], [-72.2763, -50.9102], [-72.5098, -50.6075], [-73.153, -50.7384], [-73.5012, -50.1254], [-73.5762, -49.583], [-72.6143, -48.7929], [-72.3549, -48.3658], [-72.518, -47.8762], [-72.346, -47.4927], [-71.905, -47.2015], [-71.9403, -46.8313], [-71.6952, -46.5783], [-71.8757, -46.1606], [-71.7727, -45.7242], [-71.3537, -45.2306], [-71.5962, -44.9794], [-71.2611, -44.7632], [-71.2127, -44.4414], [-71.82, -44.3832], [-71.6801, -43.9296], [-71.905, -43.44], [-71.7816, -43.167], [-72.1464, -42.9899], [-72.1247, -42.2983], [-71.7501, -42.0466], [-71.9114, -41.6506], [-71.932, -40.6918], [-71.6952, -40.3354], [-71.7199, -39.6354], [-71.5394, -39.6025], [-71.4256, -38.9855], [-70.9517, -38.7383], [-71.0281, -38.0413], [-71.1677, -37.7621], [-71.0556, -36.5237], [-70.4048, -36.0616], [-70.4703, -35.3261], [-70.2899, -34.733], [-69.8524, -34.2243], [-69.7978, -33.3987], [-70.0198, -33.2717], [-70.1696, -32.4718], [-70.5853, -31.5694], [-70.5196, -31.1486], [-70.1614, -30.4401], [-69.9563, -30.358], [-69.9277, -29.7694], [-70.0269, -29.3242], [-69.8278, -29.1031], [-69.6569, -28.4138], [-69.1744, -27.9246], [-68.8463, -27.1536], [-68.3461, -27.0279], [-68.5811, -26.5183], [-68.4144, -26.1539], [-68.6002, -25.4859], [-68.3842, -25.0921], [-68.562, -24.8378], [-68.2502, -24.3921], [-67.3562, -24.0339], [-67.0088, -23.0014], [-67.1948, -22.8216], [-66.7117, -22.2161], [-66.3652, -22.1136], [-66.0986, -21.8353], [-65.771, -22.0994], [-65.0579, -22.103], [-64.6056, -22.229], [-64.3739, -22.7612], [-63.9762, -22.0728], [-63.8186, -22.0053], [-62.8434, -21.9973], [-62.6509, -22.2339]]], [[[-68.6532, -54.8538], [-68.6299, -52.6525], [-68.2782, -52.9841], [-68.0085, -53.5638], [-67.2943, -54.0499], [-65.346, -54.8777], [-66.5112, -55.0322], [-66.9305, -54.9248], [-68.6532, -54.8538]]]]\n    },\n    \"properties\": {\n      \"name\": \"Argentina\",\n      \"id\": \"AR\"\n    },\n    \"id\": \"AR\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[56.2979, 25.6505], [56.388, 24.9793], [56.064, 24.7388], [55.7959, 24.8679], [55.7608, 24.2425], [55.1997, 23.0346], [55.186, 22.704], [55.1043, 22.6214], [52.555, 22.933], [51.5927, 24.0787], [51.5683, 24.286], [51.9061, 23.9855], [52.6483, 24.1546], [53.8934, 24.0769], [54.3972, 24.278], [54.747, 24.8102], [55.941, 25.7939], [56.0804, 26.0624], [56.2979, 25.6505]]]\n    },\n    \"properties\": {\n      \"name\": \"United Arab Emirates\",\n      \"id\": \"AE\"\n    },\n    \"id\": \"AE\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[1.7059, 42.5033], [1.4861, 42.4345], [1.4284, 42.5961], [1.7059, 42.5033]]]\n    },\n    \"properties\": {\n      \"name\": \"Andorra\",\n      \"id\": \"AD\"\n    },\n    \"id\": \"AD\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[19.9893, 60.3511], [20.2588, 60.2612], [19.7461, 60.099], [19.6871, 60.2677], [19.9893, 60.3511]]]\n    },\n    \"properties\": {\n      \"name\": \"Aland Islands\",\n      \"id\": \"AX\"\n    },\n    \"id\": \"AX\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[20.0639, 42.5473], [20.4856, 42.2232], [20.566, 41.8739], [20.4892, 41.2724], [20.9641, 40.8498], [21.0312, 40.6585], [20.6574, 40.1174], [20.0013, 39.7095], [19.8517, 40.0437], [19.3981, 40.2847], [19.4407, 41.4247], [19.3426, 41.869], [19.2809, 42.1726], [19.6546, 42.6285], [20.0639, 42.5473]]]\n    },\n    \"properties\": {\n      \"name\": \"Albania\",\n      \"id\": \"AL\"\n    },\n    \"id\": \"AL\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-63.0012, 18.222], [-63.1534, 18.2002], [-63.026, 18.2699], [-63.0012, 18.222]]]\n    },\n    \"properties\": {\n      \"name\": \"Anguilla\",\n      \"id\": \"AI\"\n    },\n    \"id\": \"AI\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"MultiPolygon\",\n      \"coordinates\": [[[[12.2137, -5.7589], [12.0184, -5.0042], [12.3846, -4.6189], [12.8809, -4.4454], [13.0726, -4.6349], [12.8298, -4.7366], [12.5222, -5.1489], [12.5035, -5.6958], [12.2137, -5.7589]]], [[[23.9666, -10.8716], [23.9915, -12.4221], [23.8432, -13.0009], [21.9789, -13.0009], [21.9798, -15.9555], [22.1507, -16.5974], [23.3807, -17.6405], [21.4169, -18.0005], [20.625, -17.9965], [20.3928, -17.8873], [19.6396, -17.8687], [18.8259, -17.7661], [18.3962, -17.3995], [16.9136, -17.3915], [13.9382, -17.3888], [13.4038, -17.008], [13.101, -16.9676], [12.5479, -17.2126], [11.7432, -17.2494], [11.8191, -16.7043], [11.7507, -15.8321], [11.9678, -15.6341], [12.2803, -14.6376], [12.5506, -13.4377], [12.9834, -12.7759], [13.4171, -12.5202], [13.7855, -11.8127], [13.8477, -11.0545], [13.2093, -9.7033], [12.9985, -9.0481], [13.3589, -8.6872], [13.3785, -8.3698], [12.8622, -7.2317], [12.8236, -6.9547], [12.5213, -6.5903], [12.3025, -6.0927], [13.0682, -5.8649], [14.3985, -5.8925], [16.3152, -5.8658], [16.7179, -6.2414], [16.7094, -6.4717], [17.1551, -7.4612], [17.536, -8.076], [18.6532, -7.9361], [19.3408, -7.9668], [19.5277, -7.1447], [19.8753, -6.9862], [20.4821, -6.9161], [20.6077, -7.2778], [21.7511, -7.3054], [21.9056, -8.6934], [21.8133, -9.4689], [22.1977, -10.0406], [22.3069, -10.6914], [22.5613, -11.0558], [23.8339, -11.0136], [23.9666, -10.8716]]]]\n    },\n    \"properties\": {\n      \"name\": \"Angola\",\n      \"id\": \"AO\"\n    },\n    \"id\": \"AO\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[74.8912, 37.2317], [74.5415, 37.0221], [74.0017, 36.8233], [73.7691, 36.8885], [72.623, 36.8295], [71.6206, 36.4366], [71.1852, 36.042], [71.4276, 35.8338], [71.6206, 35.1831], [70.9655, 34.5306], [71.0516, 34.0498], [69.8682, 33.8976], [70.2841, 33.3689], [69.9201, 33.1123], [69.5015, 33.02], [69.2414, 32.4336], [69.2791, 31.9369], [68.869, 31.6342], [68.2138, 31.8073], [67.5781, 31.5063], [67.2874, 31.2178], [66.9243, 31.3057], [66.3974, 30.9124], [66.1772, 29.8355], [65.0954, 29.5594], [64.521, 29.5643], [64.0989, 29.3921], [63.5676, 29.4982], [62.4765, 29.4085], [60.8434, 29.8586], [61.104, 30.1285], [61.7844, 30.8321], [61.6602, 31.3825], [60.854, 31.4833], [60.8292, 32.2494], [60.5606, 33.1376], [60.9171, 33.5052], [60.5109, 33.6388], [60.4856, 34.0947], [61.08, 34.8555], [61.262, 35.6194], [62.6105, 35.2333], [63.0566, 35.4459], [63.1086, 35.8187], [63.8623, 36.0123], [64.5108, 36.3408], [64.8162, 37.1322], [65.5549, 37.2512], [65.7648, 37.569], [66.5221, 37.3484], [67.069, 37.3346], [67.7592, 37.1722], [68.0677, 36.9498], [68.9604, 37.3249], [69.2649, 37.1083], [69.4922, 37.553], [70.2512, 37.664], [70.2148, 37.9246], [70.8789, 38.4564], [71.2558, 38.3068], [71.5518, 37.933], [71.4329, 37.1273], [71.8022, 36.6941], [72.8955, 37.2676], [73.4814, 37.4718], [73.7496, 37.2317], [74.2596, 37.4154], [74.8912, 37.2317]]]\n    },\n    \"properties\": {\n      \"name\": \"Afghanistan\",\n      \"id\": \"AF\"\n    },\n    \"id\": \"AF\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-61.7161, 17.0368], [-61.8597, 17.0133], [-61.8173, 17.1691], [-61.7161, 17.0368]]]\n    },\n    \"properties\": {\n      \"name\": \"Antigua and Barbuda\",\n      \"id\": \"AG\"\n    },\n    \"id\": \"AG\"\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [[[-69.8992, 12.4518], [-69.9421, 12.4385], [-70.0661, 12.5468], [-69.9732, 12.5677], [-69.8992, 12.4518]]]\n    },\n    \"properties\": {\n      \"name\": \"Aruba\",\n      \"id\": \"AW\"\n    },\n    \"id\": \"AW\"\n  }]\n};","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\nexport default function () {\n  return new Adder();\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function reset() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function add(y) {\n    _add(temp, y, this.t);\n\n    _add(this, temp.s, this.s);\n\n    if (this.s) this.t += temp.t;else this.s = temp.t;\n  },\n  valueOf: function valueOf() {\n    return this.s;\n  }\n};\nvar temp = new Adder();\n\nfunction _add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = a - av + (b - bv);\n}","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function (x) {\n  return x > 0 ? 1 : x < 0 ? -1 : 0;\n};\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}","export default function noop() {}","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function Feature(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function FeatureCollection(object, stream) {\n    var features = object.features,\n        i = -1,\n        n = features.length;\n\n    while (++i < n) {\n      streamGeometry(features[i].geometry, stream);\n    }\n  }\n};\nvar streamGeometryType = {\n  Sphere: function Sphere(object, stream) {\n    stream.sphere();\n  },\n  Point: function Point(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function MultiPoint(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      object = coordinates[i], stream.point(object[0], object[1], object[2]);\n    }\n  },\n  LineString: function LineString(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function MultiLineString(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      streamLine(coordinates[i], stream, 0);\n    }\n  },\n  Polygon: function Polygon(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function MultiPolygon(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      streamPolygon(coordinates[i], stream);\n    }\n  },\n  GeometryCollection: function GeometryCollection(object, stream) {\n    var geometries = object.geometries,\n        i = -1,\n        n = geometries.length;\n\n    while (++i < n) {\n      streamGeometry(geometries[i], stream);\n    }\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1,\n      n = coordinates.length - closed,\n      coordinate;\n  stream.lineStart();\n\n  while (++i < n) {\n    coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  }\n\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1,\n      n = coordinates.length;\n  stream.polygonStart();\n\n  while (++i < n) {\n    streamLine(coordinates[i], stream, 1);\n  }\n\n  stream.polygonEnd();\n}\n\nexport default function (object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}","import adder from \"./adder\";\nimport { atan2, cos, quarterPi, radians, sin, tau } from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\nexport var areaRingSum = adder();\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function polygonStart() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function polygonEnd() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function sphere() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u)); // Advance the previous points.\n\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function (object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}","import { asin, atan2, cos, sin, sqrt } from \"./math\";\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\nexport function cartesian(spherical) {\n  var lambda = spherical[0],\n      phi = spherical[1],\n      cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n} // TODO return a\n\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n} // TODO return d\n\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}","import adder from \"./adder\";\nimport { areaStream, areaRingSum } from \"./area\";\nimport { cartesian, cartesianCross, cartesianNormalizeInPlace, spherical } from \"./cartesian\";\nimport { abs, degrees, epsilon, radians } from \"./math\";\nimport stream from \"./stream\";\nvar lambda0,\n    phi0,\n    lambda1,\n    phi1,\n    // bounds\nlambda2,\n    // previous lambda-coordinate\nlambda00,\n    phi00,\n    // first point\np0,\n    // previous 3D point\ndeltaSum = adder(),\n    ranges,\n    range;\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function polygonStart() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function polygonEnd() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > epsilon) phi1 = 90;else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  },\n  sphere: function sphere() {\n    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n} // Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\n\n\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function (feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream); // First, sort ranges by their minimum longitudes.\n\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare); // Then, merge any ranges that overlap.\n\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    } // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n\n\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n  return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];\n}","import { asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt } from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\nvar W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, // first point\nx0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function polygonStart() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function polygonEnd() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n}; // Arithmetic mean of Cartesian vectors.\n\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n} // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\n\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m),\n      // line weight = angle\n  v = m && -w / m; // area weight multiplier\n\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function (object) {\n  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z; // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1; // If the feature has zero length, fall back to arithmetic mean of point vectors.\n\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z; // If the feature still has an undefined ccentroid, then return.\n\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}","export default function (a, b) {\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function (x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n  return compose;\n}","import compose from \"./compose\";\nimport { abs, asin, atan2, cos, degrees, pi, radians, sin, tau } from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function (lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];\n  }\n\n  rotation.invert = function (lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];\n  };\n\n  return rotation;\n}\n\nexport default function (rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function (coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}","import { cartesian, cartesianNormalizeInPlace, spherical } from \"./cartesian\";\nimport constant from \"./constant\";\nimport { acos, cos, degrees, epsilon, radians, sin, tau } from \"./math\";\nimport { rotateRadians } from \"./rotation\"; // Generates a circle centered at [0°, 0°], with a given radius and precision.\n\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function () {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {\n    point: point\n  };\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {\n      type: \"Polygon\",\n      coordinates: [ring]\n    };\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function (_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function (_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}","import noop from \"../noop\";\nexport default function () {\n  var lines = [],\n      line;\n  return {\n    point: function point(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function lineStart() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function rejoin() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function result() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}","import { abs, epsilon } from \"./math\";\nexport default function (a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n\n  this.e = entry; // is an entry?\n\n  this.v = false; // visited\n\n  this.n = this.p = null; // next & previous\n} // A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\n\n\nexport default function (segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n  segments.forEach(function (segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n,\n        p0 = segment[0],\n        p1 = segment[n],\n        x; // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n\n      for (i = 0; i < n; ++i) {\n        stream.point((p0 = segment[i])[0], p0[1]);\n      }\n\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n  if (!subject.length) return;\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n\n    while (current.v) {\n      if ((current = current.n) === start) return;\n    }\n\n    points = current.z;\n    stream.lineStart();\n\n    do {\n      current.v = current.o.v = true;\n\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) {\n            stream.point((point = points[i])[0], point[1]);\n          }\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n\n          for (i = points.length - 1; i >= 0; --i) {\n            stream.point((point = points[i])[0], point[1]);\n          }\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n\n        current = current.p;\n      }\n\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n\n  a.n = b = array[0];\n  b.p = a;\n}","import adder from \"./adder\";\nimport { cartesian, cartesianCross, cartesianNormalizeInPlace } from \"./cartesian\";\nimport { abs, asin, atan2, cos, epsilon, halfPi, pi, quarterPi, sign, sin, tau } from \"./math\";\nvar sum = adder();\n\nfunction longitude(point) {\n  if (abs(point[0]) <= pi) return point[0];else return sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function (polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n  sum.reset();\n  if (sinPhi === 1) phi = halfPi + epsilon;else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta; // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  } // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ winding & 1;\n}","import clipBuffer from \"./buffer\";\nimport clipRejoin from \"./rejoin\";\nimport { epsilon, halfPi } from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport { merge } from \"d3-array\";\nexport default function (pointVisible, clipLine, interpolate, start) {\n  return function (sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function polygonStart() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function polygonEnd() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function sphere() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i,\n          n = ringSegments.length,\n          m,\n          segment,\n          point;\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n      if (!n) return; // No intersections.\n\n      if (clean & 1) {\n        segment = ringSegments[0];\n\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n\n          for (i = 0; i < m; ++i) {\n            sink.point((point = segment[i])[0], point[1]);\n          }\n\n          sink.lineEnd();\n        }\n\n        return;\n      } // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n\n\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n} // Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\n\n\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}","import clip from \"./index\";\nimport { abs, atan, cos, epsilon, halfPi, pi, sin } from \"../math\";\nexport default clip(function () {\n  return true;\n}, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\n\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      _clean; // no intersections\n\n\n  return {\n    lineStart: function lineStart() {\n      stream.lineStart();\n      _clean = 1;\n    },\n    point: function point(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n\n      if (abs(delta - pi) < epsilon) {\n        // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        _clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) {\n        // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        _clean = 0;\n      }\n\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function lineEnd() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function clean() {\n      return 2 - _clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}","import { cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical } from \"../cartesian\";\nimport { circleStream } from \"../circle\";\nimport { abs, cos, epsilon, pi, radians, sqrt } from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\nexport default function (radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  } // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n\n\n  function clipLine(stream) {\n    var point0, // previous point\n    c0, // code for previous point\n    v0, // visibility of previous point\n    v00, // visibility of first point\n    _clean; // no intersections\n\n\n    return {\n      lineStart: function lineStart() {\n        v00 = v0 = false;\n        _clean = 1;\n      },\n      point: function point(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart(); // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n\n        if (v !== v0) {\n          _clean = 0;\n\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t; // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            _clean = 0;\n\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function lineEnd() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function clean() {\n        return _clean | (v00 && v0) << 1;\n      }\n    };\n  } // Intersects the great circle between a and b with the clip circle.\n\n\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n\n    var n1 = [1, 0, 0],\n        // normal\n    n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0],\n        // cartesianDot(n1, n2),\n    determinant = n2n2 - n1n2 * n1n2; // Two polar points.\n\n    if (!determinant) return !two && a;\n    var c1 = cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.\n\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n    if (t2 < 0) return;\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n    if (!two) return q; // Two intersection points.\n\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.\n\n    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  } // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n\n\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}","export default function (a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}","import { abs, epsilon } from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipRejoin from \"./rejoin\";\nimport { merge } from \"d3-array\";\nvar clipMax = 1e9,\n    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0,\n        a1 = 0;\n\n    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {\n      do {\n        stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      } while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n  }\n\n  return function (stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__,\n        y__,\n        v__,\n        // first point\n    x_,\n        y_,\n        v_,\n        // previous point\n    first,\n        clean;\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n\n          if (a1 <= y1) {\n            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;\n          } else {\n            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;\n          }\n        }\n      }\n\n      return winding;\n    } // Buffer geometry within a polygon and then clip it en masse.\n\n\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n\n      if (cleanInside || visible) {\n        stream.polygonStart();\n\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n\n        stream.polygonEnd();\n      }\n\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    } // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n\n\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}","import clipRectangle from \"./rectangle\";\nexport default function () {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n  return clip = {\n    stream: function stream(_stream) {\n      return cache && cacheStream === _stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = _stream);\n    },\n    extent: function extent(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}","import adder from \"./adder\";\nimport { abs, atan2, cos, radians, sin, sqrt } from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function (object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}","import length from \"./length\";\nvar coordinates = [null, null],\n    object = {\n  type: \"LineString\",\n  coordinates: coordinates\n};\nexport default function (a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}","import { range } from \"d3-array\";\nimport { abs, ceil, epsilon } from \"./math\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function (x) {\n    return y.map(function (y) {\n      return [x, y];\n    });\n  };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function (y) {\n    return x.map(function (x) {\n      return [x, y];\n    });\n  };\n}\n\nexport default function graticule() {\n  var x1,\n      x0,\n      X1,\n      X0,\n      y1,\n      y0,\n      Y1,\n      Y0,\n      dx = 10,\n      dy = dx,\n      DX = 90,\n      DY = 360,\n      x,\n      y,\n      X,\n      Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {\n      type: \"MultiLineString\",\n      coordinates: lines()\n    };\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X).concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function (x) {\n      return abs(x % DX) > epsilon;\n    }).map(x)).concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function (y) {\n      return abs(y % DY) > epsilon;\n    }).map(y));\n  }\n\n  graticule.lines = function () {\n    return lines().map(function (coordinates) {\n      return {\n        type: \"LineString\",\n        coordinates: coordinates\n      };\n    });\n  };\n\n  graticule.outline = function () {\n    return {\n      type: \"Polygon\",\n      coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]\n    };\n  };\n\n  graticule.extent = function (_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function (_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function (_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function (_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function (_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function (_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function (_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule.extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]]).extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\nexport function graticule10() {\n  return graticule()();\n}","import { asin, atan2, cos, degrees, haversin, radians, sin, sqrt } from \"./math\";\nexport default function (a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n  var interpolate = d ? function (t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [atan2(y, x) * degrees, atan2(z, sqrt(x * x + y * y)) * degrees];\n  } : function () {\n    return [x0 * degrees, y0 * degrees];\n  };\n  interpolate.distance = d;\n  return interpolate;\n}","import adder from \"../adder\";\nimport { abs } from \"../math\";\nimport noop from \"../noop\";\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function polygonStart() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function polygonEnd() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function result() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;","export default function (x) {\n  return x;\n}","import noop from \"../noop\";\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function result() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;","import { sqrt } from \"../math\"; // TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function polygonStart() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function polygonEnd() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function result() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];\n    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;","import { tau } from \"../math\";\nimport noop from \"../noop\";\nexport default function PathContext(context) {\n  this._context = context;\n}\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function pointRadius(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function polygonStart() {\n    this._line = 0;\n  },\n  polygonEnd: function polygonEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function point(x, y) {\n    switch (this._point) {\n      case 0:\n        {\n          this._context.moveTo(x, y);\n\n          this._point = 1;\n          break;\n        }\n\n      case 1:\n        {\n          this._context.lineTo(x, y);\n\n          break;\n        }\n\n      default:\n        {\n          this._context.moveTo(x + this._radius, y);\n\n          this._context.arc(x, y, this._radius, 0, tau);\n\n          break;\n        }\n    }\n  },\n  result: noop\n};","import adder from \"../adder\";\nimport { sqrt } from \"../math\";\nimport noop from \"../noop\";\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\nvar lengthStream = {\n  point: noop,\n  lineStart: function lineStart() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function lineEnd() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function polygonStart() {\n    lengthRing = true;\n  },\n  polygonEnd: function polygonEnd() {\n    lengthRing = null;\n  },\n  result: function result() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;","export default function PathString() {\n  this._string = [];\n}\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function pointRadius(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function polygonStart() {\n    this._line = 0;\n  },\n  polygonEnd: function polygonEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function point(x, y) {\n    switch (this._point) {\n      case 0:\n        {\n          this._string.push(\"M\", x, \",\", y);\n\n          this._point = 1;\n          break;\n        }\n\n      case 1:\n        {\n          this._string.push(\"L\", x, \",\", y);\n\n          break;\n        }\n\n      default:\n        {\n          if (this._circle == null) this._circle = circle(this._radius);\n\n          this._string.push(\"M\", x, \",\", y, this._circle);\n\n          break;\n        }\n    }\n  },\n  result: function result() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n}","export default function (methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\nexport function transformer(methods) {\n  return function (stream) {\n    var s = new TransformStream();\n\n    for (var key in methods) {\n      s[key] = methods[key];\n    }\n\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function point(x, y) {\n    this.stream.point(x, y);\n  },\n  sphere: function sphere() {\n    this.stream.sphere();\n  },\n  lineStart: function lineStart() {\n    this.stream.lineStart();\n  },\n  lineEnd: function lineEnd() {\n    this.stream.lineEnd();\n  },\n  polygonStart: function polygonStart() {\n    this.stream.polygonStart();\n  },\n  polygonEnd: function polygonEnd() {\n    this.stream.polygonEnd();\n  }\n};","import { default as geoStream } from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function (b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function (b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function (b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}","import { cartesian } from \"../cartesian\";\nimport { abs, asin, atan2, cos, epsilon, radians, sqrt } from \"../math\";\nimport { transformer } from \"../transform\";\nvar maxDepth = 16,\n    // maximum depth of subdivision\ncosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function (project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function point(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n      || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n        // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n\n  return function (stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n    lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function polygonStart() {\n        stream.polygonStart();\n        resampleStream.lineStart = ringStart;\n      },\n      polygonEnd: function polygonEnd() {\n        stream.polygonEnd();\n        resampleStream.lineStart = lineStart;\n      }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]),\n          p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport clipRectangle from \"../clip/rectangle\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport { cos, degrees, radians, sin, sqrt } from \"../math\";\nimport { rotateRadians } from \"../rotation\";\nimport { transformer } from \"../transform\";\nimport { fitExtent, fitSize, fitWidth, fitHeight } from \"./fit\";\nimport resample from \"./resample\";\nvar transformRadians = transformer({\n  point: function point(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function point(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n\n  transform.invert = function (x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n\n  function transform(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n\n  transform.invert = function (x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function () {\n    return project;\n  })();\n}\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150,\n      // scale\n  x = 480,\n      y = 250,\n      // translate\n  lambda = 0,\n      phi = 0,\n      // center\n  deltaLambda = 0,\n      deltaPhi = 0,\n      deltaGamma = 0,\n      rotate,\n      // pre-rotate\n  alpha = 0,\n      // post-rotate\n  theta = null,\n      preclip = clipAntimeridian,\n      // pre-clip angle\n  x0 = null,\n      y0,\n      x1,\n      y1,\n      postclip = identity,\n      // post-clip extent\n  delta2 = 0.5,\n      // precision\n  projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function (_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function (_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function (_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function (_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function (_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function (_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function (_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function (_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function (_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.precision = function (_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function (extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function (size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function (width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function (height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function () {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}","import { degrees, pi, radians } from \"../math\";\nimport { projectionMutator } from \"./index\";\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function (_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}","import { abs, asin, atan2, cos, epsilon, sign, sin, sqrt } from \"../math\";\nimport { conicProjection } from \"./conic\";\nimport { cylindricalEqualAreaRaw } from \"./cylindricalEqualArea\";\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0),\n      n = (sy0 + sin(y1)) / 2; // Are the parallels symmetrical around the Equator?\n\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n  var c = 1 + sy0 * (2 * n - sy0),\n      r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function (x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\nexport default function () {\n  return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);\n}","import { asin, cos, sin } from \"../math\";\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function (x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}","import conicEqualArea from \"./conicEqualArea\";\nexport default function () {\n  return conicEqualArea().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);\n}","import { epsilon } from \"../math\";\nimport albers from \"./albers\";\nimport conicEqualArea from \"./conicEqualArea\";\nimport { fitExtent, fitSize, fitWidth, fitHeight } from \"./fit\"; // The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\n\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function point(x, y) {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].point(x, y);\n      }\n    },\n    sphere: function sphere() {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].sphere();\n      }\n    },\n    lineStart: function lineStart() {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].lineStart();\n      }\n    },\n    lineEnd: function lineEnd() {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].lineEnd();\n      }\n    },\n    polygonStart: function polygonStart() {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].polygonStart();\n      }\n    },\n    polygonEnd: function polygonEnd() {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].polygonEnd();\n      }\n    }\n  };\n} // A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n\n\nexport default function () {\n  var cache,\n      cacheStream,\n      lower48 = albers(),\n      lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),\n      alaskaPoint,\n      // EPSG:3338\n  hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),\n      hawaiiPoint,\n      // ESRI:102007\n  _point,\n      pointStream = {\n    point: function point(x, y) {\n      _point = [x, y];\n    }\n  };\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0],\n        y = coordinates[1];\n    return _point = null, (lower48Point.point(x, y), _point) || (alaskaPoint.point(x, y), _point) || (hawaiiPoint.point(x, y), _point);\n  }\n\n  albersUsa.invert = function (coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function (_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function (_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function (_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(),\n        x = +_[0],\n        y = +_[1];\n    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);\n    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);\n    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);\n    return reset();\n  };\n\n  albersUsa.fitExtent = function (extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function (size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function (width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function (height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}","import { asin, atan2, cos, sin, sqrt } from \"../math\";\nexport function azimuthalRaw(scale) {\n  return function (x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [k * cy * sin(x), k * sin(y)];\n  };\n}\nexport function azimuthalInvert(angle) {\n  return function (x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [atan2(x * sc, z * cc), asin(z && y * sc / z)];\n  };\n}","import { asin, sqrt } from \"../math\";\nimport { azimuthalRaw, azimuthalInvert } from \"./azimuthal\";\nimport projection from \"./index\";\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {\n  return 2 * asin(z / 2);\n});\nexport default function () {\n  return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);\n}","import { acos, sin } from \"../math\";\nimport { azimuthalRaw, azimuthalInvert } from \"./azimuthal\";\nimport projection from \"./index\";\nexport var azimuthalEquidistantRaw = azimuthalRaw(function (c) {\n  return (c = acos(c)) && c / sin(c);\n});\nazimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {\n  return z;\n});\nexport default function () {\n  return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);\n}","import { atan, exp, halfPi, log, pi, tan, tau } from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function (x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function () {\n  return mercatorProjection(mercatorRaw).scale(961 / tau);\n}\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null,\n      y0,\n      x1,\n      y1; // clip extent\n\n  m.scale = function (_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function (_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function (_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function (_) {\n    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}","import projection from \"./index\";\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\nequirectangularRaw.invert = equirectangularRaw;\nexport default function () {\n  return projection(equirectangularRaw).scale(152.63);\n}","import { abs, atan2, cos, epsilon, sign, sin, sqrt } from \"../math\";\nimport { conicProjection } from \"./conic\";\nimport { equirectangularRaw } from \"./equirectangular\";\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y,\n        nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function (x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\nexport default function () {\n  return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);\n}","import projection from \"./index.js\";\nimport { abs, asin, cos, epsilon2, sin, sqrt } from \"../math.js\";\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\nexport function equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)),\n      l2 = l * l,\n      l6 = l2 * l2 * l2;\n  return [lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];\n}\n\nequalEarthRaw.invert = function (x, y) {\n  var l = y,\n      l2 = l * l,\n      l6 = l2 * l2 * l2;\n\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n\n  return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l), asin(sin(l) / M)];\n};\n\nexport default function () {\n  return projection(equalEarthRaw).scale(177.158);\n}","import { atan, cos, sin } from \"../math\";\nimport { azimuthalInvert } from \"./azimuthal\";\nimport projection from \"./index\";\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y),\n      k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\ngnomonicRaw.invert = azimuthalInvert(atan);\nexport default function () {\n  return projection(gnomonicRaw).scale(144.049).clipAngle(60);\n}","import projection from \"./index\";\nimport { abs, epsilon } from \"../math\";\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi,\n      phi4 = phi2 * phi2;\n  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];\n}\n\nnaturalEarth1Raw.invert = function (x, y) {\n  var phi = y,\n      i = 25,\n      delta;\n\n  do {\n    var phi2 = phi * phi,\n        phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n\n  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];\n};\n\nexport default function () {\n  return projection(naturalEarth1Raw).scale(175.295);\n}","import { asin, cos, epsilon, sin } from \"../math\";\nimport { azimuthalInvert } from \"./azimuthal\";\nimport projection from \"./index\";\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\northographicRaw.invert = azimuthalInvert(asin);\nexport default function () {\n  return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon);\n}","import { atan, cos, sin } from \"../math\";\nimport { azimuthalInvert } from \"./azimuthal\";\nimport projection from \"./index\";\nexport function stereographicRaw(x, y) {\n  var cy = cos(y),\n      k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\nstereographicRaw.invert = azimuthalInvert(function (z) {\n  return 2 * atan(z);\n});\nexport default function () {\n  return projection(stereographicRaw).scale(250).clipAngle(142);\n}","import { atan, exp, halfPi, log, tan } from \"../math\";\nimport { mercatorProjection } from \"./mercator\";\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function (x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function () {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function (_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function (_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90]).scale(159.155);\n}","/**\r\n * Map series module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Series, SeriesDataItem } from \"../series/Series\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar MapSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapSeriesDataItem\";\n    _this.values.value = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(MapSeriesDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      return this.values.value.value;\n    },\n\n    /**\r\n     * Numeric value of the data item.\r\n     *\r\n     * Value may be used in heat-map calculations.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"zoomLevel\", {\n    /**\r\n     * @return Zoom level\r\n     */\n    get: function get() {\n      return this.properties[\"zoomLevel\"];\n    },\n\n    /**\r\n     * When `zoomToMapObject()` is called the map will either calculate suitable\r\n     * zoom level itself or use object's `zoomLevel` if set.\r\n     *\r\n     * @param value  Zoom level\r\n     */\n    set: function set(value) {\n      this.setProperty(\"zoomLevel\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"zoomGeoPoint\", {\n    /**\r\n     * @return Zoom geo point\r\n     */\n    get: function get() {\n      return this.properties[\"zoomGeoPoint\"];\n    },\n\n    /**\r\n     * When `zoomToMapObject()` is called the map will either calculate suitable\r\n     * center position itself or use object's `zoomGeoPoint` if set.\r\n     *\r\n     * @param value  Zoom geo point\r\n     */\n    set: function set(value) {\n      this.setProperty(\"zoomGeoPoint\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"east\", {\n    /**\r\n     * Longitude of the East-most point of the element.\r\n     */\n    get: function get() {\n      return this._east;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"west\", {\n    /**\r\n     * Longitude of the West-most point of the element.\r\n     */\n    get: function get() {\n      return this._west;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"south\", {\n    /**\r\n     * Latitude of the South-most point of the element.\r\n     */\n    get: function get() {\n      return this._south;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"north\", {\n    /**\r\n     * Latitude of the North-most point of the element.\r\n     */\n    get: function get() {\n      return this._north;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the item's bounding coordinates: coordinates of the East, West,\r\n   * North, and South-most points.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  MapSeriesDataItem.prototype.updateExtremes = function () {\n    var geometry = this.getFeature().geometry;\n\n    if (geometry) {\n      var bounds = d3geo.geoBounds(geometry);\n      var west = bounds[0][0];\n      var south = bounds[0][1];\n      var north = bounds[1][1];\n      var east = bounds[1][0];\n      var changed = false;\n\n      if (north != this.north) {\n        this._north = $math.round(north, 6);\n        changed = true;\n      }\n\n      if (south != this.south) {\n        this._south = $math.round(south, 6);\n        changed = true;\n      }\n\n      if (east != this.east) {\n        this._east = $math.round(east, 6);\n        changed = true;\n      }\n\n      if (west != this.west) {\n        this._west = $math.round(west, 6);\n        changed = true;\n      } // solves single russia prob\n\n\n      if (this._east < this._west) {\n        this._east = 180;\n        this._west = -180;\n      }\n\n      if (changed) {\n        this.component.invalidateDataItems();\n      }\n    }\n  };\n\n  MapSeriesDataItem.prototype.getFeature = function () {\n    return {};\n  };\n\n  return MapSeriesDataItem;\n}(SeriesDataItem);\n\nexport { MapSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapSeries() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapSeries\"; // Set defaults\n\n    _this.isMeasured = false;\n    _this.nonScalingStroke = true; // Set data fields\n\n    _this.dataFields.value = \"value\";\n    _this.ignoreBounds = false;\n\n    if (_this.tooltip) {\n      _this.tooltip.showInViewport = true;\n    } // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapSeries.prototype.createDataItem = function () {\n    return new MapSeriesDataItem();\n  };\n  /**\r\n   * Checks whether object should be included in series.\r\n   *\r\n   * @param includes  A list of explicitly included ids\r\n   * @param excludes  A list of explicitly excluded ids\r\n   * @param id        Id of the object\r\n   * @return Include?\r\n   */\n\n\n  MapSeries.prototype.checkInclude = function (includes, excludes, id) {\n    if (includes) {\n      if (includes.length == 0) {\n        return false;\n      } else {\n        if (includes.indexOf(id) == -1) {\n          return false;\n        }\n      }\n    }\n\n    if (excludes && excludes.length > 0) {\n      if (excludes.indexOf(id) != -1) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Object.defineProperty(MapSeries.prototype, \"useGeodata\", {\n    /**\r\n     * @return Use GeoJSON data?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"useGeodata\");\n    },\n\n    /**\r\n     * Should the map extract all the data about element from the GeoJSON?\r\n     *\r\n     * This is especially relevant for [[MapPolygonSeries]]. If not set to `true`\r\n     * polygon series will need to contain geographical data in itself in order\r\n     * to be drawn.\r\n     *\r\n     * If this is set to `true`, series will try to extract data for its objects\r\n     * from either chart-level `geodata` or from series' `geodata` which holds\r\n     * map infor in GeoJSON format.\r\n     *\r\n     * @default false\r\n     * @param value  Use GeoJSON data?\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"useGeodata\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"include\", {\n    /**\r\n     * @return Included objects\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"include\");\n    },\n\n    /**\r\n     * A list of object ids that should be explictly included in the series.\r\n     *\r\n     * If this is not set, the series will automatically include all of the\r\n     * objects, available in the GeoJSON map. (minus the ones listed in\r\n     * `exclude`)\r\n     *\r\n     * If you need to display only specific objects, use `include`. E.g.:\r\n     *\r\n     * `include = [\"FR\", \"ES\", \"DE\"];`\r\n     *\r\n     * The above will show only France, Spain, and Germany out of the whole map.\r\n     *\r\n     * @param value  Included objects\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"include\", value)) {\n        this.processIncExc();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  MapSeries.prototype.processIncExc = function () {\n    //this.data = [];\n    this.invalidateData();\n  };\n\n  Object.defineProperty(MapSeries.prototype, \"ignoreBounds\", {\n    /**\r\n     * @return Ignore bounds?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"ignoreBounds\");\n    },\n\n    /**\r\n     * Should this series be included when calculating bounds of the map?\r\n     *\r\n     * This affects initial zoom as well as limits for zoom/pan.\r\n     *\r\n     * By default, `MapPolygonSeries` included (true), while `MapImageSeries` and\r\n     * `MapLineSeries` are not (`false`).\r\n     *\r\n     * @since 4.3.0\r\n     * @param  value  Ignore bounds?\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"ignoreBounds\", value)) {\n        if (this.chart) {\n          this.chart.updateExtremes();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"exclude\", {\n    /**\r\n     * @return Excluded ids\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"exclude\");\n    },\n\n    /**\r\n     * A list of object ids that should be excluded from the series.\r\n     *\r\n     * E.g. you want to include all of the areas from a GeoJSON map, except\r\n     * Antarctica.\r\n     *\r\n     * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n     *\r\n     * @param value  Excluded ids\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"exclude\", value)) {\n        this.processIncExc();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a newly added object.\r\n   *\r\n   * @param event [description]\r\n   */\n\n  MapSeries.prototype.handleObjectAdded = function (event) {\n    var mapObject = event.newValue;\n    mapObject.parent = this;\n    mapObject.series = this;\n    mapObject.strokeWidth = mapObject.strokeWidth;\n  };\n\n  Object.defineProperty(MapSeries.prototype, \"geodata\", {\n    /**\r\n     * @return GeoJSON data\r\n     */\n    get: function get() {\n      return this._geodata;\n    },\n\n    /**\r\n     * Map data in GeoJSON format.\r\n     *\r\n     * The series supports the following GeoJSON objects: `Point`, `LineString`,\r\n     * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n     *\r\n     * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n     * @param geoJSON GeoJSON data\r\n     */\n    set: function set(geodata) {\n      if (geodata != this._geodata) {\n        this._geodata = geodata;\n\n        for (var i = this.data.length - 1; i >= 0; i--) {\n          if (this.data[i].madeFromGeoData == true) {\n            this.data.splice(i, 1);\n          }\n        }\n\n        this.disposeData();\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"geodataSource\", {\n    /**\r\n     * Returns a [[DataSource]] specifically for loading Component's data.\r\n     *\r\n     * @return Data source\r\n     */\n    get: function get() {\n      if (!this._dataSources[\"geodata\"]) {\n        this.getDataSource(\"geodata\");\n      }\n\n      return this._dataSources[\"geodata\"];\n    },\n\n    /**\r\n     * Sets a [[DataSource]] to be used for loading Component's data.\r\n     *\r\n     * @param value Data source\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (this._dataSources[\"geodata\"]) {\n        this.removeDispose(this._dataSources[\"geodata\"]);\n      }\n\n      this._dataSources[\"geodata\"] = value;\n      this._dataSources[\"geodata\"].component = this;\n      this.events.on(\"inited\", function () {\n        _this.loadData(\"geodata\");\n      }, undefined, false);\n      this.setDataSourceEvents(value, \"geodata\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  MapSeries.prototype.getFeatures = function () {\n    return;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapSeries.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n\n    this.updateExtremes();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapSeries.prototype.updateExtremes = function () {\n    var north;\n    var south;\n    var east;\n    var west;\n    this.dataItems.each(function (dataItem) {\n      if (dataItem.north > north || !$type.isNumber(north)) {\n        north = dataItem.north;\n      }\n\n      if (dataItem.south < south || !$type.isNumber(south)) {\n        south = dataItem.south;\n      }\n\n      if (dataItem.west < west || !$type.isNumber(west)) {\n        west = dataItem.west;\n      }\n\n      if (dataItem.east > east || !$type.isNumber(east)) {\n        east = dataItem.east;\n      }\n    });\n\n    if (this._mapObjects) {\n      this._mapObjects.each(function (mapObject) {\n        if (mapObject.north > north || !$type.isNumber(north)) {\n          north = mapObject.north;\n        }\n\n        if (mapObject.south < south || !$type.isNumber(south)) {\n          south = mapObject.south;\n        }\n\n        if (mapObject.west < west || !$type.isNumber(west)) {\n          west = mapObject.west;\n        }\n\n        if (mapObject.east > east || !$type.isNumber(east)) {\n          east = mapObject.east;\n        }\n      });\n    }\n\n    if (this.north != north || this.east != east || this.south != south || this.west != west) {\n      this._north = north;\n      this._east = east;\n      this._west = west;\n      this._south = south;\n      this.dispatch(\"geoBoundsChanged\");\n\n      if (!this.ignoreBounds) {\n        this.chart.updateExtremes();\n      }\n    }\n  };\n\n  Object.defineProperty(MapSeries.prototype, \"north\", {\n    /**\r\n     * @return Latitude\r\n     */\n    get: function get() {\n      if ($type.isNumber(this._northDefined)) {\n        return this._northDefined;\n      }\n\n      return this._north;\n    },\n\n    /**\r\n     * North-most latitude of the series.\r\n     *\r\n     * By default, this holds auto-calculated latitude of the extremity.\r\n     *\r\n     * It can be overridden manually.\r\n     *\r\n     * @param  value  Latitude\r\n     */\n    set: function set(value) {\n      this._northDefined = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"south\", {\n    /**\r\n     * @return Latitude\r\n     */\n    get: function get() {\n      if ($type.isNumber(this._southDefined)) {\n        return this._southDefined;\n      }\n\n      return this._south;\n    },\n\n    /**\r\n     * South-most latitude of the series.\r\n     *\r\n     * By default, this holds auto-calculated latitude of the extremity.\r\n     *\r\n     * It can be overridden manually.\r\n     *\r\n     * @param  value  Latitude\r\n     */\n    set: function set(value) {\n      this._southDefined = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"west\", {\n    /**\r\n     * @return Longitude\r\n     */\n    get: function get() {\n      if ($type.isNumber(this._westDefined)) {\n        return this._westDefined;\n      }\n\n      return this._west;\n    },\n\n    /**\r\n     * West-most longitude of the series.\r\n     *\r\n     * By default, this holds auto-calculated longitude of the extremity.\r\n     *\r\n     * It can be overridden manually.\r\n     *\r\n     * @param  value  Longitude\r\n     */\n    set: function set(value) {\n      this._westDefined = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"east\", {\n    /**\r\n     * @return Longitude\r\n     */\n    get: function get() {\n      if ($type.isNumber(this._eastDefined)) {\n        return this._eastDefined;\n      }\n\n      return this._east;\n    },\n\n    /**\r\n     * East-most longitude of the series.\r\n     *\r\n     * By default, this holds auto-calculated longitude of the extremity.\r\n     *\r\n     * It can be overridden manually.\r\n     *\r\n     * @param  value  Longitude\r\n     */\n    set: function set(value) {\n      this._eastDefined = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  MapSeries.prototype.processConfig = function (config) {\n    if ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\n      var name_1 = config[\"geodata\"]; // Check if there's a map loaded by such name\n\n      if ($type.hasValue(window[\"am4geodata_\" + config[\"geodata\"]])) {\n        config[\"geodata\"] = window[\"am4geodata_\" + config[\"geodata\"]];\n      } // Nope. Let's try maybe we got JSON as string?\n      else {\n          try {\n            config[\"geodata\"] = JSON.parse(config[\"geodata\"]);\n          } catch (e) {\n            // No go again. Error out.\n            throw Error(\"MapChart error: Geodata `\" + name_1 + \"` is not loaded or is incorrect.\");\n          }\n        }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Adds `projection` to \"as is\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as is?\r\n   */\n\n\n  MapSeries.prototype.asIs = function (field) {\n    return field == \"geodata\" || _super.prototype.asIs.call(this, field);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapSeries.prototype.updateTooltipBounds = function () {\n    if (this.tooltip && this.topParent) {\n      this.tooltip.setBounds({\n        x: 10,\n        y: 10,\n        width: this.topParent.maxWidth - 20,\n        height: this.topParent.maxHeight - 20\n      });\n    }\n  };\n\n  return MapSeries;\n}(Series);\n\nexport { MapSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapSeries\"] = MapSeries;\nregistry.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;","/**\r\n * Map object module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as d3geo from \"d3-geo\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\n\nvar MapObject =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapObject, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapObject() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapObject\"; // Set defaults\n\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n    _this.clickable = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates this object, forcing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapObject.prototype.validate = function () {\n    if (this.series) {\n      this.readerTitle = this.series.itemReaderText;\n    }\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * Updates the item's bounding coordinates: coordinates of the East, West,\r\n   * North, and South-most points.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapObject.prototype.updateExtremes = function () {\n    var feature = this.getFeature();\n\n    if (feature) {\n      var geometry = feature.geometry;\n\n      if (geometry) {\n        var bounds = d3geo.geoBounds(geometry);\n        var west = bounds[0][0];\n        var south = bounds[0][1];\n        var north = bounds[1][1];\n        var east = bounds[1][0];\n        var changed = false;\n\n        if (north != this.north) {\n          this._north = $math.round(north, 8);\n          changed = true;\n        }\n\n        if (south != this.south) {\n          this._south = $math.round(south);\n          changed = true;\n        }\n\n        if (east != this.east) {\n          this._east = $math.round(east);\n          changed = true;\n        }\n\n        if (west != this.west) {\n          this._west = $math.round(west);\n          changed = true;\n        }\n\n        if (changed) {\n          this.dispatch(\"geoBoundsChanged\");\n\n          if (this.series) {\n            this.series.invalidateDataItems();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapObject.prototype.getFeature = function () {\n    return {};\n  };\n\n  Object.defineProperty(MapObject.prototype, \"east\", {\n    /**\r\n     * Longitude of the East-most point of the element.\r\n     */\n    get: function get() {\n      if ($type.isNumber(this._east)) {\n        return this._east;\n      } else if (this.dataItem) {\n        return this.dataItem.east;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapObject.prototype, \"west\", {\n    /**\r\n     * Longitude of the West-most point of the element.\r\n     */\n    get: function get() {\n      if ($type.isNumber(this._west)) {\n        return this._west;\n      } else if (this.dataItem) {\n        return this.dataItem.west;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapObject.prototype, \"south\", {\n    /**\r\n     * Latitude of the South-most point of the element.\r\n     */\n    get: function get() {\n      if ($type.isNumber(this._south)) {\n        return this._south;\n      } else if (this.dataItem) {\n        return this.dataItem.south;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapObject.prototype, \"north\", {\n    /**\r\n     * Latitude of the North-most point of the element.\r\n     */\n    get: function get() {\n      if ($type.isNumber(this._north)) {\n        return this._north;\n      } else if (this.dataItem) {\n        return this.dataItem.north;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapObject;\n}(Container);\n\nexport { MapObject };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapObject\"] = MapObject;","/**\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapObject } from \"./MapObject\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\n\nvar MapImage =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapImage, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapImage() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapImage\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(MapImage.prototype, \"latitude\", {\n    /**\r\n     * @return Latitude\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"latitude\");\n    },\n\n    /**\r\n     * Latitude image is placed at.\r\n     *\r\n     * @param value  Latitude\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"latitude\", value, false, true);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImage.prototype, \"longitude\", {\n    /**\r\n     * @return Longitude\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"longitude\");\n    },\n\n    /**\r\n     * Longitude image is placed on.\r\n     *\r\n     * @param value  Longitude\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"longitude\", value, false, true);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Repositions the image to it's current position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  MapImage.prototype.validatePosition = function () {\n    if ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\n      //this.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\n      var p = this.series.chart.projection.d3Projection([this.longitude, this.latitude]);\n      var visible = this.series.chart.projection.d3Path({\n        type: 'Point',\n        coordinates: [this.longitude, this.latitude]\n      });\n\n      if (!visible) {\n        this.__disabled = true;\n      } else {\n        this.__disabled = false;\n      }\n\n      this.moveTo({\n        x: p[0],\n        y: p[1]\n      });\n    }\n\n    _super.prototype.validatePosition.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapImage.prototype.getFeature = function () {\n    return {\n      \"type\": \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [this.longitude, this.latitude]\n      }\n    };\n  };\n\n  return MapImage;\n}(MapObject);\n\nexport { MapImage };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapImage\"] = MapImage;","/**\r\n * A collection of Map-related utility functions.\r\n */\nimport * as $array from \"../../core/utils/Array\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n *\r\n * @param multiPolygon  Source multi-polygon\r\n * @return Geo-multipolygon\r\n */\n\nexport function multiPolygonToGeo(multiPolygon) {\n  return $array.map(multiPolygon, function (polygon) {\n    var surface = polygon[0];\n    var hole = polygon[1]; //let holePoints: IGeoPoint[] = [];\n\n    var geoArea = [];\n\n    if (surface) {\n      geoArea.push(multiPointToGeo(surface));\n    }\n\n    if (hole) {\n      geoArea.push(multiPointToGeo(hole));\n    }\n\n    return geoArea;\n  });\n}\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n *\r\n * @param multiLine  Source multiline\r\n * @return Geo-multiline\r\n */\n\nexport function multiLineToGeo(multiLine) {\n  return $array.map(multiLine, function (multiLine) {\n    return multiPointToGeo(multiLine);\n  });\n}\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\n\nexport function multiPointToGeo(points) {\n  return $array.map(points, function (point) {\n    return pointToGeo(point);\n  });\n}\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\n\nexport function multiGeoToPoint(geoPoints) {\n  return $array.map(geoPoints, function (geoPoint) {\n    return [geoPoint.longitude, geoPoint.latitude];\n  });\n}\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n *\r\n * @param point  Source point\r\n * @return Geo-point\r\n */\n\nexport function pointToGeo(point) {\n  return {\n    longitude: point[0],\n    latitude: point[1]\n  };\n}\n/**\r\n * Converts geo line (collection of lat/long coordinates) to screen line (x/y).\r\n *\r\n * @param   multiGeoLine  Source geo line\r\n * @return                Screen line\r\n */\n\nexport function multiGeoLineToMultiLine(multiGeoLine) {\n  return $array.map(multiGeoLine, function (segment) {\n    return $array.map(segment, function (geoPoint) {\n      return [geoPoint.longitude, geoPoint.latitude];\n    });\n  });\n}\n/**\r\n * Converts a geo polygon (collection of lat/long coordinates) to screen\r\n * polygon (x/y).\r\n *\r\n * @param   multiGeoPolygon  Source polygon\r\n * @return                   Screen polygon\r\n */\n\nexport function multiGeoPolygonToMultipolygon(multiGeoPolygon) {\n  return $array.map(multiGeoPolygon, function (geoPolygon) {\n    var surface = geoPolygon[0];\n    var hole = geoPolygon[1];\n    var multiPolygon = [];\n\n    if (surface) {\n      multiPolygon.push(multiGeoToPoint(surface));\n    }\n\n    if (hole) {\n      multiPolygon.push(multiGeoToPoint(hole));\n    }\n\n    return multiPolygon;\n  });\n}\n/**\r\n * Returns a set of geographical coordinates for the circle with a center\r\n * at specific lat/long coordinates and radius (in degrees).\r\n *\r\n * @since 4.3.0\r\n * @param   longitude  Center longitude\r\n * @param   latitude   Center latitude\r\n * @param   radius     Radius (degrees)\r\n * @return             Circle coordinates\r\n */\n\nexport function getCircle(longitude, latitude, radius) {\n  return [d3geo.geoCircle().center([longitude, latitude]).radius(radius)().coordinates];\n}\n/**\r\n * Returns a set of screen coordinates that represents a \"background\" area\r\n * between provided extremities.\r\n *\r\n * @since 4.3.0\r\n * @param   north  North latitude\r\n * @param   east   East longitude\r\n * @param   south  South latitude\r\n * @param   west   West longitude\r\n * @return         Polygon\r\n */\n\nexport function getBackground(north, east, south, west) {\n  var multiPolygon = [];\n\n  if (west == -180) {\n    west = -179.9999;\n  }\n\n  if (south == -90) {\n    south = -89.9999;\n  }\n\n  if (north == 90) {\n    north = 89.9999;\n  }\n\n  if (east == 180) {\n    east = 179.9999;\n  }\n\n  var stepLong = Math.min(90, (east - west) / Math.ceil((east - west) / 90));\n  var stepLat = (north - south) / Math.ceil((north - south) / 90);\n\n  for (var ln = west; ln < east; ln = ln + stepLong) {\n    var surface = [];\n    multiPolygon.push([surface]);\n\n    if (ln + stepLong > east) {\n      stepLong = east - ln;\n    }\n\n    for (var ll = ln; ll <= ln + stepLong; ll = ll + 5) {\n      surface.push([ll, north]);\n    }\n\n    for (var lt = north; lt >= south; lt = lt - stepLat) {\n      surface.push([ln + stepLong, lt]);\n    }\n\n    for (var ll = ln + stepLong; ll >= ln; ll = ll - 5) {\n      surface.push([ll, south]);\n    }\n\n    for (var lt = south; lt <= north; lt = lt + stepLat) {\n      surface.push([ln, lt]);\n    }\n  }\n\n  return multiPolygon;\n}","/**\r\n * Map polygon module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapObject } from \"./MapObject\";\nimport { Polygon } from \"../../core/elements/Polygon\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport $polylabel from \"polylabel\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a polygon on the map.\r\n *\r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\n\nvar MapPolygon =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapPolygon, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapPolygon() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapPolygon\";\n    _this.polygon = _this.createChild(Polygon);\n    _this.polygon.shouldClone = false;\n    _this.polygon.applyOnClones = true;\n    var interfaceColors = new InterfaceColorSet();\n    _this.fill = interfaceColors.getFor(\"secondaryButton\");\n    _this.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\n    _this.strokeOpacity = 1;\n    _this.tooltipPosition = \"pointer\";\n    _this.nonScalingStroke = true;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapPolygon.prototype.getFeature = function () {\n    if (this.multiPolygon && this.multiPolygon.length > 0) {\n      return {\n        \"type\": \"Feature\",\n        geometry: {\n          type: \"MultiPolygon\",\n          coordinates: this.multiPolygon\n        }\n      };\n    }\n  };\n\n  Object.defineProperty(MapPolygon.prototype, \"multiGeoPolygon\", {\n    /**\r\n     * @return Polygon coordinates\r\n     */\n    get: function get() {\n      var multiGeoPolygon = this.getPropertyValue(\"multiGeoPolygon\");\n\n      if (!multiGeoPolygon && this.dataItem) {\n        multiGeoPolygon = this.dataItem.multiPolygon;\n      }\n\n      return multiGeoPolygon;\n    },\n\n    /**\r\n     * Set of coordinates for the polygon.\r\n     *\r\n     * @param multiGeoPolygon  Polygon coordinates\r\n     */\n    set: function set(multiGeoPolygon) {\n      this.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\n      this.multiPolygon = $mapUtils.multiGeoPolygonToMultipolygon(multiGeoPolygon);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygon.prototype, \"multiPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      var multiPolygon = this.getPropertyValue(\"multiPolygon\");\n\n      if (!multiPolygon && this.dataItem) {\n        multiPolygon = this.dataItem.multiPolygon;\n      }\n\n      return multiPolygon;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Part 1\r\n     *   [\r\n     *     [\r\n     *       [ 100, 150 ],\r\n     *       [ 120, 200 ],\r\n     *       [ 150, 220 ],\r\n     *       [ 170, 240 ],\r\n     *       [ 100, 150 ]\r\n     *     ]\r\n     *   ],\r\n     *\r\n     *   // Part 2\r\n     *   [\r\n     *     [\r\n     *       [ 300, 350 ],\r\n     *       [ 320, 400 ],\r\n     *       [ 350, 420 ],\r\n     *       [ 370, 440 ],\r\n     *       [ 300, 350 ]\r\n     *     ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param multiPolygon  Coordinates\r\n     */\n    set: function set(multiPolygon) {\n      if (this.setPropertyValue(\"multiPolygon\", multiPolygon)) {\n        this.updateExtremes();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates the polygon, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  MapPolygon.prototype.validate = function () {\n    if (this.series) {\n      var projection = this.series.chart.projection;\n      projection.d3Projection.precision(0.5);\n      var pathGenerator = projection.d3Path;\n\n      if (this.multiPolygon) {\n        if (this.series) {\n          var feature = {\n            type: \"MultiPolygon\",\n            coordinates: this.multiPolygon\n          };\n          this.polygon.path = pathGenerator(feature);\n        }\n\n        if (this.series.calculateVisualCenter) {\n          var biggestArea = 0;\n          var biggestPolygon = this.multiPolygon[0];\n\n          if (this.multiPolygon.length > 1) {\n            for (var i = 0; i < this.multiPolygon.length; i++) {\n              var polygon = this.multiPolygon[i];\n              var area = d3geo.geoArea({\n                type: \"Polygon\",\n                coordinates: polygon\n              });\n\n              if (area > biggestArea) {\n                biggestPolygon = polygon;\n                biggestArea = area;\n              }\n            }\n          }\n\n          var center = $polylabel(biggestPolygon);\n          this._visualLongitude = center[0];\n          this._visualLatitude = center[1];\n        } else {\n          this._visualLongitude = this.longitude;\n          this._visualLatitude = this.latitude;\n        }\n      }\n    }\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapPolygon.prototype.measureElement = function () {// Overriding, just to avoid extra measure\n  };\n\n  Object.defineProperty(MapPolygon.prototype, \"latitude\", {\n    /**\r\n     * Latitude of the geometrical center of the polygon.\r\n     *\r\n     * @readonly\r\n     * @return Center latitude\r\n     */\n    get: function get() {\n      return this.north + (this.south - this.north) / 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygon.prototype, \"longitude\", {\n    /**\r\n     * Longitude of the geometrical center of the polygon.\r\n     *\r\n     * @readonly\r\n     * @return Center longitude\r\n     */\n    get: function get() {\n      return this.east + (this.west - this.east) / 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygon.prototype, \"visualLatitude\", {\n    /**\r\n     * @return  Latitude\r\n     */\n    get: function get() {\n      var latitude = this.getPropertyValue(\"visualLatitude\");\n\n      if ($type.isNumber(latitude)) {\n        return latitude;\n      }\n\n      return this.adapter.apply(\"visualLatitude\", this._visualLatitude);\n    },\n\n    /**\r\n     * Latitude of the visual center of the polygon.\r\n     *\r\n     * It may (and probably won't) coincide with geometrical center.\r\n     *\r\n     * @since 4.3.0\r\n     * @param  value  Latitude\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"visualLatitude\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygon.prototype, \"visualLongitude\", {\n    /**\r\n     * @return  Longitude\r\n     */\n    get: function get() {\n      var longitude = this.getPropertyValue(\"visualLongitude\");\n\n      if ($type.isNumber(longitude)) {\n        return longitude;\n      }\n\n      return this.adapter.apply(\"visualLongitude\", this._visualLongitude);\n    },\n\n    /**\r\n     * Longitude of the visual center of the polygon.\r\n     *\r\n     * It may (and probably won't) coincide with geometrical center.\r\n     *\r\n     * @since 4.3.0\r\n     * @param  value  Longitude\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"visualLongitude\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygon.prototype, \"pixelWidth\", {\n    /**\r\n     * Not 100% sure about this, as if we add something to MapPolygon this\r\n     * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n     * be positioned properly\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Element's width in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function get() {\n      return this.polygon.pixelWidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygon.prototype, \"pixelHeight\", {\n    /**\r\n     * Element's height in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function get() {\n      return this.polygon.pixelHeight;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties from another instance of [[MapPolygon]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n  MapPolygon.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.polygon.copyFrom(source.polygon);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapPolygon.prototype.updateExtremes = function () {\n    _super.prototype.updateExtremes.call(this);\n  };\n\n  Object.defineProperty(MapPolygon.prototype, \"boxArea\", {\n    /**\r\n     * @ignore\r\n     * used to sorth polygons from big to small\r\n     */\n    get: function get() {\n      return (this.north - this.south) * (this.east - this.west);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * X coordinate for the slice tooltip.\r\n   *\r\n   * @return X\r\n   */\n\n  MapPolygon.prototype.getTooltipX = function () {\n    return this.series.chart.projection.convert({\n      longitude: this.visualLongitude,\n      latitude: this.visualLatitude\n    }).x;\n  };\n  /**\r\n   * Y coordinate for the slice tooltip.\r\n   *\r\n   * @return Y\r\n   */\n\n\n  MapPolygon.prototype.getTooltipY = function () {\n    return this.series.chart.projection.convert({\n      longitude: this.visualLongitude,\n      latitude: this.visualLatitude\n    }).y;\n  };\n\n  return MapPolygon;\n}(MapObject);\n\nexport { MapPolygon };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;","/**\r\n * Map polygon series module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapPolygon } from \"./MapPolygon\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\n\nvar MapPolygonSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapPolygonSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapPolygonSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapPolygonSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapPolygonSeriesDataItem.prototype.getFeature = function () {\n    if (this.multiPolygon && this.multiPolygon.length > 0) {\n      return {\n        \"type\": \"Feature\",\n        geometry: {\n          type: \"MultiPolygon\",\n          coordinates: this.multiPolygon\n        }\n      };\n    }\n  };\n\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"mapPolygon\", {\n    /**\r\n     * A [[MapPolygon]] element related to this data item.\r\n     *\r\n     * @readonly\r\n     * @return Element\r\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._mapPolygon) {\n        var mapPolygon_1 = this.component.mapPolygons.create();\n        this._mapPolygon = mapPolygon_1;\n        this.addSprite(mapPolygon_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapPolygons.removeValue(mapPolygon_1);\n          }\n        }));\n\n        this.mapObject = mapPolygon_1;\n      }\n\n      return this._mapPolygon;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"polygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._polygon;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a single polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     [ 100, 150 ],\r\n     *     [ 120, 200 ],\r\n     *     [ 150, 200 ],\r\n     *     [ 170, 240 ],\r\n     *     [ 100, 150 ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param polygon  Coordinates\r\n     */\n    set: function set(polygon) {\n      this._polygon = polygon;\n      this.multiPolygon = [polygon];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"multiPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._multiPolygon;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Part 1\r\n     *   [\r\n     *     [\r\n     *       [ 100, 150 ],\r\n     *       [ 120, 200 ],\r\n     *       [ 150, 220 ],\r\n     *       [ 170, 240 ],\r\n     *       [ 100, 150 ]\r\n     *     ]\r\n     *   ],\r\n     *\r\n     *   // Part 2\r\n     *   [\r\n     *     [\r\n     *       [ 300, 350 ],\r\n     *       [ 320, 400 ],\r\n     *       [ 350, 420 ],\r\n     *       [ 370, 440 ],\r\n     *       [ 300, 350 ]\r\n     *     ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param multiPolygon  Coordinates\r\n     */\n    set: function set(multiPolygon) {\n      this._multiPolygon = multiPolygon;\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"geoPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._geoPolygon;\n    },\n\n    /**\r\n     * A collection of lat/long coordinates for a single polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     { latitude: -10.0, longitude: -10.0 },\r\n     *     { latitude: 10.0, longitude: -10.0 },\r\n     *     { latitude: 10.0, longitude: 10.0 },\r\n     *     { latitude: -10.0, longitude: -10.0 }\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n     * @param geoPolygon  Coordinates\r\n     */\n    set: function set(geoPolygon) {\n      this._geoPolygon = geoPolygon;\n      this.multiGeoPolygon = [geoPolygon];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"multiGeoPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._multiGeoPolygon;\n    },\n\n    /**\r\n     * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     [\r\n     *       { longitude: 180.0, latitude: 40.0 },\r\n     *       { longitude: 180.0, latitude: 50.0 },\r\n     *       { longitude: 170.0, latitude: 50.0 },\r\n     *       { longitude: 170.0, latitude: 40.0 },\r\n     *       { longitude: 180.0, latitude: 40.0 }\r\n     *     ]\r\n     *   ],\r\n     *   [\r\n     *     [\r\n     *       { longitude: -170.0, latitude: 40.0 },\r\n     *       { longitude: -170.0, latitude: 50.0 },\r\n     *       { longitude: -180.0, latitude: 50.0 },\r\n     *       { longitude: -180.0, latitude: 40.0 },\r\n     *       { longitude: -170.0, latitude: 40.0 }\r\n     *     ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n     * @param multiGeoPolygon  Coordinates\r\n     */\n    set: function set(multiGeoPolygon) {\n      this._multiGeoPolygon = multiGeoPolygon;\n      this.multiPolygon = $mapUtils.multiGeoPolygonToMultipolygon(multiGeoPolygon);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapPolygonSeriesDataItem;\n}(MapSeriesDataItem);\n\nexport { MapPolygonSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapPolygonSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapPolygonSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapPolygonSeries() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Indicates if series should automatically calculate visual center of the\r\n     * polygons (accessible via `visualLongitude` and `visualLatitude` properties\r\n     * of the [[MapPolygon]]).\r\n     *\r\n     * @default false\r\n     * @since 4.3.0\r\n     */\n\n\n    _this.calculateVisualCenter = false;\n    _this.className = \"MapPolygonSeries\"; // Set data fields\n\n    _this.dataFields.multiPolygon = \"multiPolygon\";\n    _this.dataFields.polygon = \"polygon\";\n    _this.dataFields.geoPolygon = \"geoPolygon\";\n    _this.dataFields.multiGeoPolygon = \"multiGeoPolygon\"; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapPolygonSeries.prototype.createDataItem = function () {\n    return new MapPolygonSeriesDataItem();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapPolygonSeries.prototype.processIncExc = function () {\n    this.mapPolygons.clear();\n\n    _super.prototype.processIncExc.call(this);\n  };\n  /**\r\n   * (Re)validates series data, effectively causing the whole series to be\r\n   * redrawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapPolygonSeries.prototype.validateData = function () {\n    // process geoJSON and created map objects\n    if (this.useGeodata || this.geodata) {\n      var geoJSON = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\n\n      if (this.geodata) {\n        geoJSON = this.geodata;\n      }\n\n      if (geoJSON) {\n        var features = void 0;\n\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n\n        if (features) {\n          var _loop_1 = function _loop_1(i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n\n              if (type == \"Polygon\" || type == \"MultiPolygon\") {\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n\n                var coordinates = geometry.coordinates;\n\n                if (coordinates) {\n                  // make the same as MultiPolygon\n                  if (type == \"Polygon\") {\n                    coordinates = [coordinates];\n                  }\n                } // find data object in user-provided data\n\n\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                }); // create one if not found\n\n                if (!dataObject) {\n                  dataObject = {\n                    multiPolygon: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                } // in case found\n                else {\n                    // if user-provided object doesn't have points data provided in any way:\n                    if (!dataObject.multiPolygon) {\n                      dataObject.multiPolygon = coordinates;\n                    }\n                  } // copy properties data to datacontext\n\n\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n\n          var this_1 = this;\n\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n\n    _super.prototype.validateData.call(this);\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapPolygonSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    this.dataItems.each(function (dataItem) {\n      $utils.used(dataItem.mapPolygon);\n    });\n    this.mapPolygons.each(function (mapPolygon) {\n      mapPolygon.validate(); // makes small go first to avoid hover problems with IE\n\n      if (!mapPolygon.zIndex && !mapPolygon.propertyFields.zIndex) {\n        mapPolygon.zIndex = 1000000 - mapPolygon.boxArea;\n      }\n    });\n  };\n\n  Object.defineProperty(MapPolygonSeries.prototype, \"mapPolygons\", {\n    /**\r\n     * List of polygon elements in the series.\r\n     *\r\n     * @return Polygon list\r\n     */\n    get: function get() {\n      if (!this._mapPolygons) {\n        var polygonTemplate = new MapPolygon();\n        var mapPolygons = new ListTemplate(polygonTemplate);\n\n        this._disposers.push(new ListDisposer(mapPolygons));\n\n        this._disposers.push(mapPolygons.template);\n\n        mapPolygons.template.focusable = true;\n        mapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapPolygons = mapPolygons;\n        this._mapObjects = mapPolygons;\n      }\n\n      return this._mapPolygons;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * returns MapPolygon by id in geoJSON file\r\n   * @param polygon id\r\n   * @return {MapPolygon}\r\n   */\n\n  MapPolygonSeries.prototype.getPolygonById = function (id) {\n    return $iter.find(this.mapPolygons.iterator(), function (mapPolygon) {\n      var dataContext = mapPolygon.dataItem.dataContext;\n      return dataContext.id == id;\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  MapPolygonSeries.prototype.copyFrom = function (source) {\n    this.mapPolygons.template.copyFrom(source.mapPolygons.template);\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapPolygonSeries.prototype.getFeatures = function () {\n    var _this = this;\n\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapPolygons.each(function (mapPolygon) {\n      if (_this.dataItems.indexOf(mapPolygon._dataItem) == -1) {\n        var feature = mapPolygon.getFeature();\n\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n\n  return MapPolygonSeries;\n}(MapSeries);\n\nexport { MapPolygonSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\nimport { registry } from \"../../../core/Registry\";\nimport * as $math from \"../../../core/utils/Math\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This is a base class for a geographical projection.\r\n */\n\nvar Projection =\n/** @class */\nfunction () {\n  function Projection() {\n    this.d3Projection = d3geo.geoEquirectangular();\n  }\n\n  Object.defineProperty(Projection.prototype, \"d3Projection\", {\n    /**\r\n     * d3 projection\r\n     */\n    get: function get() {\n      return this._d3Projection;\n    },\n\n    /**\r\n     * d3 projection\r\n     */\n    set: function set(projection) {\n      this._d3Projection = projection;\n      projection.precision(0.1);\n      this._d3Path = d3geo.geoPath().projection(projection);\n\n      if (this.chart) {\n        this.chart.invalidateProjection();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Projection.prototype, \"d3Path\", {\n    /**\r\n     * d3 path generator method\r\n     * @ignore\r\n     */\n    get: function get() {\n      return this._d3Path;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Projection.prototype, \"scale\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function get() {\n      return this.d3Projection.scale() / 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts a geographical point (lat/long) to a screen point (x/y)\r\n   * @param geoPoint Geo point (lat/long)\r\n   * @return Screen point (x/y)\r\n   */\n\n  Projection.prototype.convert = function (geoPoint) {\n    /*\r\n    geoPoint = $geo.normalizePoint(geoPoint);\r\n    geoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n    let pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n    return {\r\n        x: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 4) * this.scale,\r\n        y: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 4) * this.scale\r\n    };*/\n    var p = this.d3Projection([geoPoint.longitude, geoPoint.latitude]);\n\n    if (p) {\n      return {\n        x: p[0],\n        y: p[1]\n      };\n    }\n  };\n  /**\r\n   * Converts a screen point (x/y) to a geographical point (lat/long)\r\n   * @param point Screen point (x/y)\r\n   * @return Geo point (lat/long)\r\n   */\n\n\n  Projection.prototype.invert = function (point) {\n    /*\r\n    let pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n      let geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n      geoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n    */\n    var p = this.d3Projection.invert([point.x, point.y]);\n\n    if (p) {\n      return {\n        longitude: p[0],\n        latitude: p[1]\n      };\n    }\n  };\n  /**\r\n   * Returns X/Y coordinates.\r\n   * Individual projections will override this method to apply their own\r\n   * projection logic.\r\n   * @deprecated\r\n   * @param lambda [description]\r\n   * @param phi    [description]\r\n   * @return X/Y coordinates\r\n   * @todo Needs description\r\n   */\n\n\n  Projection.prototype.project = function (lambda, phi) {\n    return this.convert({\n      longitude: lambda * $math.DEGREES,\n      latitude: phi * $math.DEGREES\n    });\n  };\n  /**\r\n   * Returns geographical coordinates (lat/long).\r\n   * Individual projections will override this method to apply their own\r\n   * projection logic.\r\n   * @deprecated\r\n   * @param x X coordinate\r\n   * @param y Y coordinate\r\n   * @return Geographical point\r\n   * @todo Needs description\r\n   */\n\n\n  Projection.prototype.unproject = function (x, y) {\n    return this.invert({\n      x: x,\n      y: y\n    });\n  };\n  /**\r\n   * @ignore\r\n   * @deprecated\r\n   */\n\n\n  Projection.prototype.rotate = function (geoPoint, deltaLongitude, deltaLatitude, deltaGamma) {\n    var deltaLambda = deltaLongitude * $math.RADIANS;\n    var deltaPhi = deltaLatitude * $math.RADIANS;\n    deltaGamma = deltaGamma * $math.RADIANS;\n    var lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\n    var phi = geoPoint.latitude * $math.RADIANS;\n    var cosDeltaPhi = Math.cos(deltaPhi);\n    var sinDeltaPhi = Math.sin(deltaPhi);\n    var cosDeltaGamma = Math.cos(deltaGamma);\n    var sinDeltaGamma = Math.sin(deltaGamma);\n    var cosPhi = Math.cos(phi);\n    var x = Math.cos(lambda) * cosPhi;\n    var y = Math.sin(lambda) * cosPhi;\n    var z = Math.sin(phi);\n    var k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return {\n      longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    };\n  };\n  /**\r\n   * @ignore\r\n   * @deprecated\r\n   */\n\n\n  Projection.prototype.unrotate = function (geoPoint, deltaLongitude, deltaLatitude, deltaGamma) {\n    var deltaLambda = deltaLongitude * $math.RADIANS;\n    var deltaPhi = deltaLatitude * $math.RADIANS;\n    deltaGamma = deltaGamma * $math.RADIANS;\n    var lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\n    var phi = geoPoint.latitude * $math.RADIANS;\n    var cosDeltaPhi = Math.cos(deltaPhi);\n    var sinDeltaPhi = Math.sin(deltaPhi);\n    var cosDeltaGamma = Math.cos(deltaGamma);\n    var sinDeltaGamma = Math.sin(deltaGamma);\n    var cosPhi = Math.cos(phi);\n    var x = Math.cos(lambda) * cosPhi;\n    var y = Math.sin(lambda) * cosPhi;\n    var z = Math.sin(phi);\n    var k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return {\n      longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    };\n  }; //@todo: move to some utils?\n  //@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\n\n\n  Projection.prototype.intermediatePoint = function (pointA, pointB, position) {\n    var p = d3geo.geoInterpolate([pointA.longitude, pointA.latitude], [pointB.longitude, pointB.latitude])(position);\n    return {\n      longitude: p[0],\n      latitude: p[1]\n    };\n  };\n\n  ; // returns radians\n\n  Projection.prototype.multiDistance = function (multiGeoLine) {\n    var distance = 0;\n\n    for (var s = 0; s < multiGeoLine.length; s++) {\n      var points = multiGeoLine[s];\n\n      if (points.length > 1) {\n        for (var p = 1; p < points.length; p++) {\n          var pointA = points[p - 1];\n          var pointB = points[p];\n          distance += this.distance(pointA, pointB);\n        }\n      }\n    }\n\n    return distance;\n  }; // returns radians\n\n\n  Projection.prototype.distance = function (pointA, pointB) {\n    return d3geo.geoDistance([pointA.longitude, pointA.latitude], [pointB.longitude, pointB.latitude]);\n  };\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n\n  Projection.prototype.positionToPoint = function (multiGeoLine, position) {\n    if (multiGeoLine) {\n      var intermediatePoint = this.positionToGeoPoint(multiGeoLine, position);\n      var intermediatePointA = this.positionToGeoPoint(multiGeoLine, position - 0.01);\n      var intermediatePointB = this.positionToGeoPoint(multiGeoLine, position + 0.01);\n\n      if (intermediatePointA && intermediatePointB) {\n        var point = this.convert(intermediatePoint);\n        var pa = this.convert(intermediatePointA);\n        var pb = this.convert(intermediatePointB);\n        return {\n          x: point.x,\n          y: point.y,\n          angle: $math.getAngle(pa, pb)\n        };\n      }\n    }\n\n    return {\n      x: 0,\n      y: 0,\n      angle: 0\n    };\n  };\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n\n  Projection.prototype.positionToGeoPoint = function (multiGeoLine, position) {\n    if (multiGeoLine) {\n      var totalDistance = this.multiDistance(multiGeoLine);\n      var currentDistance = 0;\n      var distanceAB = void 0;\n      var positionA = 0;\n      var positionB = 0;\n      var pointA = void 0;\n      var pointB = void 0;\n\n      for (var s = 0; s < multiGeoLine.length; s++) {\n        var points = multiGeoLine[s];\n\n        if (points.length > 1) {\n          for (var p = 1; p < points.length; p++) {\n            pointA = points[p - 1];\n            pointB = points[p];\n            positionA = currentDistance / totalDistance;\n            distanceAB = this.distance(pointA, pointB);\n            currentDistance += distanceAB;\n            positionB = currentDistance / totalDistance;\n\n            if (positionA <= position && positionB > position) {\n              s = multiGeoLine.length;\n              break;\n            }\n          }\n        } else if (points.length == 1) {\n          pointA = points[0];\n          pointB = points[0];\n          positionA = 0;\n          positionB = 1;\n        }\n      }\n\n      if (pointA && pointB) {\n        var positionAB = (position - positionA) / (positionB - positionA);\n        return this.intermediatePoint(pointA, pointB, positionAB);\n      }\n    }\n\n    return {\n      longitude: 0,\n      latitude: 0\n    };\n  };\n\n  return Projection;\n}();\n\nexport { Projection };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Projection\"] = Projection;","import identity from \"../identity\";\nimport stream from \"../stream\";\nimport pathArea from \"./area\";\nimport pathBounds from \"./bounds\";\nimport pathCentroid from \"./centroid\";\nimport PathContext from \"./context\";\nimport pathMeasure from \"./measure\";\nimport PathString from \"./string\";\nexport default function (projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n\n    return contextStream.result();\n  }\n\n  path.area = function (object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function (object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function (object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function (object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function (_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function (_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function (_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}","/**\r\n * A module for the mini-map control.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Rectangle } from \"../../core/elements/Rectangle\";\nimport { List } from \"../../core/utils/List\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar SmallMap =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SmallMap, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SmallMap() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A target map.\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"SmallMap\"; // Set defaults\n\n    _this.align = \"left\";\n    _this.valign = \"bottom\";\n    _this.percentHeight = 20;\n    _this.percentWidth = 20;\n\n    _this.margin(5, 5, 5, 5);\n\n    var interfaceColors = new InterfaceColorSet(); // Set background defailts\n\n    _this.background.fillOpacity = 0.9;\n    _this.background.fill = interfaceColors.getFor(\"background\"); // Set up events\n\n    _this.events.on(\"hit\", _this.moveToPosition, _this, false);\n\n    _this.events.on(\"maxsizechanged\", _this.updateMapSize, _this, false); // Create a container\n\n\n    _this.seriesContainer = _this.createChild(Container);\n    _this.seriesContainer.shouldClone = false; // Create an outline rectangle\n\n    var rectangle = _this.createChild(Rectangle);\n\n    rectangle.shouldClone = false;\n    rectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\n    rectangle.strokeWidth = 1;\n    rectangle.strokeOpacity = 0.5;\n    rectangle.fill = color(); //\"none\";\n\n    rectangle.verticalCenter = \"middle\";\n    rectangle.horizontalCenter = \"middle\";\n    rectangle.isMeasured = false;\n    rectangle.visible = false;\n    _this.rectangle = rectangle;\n\n    _this._disposers.push(_this._chart); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(SmallMap.prototype, \"series\", {\n    /**\r\n     * A list of map series used to draw the mini-map.\r\n     *\r\n     * @readonly\r\n     * @return Series\r\n     */\n    get: function get() {\n      if (!this._series) {\n        this._series = new List();\n\n        this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\n\n        this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\n      }\n\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a new series when they are pushed into a `series` list.\r\n   *\r\n   * @param event Event\r\n   */\n\n  SmallMap.prototype.handleSeriesAdded = function (event) {\n    var series = event.newValue;\n\n    if (this.chart.series.contains(series)) {\n      var newSeries = series.clone();\n\n      this._series.removeValue(series);\n\n      this._series.push(newSeries);\n\n      series = newSeries;\n      this.chart.dataUsers.push(newSeries);\n    }\n\n    series.chart = this.chart;\n    series.parent = this.seriesContainer;\n    series.interactionsEnabled = false;\n    series.events.on(\"inited\", this.updateMapSize, this, false);\n    series.hidden = false;\n  };\n  /**\r\n   * Cleans up after series are removed from Scrollbar.\r\n   *\r\n   * @param event  Event\r\n   */\n\n\n  SmallMap.prototype.handleSeriesRemoved = function (event) {\n    //let sourceSeries: MapSeries = event.oldValue;\n    this.invalidate();\n  };\n  /**\r\n   * Moves main map pan position after click on the small map.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  SmallMap.prototype.moveToPosition = function (event) {\n    var rectPoint = $utils.spritePointToSprite(event.spritePoint, this, this.seriesContainer);\n    var geoPoint = this.chart.seriesPointToGeo(rectPoint);\n    this.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\n  };\n\n  Object.defineProperty(SmallMap.prototype, \"chart\", {\n    /**\r\n     * @return Chart/map\r\n     */\n    get: function get() {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A chart/map that this control is meant for.\r\n     *\r\n     * @param chart  Chart/map\r\n     */\n    set: function set(chart) {\n      if (this.chart != chart) {\n        this._chart.set(chart, new MultiDisposer([//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\n        chart.events.on(\"mappositionchanged\", this.updateRectangle, this, false), chart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the viewport recangle as per current map zoom/pan position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  SmallMap.prototype.updateRectangle = function () {\n    var chart = this.chart;\n    var zoomLevel = chart.zoomLevel;\n    var rectangle = this.rectangle;\n    rectangle.width = this.pixelWidth / zoomLevel;\n    rectangle.height = this.pixelHeight / zoomLevel;\n    var scale = Math.min(this.percentWidth, this.percentHeight) / 100;\n    var seriesContainer = chart.seriesContainer;\n    rectangle.x = Math.ceil(-seriesContainer.pixelX * scale / zoomLevel) + this.seriesContainer.pixelX;\n    rectangle.y = Math.ceil(-seriesContainer.pixelY * scale / zoomLevel) + this.seriesContainer.pixelY;\n    rectangle.validate();\n  };\n  /**\r\n   * Update map size so that internal elements can redraw themselves after\r\n   * the size of the small map changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SmallMap.prototype.updateMapSize = function () {\n    if (this.chart) {\n      var scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\n      this.seriesContainer.scale = scale;\n      var bbox = {\n        width: 0,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      try {\n        // Add exception catching to tame FF\n        bbox = this.seriesContainer.group.node.getBBox();\n      } catch (err) {}\n\n      if (bbox.width > 0) {\n        this.rectangle.visible = true;\n      }\n\n      this.seriesContainer.x = this.pixelWidth / 2 - bbox.x * scale - bbox.width / 2 * scale;\n      this.seriesContainer.y = this.pixelHeight / 2 - bbox.y * scale - bbox.height / 2 * scale;\n      this.updateRectangle();\n      this.afterDraw();\n    }\n  };\n  /**\r\n   * Update elements after drawing the small map.\r\n   */\n\n\n  SmallMap.prototype.afterDraw = function () {\n    _super.prototype.afterDraw.call(this); //this.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\n\n\n    this.rectangle.maskRectangle = {\n      x: -1,\n      y: -1,\n      width: Math.ceil(this.pixelWidth + 2),\n      height: Math.ceil(this.pixelHeight + 2)\n    };\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  SmallMap.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          var series = config.series[i];\n\n          if ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\n            config.series[i] = this.map.getKey(series);\n          }\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return SmallMap;\n}(Container);\n\nexport { SmallMap };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo-point\r\n * @return Normalized geo-point\r\n */\n\nexport function normalizePoint(geoPoint) {\n  var longitude = wrapAngleTo180(geoPoint.longitude);\n  var latitude = Math.asin(Math.sin(geoPoint.latitude * $math.RADIANS)) * $math.DEGREES;\n  var latitude180 = wrapAngleTo180(geoPoint.latitude);\n\n  if (Math.abs(latitude180) > 90) {\n    longitude = wrapAngleTo180(longitude + 180);\n  }\n\n  geoPoint.longitude = longitude;\n  geoPoint.latitude = latitude;\n  return geoPoint;\n}\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param multiline  Source geo-line\r\n * @return Normalized geo-line\r\n */\n\nexport function normalizeMultiline(multiline) {\n  try {\n    for (var multiline_1 = tslib_1.__values(multiline), multiline_1_1 = multiline_1.next(); !multiline_1_1.done; multiline_1_1 = multiline_1.next()) {\n      var segment = multiline_1_1.value;\n\n      try {\n        for (var segment_1 = tslib_1.__values(segment), segment_1_1 = segment_1.next(); !segment_1_1.done; segment_1_1 = segment_1.next()) {\n          var point = segment_1_1.value;\n          point = normalizePoint(point);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (segment_1_1 && !segment_1_1.done && (_a = segment_1.return)) _a.call(segment_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (multiline_1_1 && !multiline_1_1.done && (_b = multiline_1.return)) _b.call(multiline_1);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n\n  return multiline;\n\n  var e_2, _b, e_1, _a;\n}\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param angle  Angle\r\n * @return Angle\r\n */\n\nexport function wrapAngleTo180(angle) {\n  angle = angle % 360;\n\n  if (angle > 180) {\n    angle -= 360;\n  }\n\n  if (angle < -180) {\n    angle += 360;\n  }\n\n  return angle;\n}\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo point\r\n * @return Point\r\n */\n\nexport function geoToPoint(geoPoint) {\n  return {\n    x: geoPoint.longitude,\n    y: geoPoint.latitude\n  };\n}","/**\r\n * Map line module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\n\nvar MapLineObject =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapLineObject, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapLineObject() {\n    var _this = _super.call(this) || this;\n\n    _this.adjustRotation = true;\n    _this.className = \"MapLineObject\";\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates element's position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapLineObject.prototype.validatePosition = function () {\n    var mapLine = this.mapLine;\n\n    if (mapLine) {\n      var point = mapLine.positionToPoint(this.position);\n      this.x = point.x;\n      this.y = point.y;\n\n      if (this.adjustRotation) {\n        this.rotation = point.angle;\n      }\n\n      var dataItem = this.mapLine.dataItem;\n\n      if (dataItem) {\n        var series = this.mapLine.dataItem.component;\n        this.scale = 1 / series.scale;\n      } // hide out of bounds\n\n\n      if (mapLine.shortestDistance) {\n        var projection = this.mapLine.series.chart.projection;\n        var geoPoint = projection.positionToGeoPoint(mapLine.multiGeoLine, this.position);\n        var visible = projection.d3Path({\n          type: 'Point',\n          coordinates: [geoPoint.longitude, geoPoint.latitude]\n        });\n\n        if (!visible) {\n          this.__disabled = true;\n        } else {\n          this.__disabled = false;\n        }\n      }\n    }\n\n    _super.prototype.validatePosition.call(this);\n  };\n\n  Object.defineProperty(MapLineObject.prototype, \"position\", {\n    /**\r\n     * @return Position within the line\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"position\");\n    },\n\n    /**\r\n     * Sets object's relative position (0-1) within the line.\r\n     *\r\n     * `0` will place the object at the beginning of the line. `1` - at the end.\r\n     *\r\n     * Any intermediate number will place the object at some point within the\r\n     * line.\r\n     *\r\n     * @param value  Position within the line (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"position\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineObject.prototype, \"adjustRotation\", {\n    /**\r\n     * @return Auto-rotate\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"adjustRotation\");\n    },\n\n    /**\r\n     * If set to `true`, the object will be automatically rotated to face the\r\n     * direction of the line at the specific position.\r\n     *\r\n     * This allows creating images that has its \"front\" always facing the logical\r\n     * direction of the line.\r\n     *\r\n     * @default false\r\n     * @param value  Auto-rotate\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"adjustRotation\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapLineObject;\n}(Container);\n\nexport { MapLineObject };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;","/**\r\n * Map image series module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapImage } from \"./MapImage\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\n\nvar MapImageSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapImageSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapImageSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapImageSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapImageSeriesDataItem.prototype.getFeature = function () {\n    return {\n      \"type\": \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: this.point\n      }\n    };\n  };\n\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"mapImage\", {\n    /**\r\n     * A [[MapImage]] element related to this data item.\r\n     *\r\n     * @return Element\r\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._mapImage) {\n        var mapImage_1 = this.component.mapImages.create();\n        this.addSprite(mapImage_1);\n        this._mapImage = mapImage_1;\n\n        this._disposers.push(mapImage_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapImages.removeValue(mapImage_1);\n          }\n        }));\n\n        this.mapObject = mapImage_1;\n      }\n\n      return this._mapImage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"point\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this._point;\n    },\n\n    /**\r\n     * [point description]\r\n     *\r\n     * @todo Description\r\n     * @param point [description]\r\n     */\n    set: function set(point) {\n      this._point = point;\n      this._geoPoint = $mapUtils.pointToGeo(point);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"geoPoint\", {\n    /**\r\n     * @return Image coordinates\r\n     */\n    get: function get() {\n      return this._geoPoint;\n    },\n\n    /**\r\n     * Geographical coordinates (lat/long) image is placed at.\r\n     *\r\n     * @param geoPoint Image coordinates\r\n     */\n    set: function set(geoPoint) {\n      this._geoPoint = geoPoint;\n      this.point = [geoPoint.longitude, geoPoint.latitude];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapImageSeriesDataItem;\n}(MapSeriesDataItem);\n\nexport { MapImageSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapImageSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapImageSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapImageSeries() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapImageSeries\"; // Set data fields\n\n    _this.dataFields.multiPoint = \"multiPoint\";\n    _this.dataFields.point = \"point\";\n    _this.dataFields.geoPoint = \"geoPoint\";\n    _this.dataFields.multiGeoPoint = \"multiGeoPoint\";\n    _this.ignoreBounds = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapImageSeries.prototype.createDataItem = function () {\n    return new MapImageSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates the data of the sries, effectively forcing it to redraw\r\n   * all of its elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapImageSeries.prototype.validateData = function () {\n    var _this = this;\n\n    if (this.data.length > 0 && this._parseDataFrom == 0) {\n      this.mapImages.clear();\n    } // process geoJSON and created map objects\n\n\n    if (this.useGeodata) {\n      if (this.useGeodata || this.geodata) {\n        var geoJSON = this.chart.geodata;\n        var features = void 0;\n\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n\n        if (features) {\n          var _loop_1 = function _loop_1(i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n\n              if (type == \"Point\" || type == \"MultiPoint\") {\n                // todo: we don't support multipoints at the moment actually\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n\n                var coordinates = geometry.coordinates; // make the same as MultiPoint\n\n                if (type == \"Point\") {\n                  coordinates = [coordinates];\n                }\n\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                });\n\n                if (!dataObject) {\n                  dataObject = {\n                    multiPoint: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                } else {\n                  if (!dataObject.multiPoint) {\n                    dataObject.multiPoint = coordinates;\n                  }\n                } // copy properties data to datacontext\n\n\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n\n          var this_1 = this;\n\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n\n    _super.prototype.validateData.call(this); // important! this should go after super.validateData\n    // if data is parsed in chunks, images list is corrupted, fix it here\n\n\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      var mapImage = dataItem.mapImage;\n\n      if (!mapImage.isDisposed()) {\n        _this.mapImages.moveValue(mapImage);\n\n        if ($type.isNumber(mapImage.latitude) && $type.isNumber(mapImage.latitude)) {\n          dataItem.geoPoint = {\n            latitude: mapImage.latitude,\n            longitude: mapImage.longitude\n          };\n        }\n      }\n    });\n  };\n\n  Object.defineProperty(MapImageSeries.prototype, \"mapImages\", {\n    /**\r\n     * A list of map images in the series.\r\n     *\r\n     * @return Map images\r\n     */\n    get: function get() {\n      if (!this._mapImages) {\n        var template = new MapImage();\n        var mapImages = new ListTemplate(template);\n\n        this._disposers.push(new ListDisposer(mapImages));\n\n        this._disposers.push(mapImages.template);\n\n        mapImages.template.focusable = true;\n        mapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapImages = mapImages;\n        this._mapObjects = mapImages;\n      }\n\n      return this._mapImages;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates data element, effectively triggering its redrawal.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n  MapImageSeries.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem);\n\n    dataItem.mapImage.invalidate();\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapImageSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    $iter.each(this.mapImages.iterator(), function (mapImage) {\n      mapImage.validatePosition();\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  MapImageSeries.prototype.copyFrom = function (source) {\n    this.mapImages.template.copyFrom(source.mapImages.template);\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapImageSeries.prototype.getFeatures = function () {\n    var _this = this;\n\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapImages.each(function (mapImage) {\n      if (_this.dataItems.indexOf(mapImage._dataItem) == -1) {\n        var feature = mapImage.getFeature();\n\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n  /**\r\n   * returns MapImage by id\r\n   * @param image id\r\n   * @return {MapImage}\r\n   */\n\n\n  MapImageSeries.prototype.getImageById = function (id) {\n    return $iter.find(this.mapImages.iterator(), function (mapImage) {\n      var dataContext = mapImage.dataItem.dataContext;\n\n      if (mapImage.id == id || dataContext.id == id) {\n        return true;\n      }\n    });\n  };\n\n  return MapImageSeries;\n}(MapSeries);\n\nexport { MapImageSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;","/**\r\n * Map line module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapObject } from \"./MapObject\";\nimport { MapLineObject } from \"./MapLineObject\";\nimport { MapImage } from \"./MapImage\";\nimport { MapImageSeries } from \"./MapImageSeries\";\nimport { Triangle } from \"../../core/elements/Triangle\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Polyline } from \"../../core/elements/Polyline\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $geo from \"./Geo\";\nimport * as $mapUtils from \"./MapUtils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\n\nvar MapLine =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapLine, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapLine() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A list of event disposers for images.\r\n     */\n\n\n    _this._imageListeners = {};\n    _this.className = \"MapLine\";\n\n    _this.createLine();\n\n    _this.line.stroke = color();\n    _this.line.parent = _this;\n    _this.strokeOpacity = 1;\n    var interfaceColors = new InterfaceColorSet();\n    _this.stroke = interfaceColors.getFor(\"grid\");\n    _this.shortestDistance = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapLine.prototype.createLine = function () {\n    this.line = new Polyline();\n  };\n  /**\r\n   * Converts a position within the line (0-1) to a physical point\r\n   * coordinates.\r\n   *\r\n   * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n\n  MapLine.prototype.positionToPoint = function (position) {\n    if (this.shortestDistance) {\n      return this.series.chart.projection.positionToPoint(this.multiGeoLine, position);\n    } else {\n      if (this.line) {\n        return this.line.positionToPoint(position);\n      }\n    }\n\n    return {\n      x: 0,\n      y: 0,\n      angle: 0\n    };\n  };\n\n  Object.defineProperty(MapLine.prototype, \"multiGeoLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      var multiGeoLine = this.getPropertyValue(\"multiGeoLine\");\n\n      if (!multiGeoLine && this.dataItem && this.dataItem.multiGeoLine) {\n        multiGeoLine = this.dataItem.multiGeoLine;\n      }\n\n      return multiGeoLine;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     { longitude: 3.121, latitude: 0.58 },\r\n     *     { longitude: -5.199, latitude: 21.223 }\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     { longitude: -5.199, latitude: 21.223 },\r\n     *     { longitude: -12.9, latitude: 25.85 }\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n     * @param multiGeoLine  Coordinates\r\n     */\n    set: function set(multiGeoLine) {\n      if (multiGeoLine && multiGeoLine.length > 0) {\n        this.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\n        var multiLine = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\n        this.setPropertyValue(\"multiLine\", multiLine);\n        this.updateExtremes();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLine.prototype, \"multiLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      var multiLine = this.getPropertyValue(\"multiLine\");\n\n      if (!multiLine && this.dataItem && this.dataItem.multiLine) {\n        multiLine = this.dataItem.multiLine;\n      }\n\n      return multiLine;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     [ 100, 150 ],\r\n     *     [ 120, 200 ]\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     [ 120, 200 ],\r\n     *     [ 150, 100 ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param multiLine  Coordinates\r\n     */\n    set: function set(multiLine) {\n      this.setPropertyValue(\"multiLine\", multiLine);\n      this.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLine.prototype, \"imagesToConnect\", {\n    /**\r\n     * @return {MapImages[]}\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"imagesToConnect\");\n    },\n\n    /**\r\n     * Instead of setting longitudes/latitudes you can set an array of images\r\n     * which will be connected by the line.\r\n     *\r\n     * Parameter is an array that can hold string `id`'s to of the images, or\r\n     * references to actual [[MapImage]] objects.\r\n     *\r\n     * @param images  Images\r\n     */\n    set: function set(images) {\n      this.setPropertyValue(\"imagesToConnect\", images, true);\n      this.handleImagesToConnect();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MapLine.prototype.handleImagesToConnect = function () {\n    var _this = this;\n\n    if (this.imagesToConnect) {\n      var segment = [];\n      var multiGeoLine = [segment];\n\n      var _loop_1 = function _loop_1(image) {\n        if ($type.isString(image)) {\n          var chart = this_1.series.chart;\n\n          if (chart) {\n            chart.series.each(function (series) {\n              if (series instanceof MapImageSeries) {\n                var img = series.getImageById(image);\n\n                if (img) {\n                  image = img;\n                }\n              }\n            });\n          }\n        }\n\n        if (image instanceof MapImage) {\n          segment.push({\n            longitude: image.longitude,\n            latitude: image.latitude\n          });\n\n          if (!this_1._imageListeners[image.id]) {\n            var disposer = image.events.on(\"propertychanged\", function (event) {\n              if (event.property == \"longitude\" || event.property == \"latitude\") {\n                _this.handleImagesToConnect();\n\n                _this.invalidate();\n              }\n            }, this_1, false);\n            this_1._imageListeners[image.id] = disposer;\n\n            this_1._disposers.push(disposer);\n          }\n        }\n      };\n\n      var this_1 = this;\n\n      try {\n        for (var _a = tslib_1.__values(this.imagesToConnect), _b = _a.next(); !_b.done; _b = _a.next()) {\n          var image = _b.value;\n\n          _loop_1(image);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      this.multiGeoLine = multiGeoLine;\n    }\n\n    var e_1, _c;\n  };\n  /**\r\n   * (Re)validates the line, effectively forcing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapLine.prototype.validate = function () {\n    var chart = this.series.chart;\n\n    if (this.multiLine) {\n      if (!this.shortestDistance) {\n        var convertedPoints = [];\n\n        for (var i = 0, len = this.multiLine.length; i < len; i++) {\n          var segment = this.multiLine[i];\n          var convertedSegmentPoints = [];\n\n          for (var s = 0, slen = segment.length; s < slen; s++) {\n            var geoPoint = segment[s];\n            var point = this.series.chart.projection.convert({\n              longitude: geoPoint[0],\n              latitude: geoPoint[1]\n            });\n            convertedSegmentPoints.push(point);\n          }\n\n          convertedPoints.push(convertedSegmentPoints);\n        }\n\n        this.line.segments = convertedPoints;\n      } else {\n        chart.projection.d3Projection.precision(0.1);\n        this.line.path = chart.projection.d3Path(this.getFeature());\n      }\n\n      if (this._arrow) {\n        this._arrow.validatePosition();\n      }\n\n      $iter.each(this.lineObjects.iterator(), function (x) {\n        x.validatePosition();\n      });\n      this.handleGlobalScale();\n    } else if (this.imagesToConnect) {\n      this.handleImagesToConnect();\n    }\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapLine.prototype.getFeature = function () {\n    if (this.multiLine && this.multiLine.length > 0 && this.multiLine[0] && this.multiLine[0].length > 0) {\n      return {\n        \"type\": \"Feature\",\n        geometry: {\n          type: \"MultiLineString\",\n          coordinates: this.multiLine\n        }\n      };\n    }\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapLine.prototype.measureElement = function () {// Overriding, just to avoid extra measure\n  };\n\n  Object.defineProperty(MapLine.prototype, \"shortestDistance\", {\n    /**\r\n     * @return Real path?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"shortestDistance\");\n    },\n\n    /**\r\n     * The line should take the shortest path over the globe.\r\n     *\r\n     * Enabling this will make the line look differently in different\r\n     * projections. Only `MapLine` supports this setting, `MapArc` and\r\n     * `MapSplice` don't.\r\n     *\r\n     * @default false\r\n     * @param value  Real path?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"shortestDistance\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLine.prototype, \"lineObjects\", {\n    /**\r\n     * List of separate line objects the line consists of.\r\n     *\r\n     * @readonly\r\n     * @return List of line objects\r\n     */\n    get: function get() {\n      if (!this._lineObjects) {\n        this._lineObjects = new ListTemplate(new MapLineObject());\n\n        this._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this, false);\n\n        this._disposers.push(new ListDisposer(this._lineObjects));\n\n        this._disposers.push(this._lineObjects.template);\n      }\n\n      return this._lineObjects;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorate a [[LineObject]] when it is added to the line.\r\n   *\r\n   * @param event  Event\r\n   */\n\n  MapLine.prototype.handleLineObjectAdded = function (event) {\n    var mapLineObject = event.newValue;\n    mapLineObject.mapLine = this;\n    mapLineObject.shouldClone = false;\n    mapLineObject.parent = this;\n  };\n\n  Object.defineProperty(MapLine.prototype, \"arrow\", {\n    /**\r\n     * @return Arrow element\r\n     */\n    get: function get() {\n      if (!this._arrow) {\n        var arrow = this.createChild(MapLineObject);\n        arrow.shouldClone = false;\n        arrow.width = 8;\n        arrow.height = 10;\n        arrow.mapLine = this;\n        arrow.position = 0.5;\n        var triangle = arrow.createChild(Triangle); //triangle.shouldClone = false;\n\n        triangle.fillOpacity = 1;\n        triangle.width = percent(100);\n        triangle.height = percent(100);\n        triangle.rotation = 90;\n        triangle.horizontalCenter = \"middle\";\n        triangle.verticalCenter = \"middle\";\n        this._arrow = arrow;\n      }\n\n      return this._arrow;\n    },\n\n    /**\r\n     * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n     *\r\n     * Just accessing this property will create a default arrowhead on the line\r\n     * automatically.\r\n     *\r\n     * @param arrow  Arrow element\r\n     */\n    set: function set(arrow) {\n      this._arrow = arrow;\n      arrow.mapLine = this;\n      arrow.parent = this;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies line properties and other attributes, like arrow, from another\r\n   * instance of [[MapLine]].\r\n   *\r\n   * @param source  Source map line\r\n   */\n\n  MapLine.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.line.copyFrom(source.line);\n    this.lineObjects.copyFrom(source.lineObjects);\n\n    if (source._arrow) {\n      this.arrow = source.arrow.clone();\n    }\n  };\n\n  Object.defineProperty(MapLine.prototype, \"latitude\", {\n    /**\r\n     * Latitude of the line center.\r\n     *\r\n     * @readonly\r\n     * @return Latitude\r\n     */\n    get: function get() {\n      return this.north + (this.south - this.north) / 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLine.prototype, \"longitude\", {\n    /**\r\n     * Longitude of the line center.\r\n     *\r\n     * @readonly\r\n     * @return Latitude\r\n     */\n    get: function get() {\n      return this.east + (this.west - this.east) / 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * X coordinate for the slice tooltip.\r\n   *\r\n   * @return X\r\n   */\n\n  MapLine.prototype.getTooltipX = function () {\n    return this.positionToPoint(0.5).x;\n  };\n  /**\r\n   * Y coordinate for the slice tooltip.\r\n   *\r\n   * @return Y\r\n   */\n\n\n  MapLine.prototype.getTooltipY = function () {\n    return this.positionToPoint(0.5).y;\n  };\n\n  return MapLine;\n}(MapObject);\n\nexport { MapLine };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapLine\"] = MapLine;","/**\r\n * Map line series module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapLine } from \"./MapLine\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\n\nvar MapLineSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapLineSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapLineSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapLineSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  MapLineSeriesDataItem.prototype.getFeature = function () {\n    if (this.multiLine && this.multiLine.length > 0) {\n      return {\n        \"type\": \"Feature\",\n        geometry: {\n          type: \"MultiLineString\",\n          coordinates: this.multiLine\n        }\n      };\n    }\n  };\n\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"mapLine\", {\n    /**\r\n     * A [[MapLine]] element related to this data item.\r\n     *\r\n     * @readonly\r\n     * @return Element\r\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._mapLine) {\n        var mapLine_1 = this.component.mapLines.create();\n        this._mapLine = mapLine_1;\n        this.addSprite(mapLine_1);\n\n        this._disposers.push(mapLine_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapLines.removeValue(mapLine_1);\n          }\n        }));\n\n        this.mapObject = mapLine_1;\n      }\n\n      return this._mapLine;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"line\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._line;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [ 100, 150 ],\r\n     *   [ 120, 200 ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param line  Coordinates\r\n     */\n    set: function set(line) {\n      this._line = line;\n      this.multiLine = [line];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"multiLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._multiLine;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     [ 100, 150 ],\r\n     *     [ 120, 200 ]\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     [ 120, 200 ],\r\n     *     [ 150, 100 ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param multiLine  Coordinates\r\n     */\n    set: function set(multiLine) {\n      this._multiLine = multiLine;\n      this._multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"geoLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._geoLine;\n    },\n\n    /**\r\n     * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   { longitude: 3.121, latitude: 0.58 },\r\n     *   { longitude: -5.199, latitude: 21.223 }\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n     * @param geoLine  Coordinates\r\n     */\n    set: function set(geoLine) {\n      this._geoLine = geoLine;\n      this.multiLine = $mapUtils.multiGeoLineToMultiLine([geoLine]);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"multiGeoLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      return this._multiGeoLine;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     { longitude: 3.121, latitude: 0.58 },\r\n     *     { longitude: -5.199, latitude: 21.223 }\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     { longitude: -5.199, latitude: 21.223 },\r\n     *     { longitude: -12.9, latitude: 25.85 }\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n     * @param multiGeoLine  Coordinates\r\n     */\n    set: function set(multiGeoLine) {\n      this._multiGeoLine = multiGeoLine;\n      this.multiLine = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapLineSeriesDataItem;\n}(MapSeriesDataItem);\n\nexport { MapLineSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapLineSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapLineSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapLineSeries() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapLineSeries\"; // Set data fields\n\n    _this.dataFields.multiLine = \"multiLine\";\n    _this.dataFields.line = \"line\";\n    _this.dataFields.geoLine = \"geoLine\";\n    _this.dataFields.multiGeoLine = \"multiGeoLine\";\n    _this.ignoreBounds = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapLineSeries.prototype.createDataItem = function () {\n    return new MapLineSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates series data, effectively causing the whole series to be\r\n   * redrawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapLineSeries.prototype.validateData = function () {\n    // process geoJSON and created map objects\n    if (this.useGeodata || this.geodata) {\n      var geoJSON = this.chart.geodata;\n\n      if (geoJSON) {\n        var features = void 0;\n\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n\n        if (features) {\n          var _loop_1 = function _loop_1(i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n\n              if (type == \"LineString\" || type == \"MultiLineString\") {\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n\n                var coordinates = geometry.coordinates;\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                });\n\n                if (type == \"LineString\") {\n                  coordinates = [coordinates];\n                }\n\n                if (!dataObject) {\n                  dataObject = {\n                    multiLine: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                } else {\n                  if (!dataObject.multiLine) {\n                    dataObject.multiLine = coordinates;\n                  }\n                } // copy properties data to datacontext\n\n\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n\n          var this_1 = this;\n\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n\n    _super.prototype.validateData.call(this);\n  };\n\n  Object.defineProperty(MapLineSeries.prototype, \"mapLines\", {\n    /**\r\n     * A list of lines in the series.\r\n     *\r\n     * @return Lines\r\n     */\n    get: function get() {\n      if (!this._mapLines) {\n        var lineTemplate = this.createLine();\n        var mapLines = new ListTemplate(lineTemplate);\n\n        this._disposers.push(new ListDisposer(mapLines));\n\n        this._disposers.push(mapLines.template);\n\n        mapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapLines = mapLines;\n        this._mapObjects = mapLines;\n      }\n\n      return this._mapLines;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new line instance of suitable type.\r\n   *\r\n   * @return New line\r\n   */\n\n  MapLineSeries.prototype.createLine = function () {\n    return new MapLine();\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapLineSeries.prototype.validate = function () {\n    this.dataItems.each(function (dataItem) {\n      $utils.used(dataItem.mapLine);\n    });\n\n    _super.prototype.validate.call(this);\n\n    this.mapLines.each(function (mapLine) {\n      mapLine.validate();\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  MapLineSeries.prototype.copyFrom = function (source) {\n    this.mapLines.template.copyFrom(source.mapLines.template);\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapLineSeries.prototype.getFeatures = function () {\n    var _this = this;\n\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapLines.each(function (mapLine) {\n      if (_this.dataItems.indexOf(mapLine._dataItem) == -1) {\n        var feature = mapLine.getFeature();\n\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n  /**\r\n   * returns MapLine by id\r\n   * @param line id\r\n   * @return {MapLine}\r\n   */\n\n\n  MapLineSeries.prototype.getLineById = function (id) {\n    return $iter.find(this.mapLines.iterator(), function (mapLine) {\n      var dataContext = mapLine.dataItem.dataContext;\n      return dataContext.id == id;\n    });\n  };\n\n  return MapLineSeries;\n}(MapSeries);\n\nexport { MapLineSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;","/**\r\n * Graticule (map grid line).\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapLine } from \"./MapLine\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Graticule is a map line spanning from the poles or around the globe.\r\n *\r\n * @since 4.3.0\r\n * @see {@link IGraticuleEvents} for a list of available events\r\n * @see {@link IGraticuleAdapters} for a list of available Adapters\r\n */\n\nvar Graticule =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Graticule, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Graticule() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"Graticule\"; // Apply theme\n\n    _this.applyTheme();\n\n    _this.shortestDistance = true;\n    return _this;\n  }\n\n  return Graticule;\n}(MapLine);\n\nexport { Graticule };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Graticule\"] = Graticule;","/**\r\n * Graticule (map grid) series functionality.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapLineSeries, MapLineSeriesDataItem } from \"./MapLineSeries\";\nimport { Graticule } from \"./Graticule\";\nimport { registry } from \"../../core/Registry\";\nimport * as d3geo from \"d3-geo\";\nimport * as $array from \"../../core/utils/Array\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[GraticuleSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar GraticuleSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GraticuleSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function GraticuleSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"GraticuleSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return GraticuleSeriesDataItem;\n}(MapLineSeriesDataItem);\n\nexport { GraticuleSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This class is used to create a set of graticules (map grid).\r\n *\r\n * To enable, create like you would create any regular map series:\r\n *\r\n * ```TypeScript\r\n * let graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JavaScript\r\n * var graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"series\": [{\r\n *     \"type\": \"GraticuleSeries\",\r\n *     \"mapLines\": {\r\n *       \"line\": {\r\n *         \"stroke\": \"#000000\",\r\n *         \"strokeOpacity\": 0.1\r\n *       }\r\n *     }\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.3.0\r\n * @see {@link IGraticuleSeriesEvents} for a list of available Events\r\n * @see {@link IGraticuleSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar GraticuleSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GraticuleSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function GraticuleSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"GraticuleSeries\";\n    _this.longitudeStep = 10;\n    _this.latitudeStep = 10;\n    _this.north = 90;\n    _this.south = -90;\n    _this.east = -180;\n    _this.west = 180; //this.majorLatitudeStep = 90;\n    //this.majorLongitudeStep = 360;\n\n    _this.fitExtent = true;\n    _this.singleSprite = true;\n\n    _this.events.disableType(\"geoBoundsChanged\");\n\n    _this.mapLines.template.line.strokeOpacity = 0.08;\n    _this.ignoreBounds = false;\n    _this.hiddenInLegend = true;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  GraticuleSeries.prototype.createDataItem = function () {\n    return new GraticuleSeriesDataItem();\n  };\n\n  GraticuleSeries.prototype.validateData = function () {\n    var _this = this;\n\n    _super.prototype.validateData.call(this);\n\n    this.mapLines.clear();\n    var graticule = d3geo.geoGraticule();\n\n    if (graticule) {\n      graticule.stepMinor([this.longitudeStep, this.latitudeStep]);\n      graticule.stepMajor([360, 360]);\n      var chart = this.chart;\n\n      if (this.fitExtent) {\n        graticule.extent([[chart.east, chart.north], [chart.west, chart.south]]);\n      } else {\n        graticule.extent([[this.east, this.north], [this.west, this.south]]);\n      }\n\n      if (this.singleSprite) {\n        var mapLine = this.mapLines.create();\n        mapLine.multiLine = graticule().coordinates;\n      } else {\n        var lineStrings = graticule.lines();\n        $array.each(lineStrings, function (lineString) {\n          var mapLine = _this.mapLines.create();\n\n          mapLine.multiLine = [lineString.coordinates];\n        });\n      }\n    }\n  };\n  /**\r\n   * Returns a new line instance of suitable type.\r\n   *\r\n   * @return New line\r\n   */\n\n\n  GraticuleSeries.prototype.createLine = function () {\n    return new Graticule();\n  };\n\n  Object.defineProperty(GraticuleSeries.prototype, \"latitudeStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"latitudeStep\");\n    },\n\n    /**\r\n     * Draw a graticule (grid) every X degrees of latitude.\r\n     *\r\n     * @default 10\r\n     * @param  value Step\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"latitudeStep\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GraticuleSeries.prototype, \"longitudeStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"longitudeStep\");\n    },\n\n    /**\r\n     * Draw a graticule (grid) every X degrees of longitude.\r\n     *\r\n     * @default 10\r\n     * @param  value  Step\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"longitudeStep\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GraticuleSeries.prototype, \"fitExtent\", {\n    /**\r\n     * @return Fit?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"fitExtent\");\n    },\n\n    /**\r\n     * Draw a thicker (major) graticule every X degrees of latitude.\r\n     *\r\n     * @default 90\r\n     * @param  value  Step\r\n     */\n    // public set majorLatitudeStep(value: number) {\n    // \tif (this.setPropertyValue(\"majorLatitudeStep\", value)) {\n    // \t\tthis.invalidateData();\n    // \t}\n    // }\n\n    /**\r\n     * @return Step\r\n     */\n    // public get majorLatitudeStep(): number {\n    // \treturn this.getPropertyValue(\"majorLatitudeStep\");\n    // }\n\n    /**\r\n     * Draw a thicker (major) graticule every X degrees of longitude.\r\n     *\r\n     * @default 360\r\n     * @param  value  Step\r\n     */\n    // public set majorLongitudeStep(value: number) {\n    // \tif (this.setPropertyValue(\"majorLongitudeStep\", value)) {\n    // \t\tthis.invalidateData();\n    // \t}\n    // }\n\n    /**\r\n     * @return Step\r\n     */\n    // public get majorLongitudeStep(): number {\n    // \treturn this.getPropertyValue(\"majorLongitudeStep\");\n    // }\n\n    /**\r\n     * Whether to cap graticules (grid) to actual span of the map (`true`), e.g.\r\n     * where there are polygons, or draw full-world grid (`false`).\r\n     *\r\n     * For world maps, using `false` makes sense. For smaller maps - not so much.\r\n     *\r\n     * If set to `false`, the grid will be drawn from this series `east` to\r\n     * `west`, and from `south` to `north` (default values: `east = -180`;\r\n     * `west = 180`; `south =-90`; `north =90`).\r\n     *\r\n     * These can be overridden by setting `GraticuleSeries`' respective\r\n     * properties.\r\n     *\r\n     * @default true\r\n     * @param  value  Fit?\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"fitExtent\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GraticuleSeries.prototype, \"singleSprite\", {\n    /**\r\n     * @return Use single sprite?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"singleSprite\");\n    },\n\n    /**\r\n     * Whether to draw all the grid as a single element or as separate lines.\r\n     *\r\n     * Setting `true` (default) will result in better performance, whereas\r\n     * `false` allows setting visual properties of each line individually.\r\n     *\r\n     * @default true\r\n     * @param  value  Use single sprite?\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"singleSprite\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return GraticuleSeries;\n}(MapLineSeries);\n\nexport { GraticuleSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"GraticuleSeries\"] = GraticuleSeries;\nregistry.registeredClasses[\"GraticuleSeriesDataItem\"] = GraticuleSeriesDataItem;","/**\r\n * Map module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { MapSeries } from \"../map/MapSeries\";\nimport { MapImage } from \"../map/MapImage\";\nimport { MapPolygon } from \"../map/MapPolygon\";\nimport { MapPolygonSeries } from \"../map/MapPolygonSeries\";\nimport { Projection } from \"../map/projections/Projection\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { SmallMap } from \"../map/SmallMap\";\nimport * as $mapUtils from \"../map/MapUtils\";\nimport { keyboard } from \"../../core/utils/Keyboard\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $ease from \"../../core/utils/Ease\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $geo from \"../map/Geo\";\nimport { GraticuleSeries } from \"../map/GraticuleSeries\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar MapChartDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return MapChartDataItem;\n}(SerialChartDataItem);\n\nexport { MapChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\n\nvar MapChart =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapChart() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A ratio to be used when scaling the map shapes.\r\n     *\r\n     * @readonly\r\n     */\n\n\n    _this.scaleRatio = 1;\n    /**\r\n     * Default duration of zoom animations (ms).\r\n     */\n\n    _this.zoomDuration = 1000;\n    /**\r\n     * Default zooming animation easing function.\r\n     */\n\n    _this.zoomEasing = $ease.cubicOut;\n    /**\r\n     * Smallest available zoom level. The map will not allow to zoom out past\r\n     * this setting.\r\n     *\r\n     * NOTE: Should be power of 2.\r\n     *\r\n     * @default 1\r\n     */\n\n    _this.minZoomLevel = 1;\n    /**\r\n     * Biggest available zoom level. The map will not allow to zoom in past\r\n     * this setting.\r\n     *\r\n     * NOTE: Should be power of 2.\r\n     *\r\n     * @default 32\r\n     */\n\n    _this.maxZoomLevel = 32;\n    /**\r\n     * [_prevZoomGeoPoint description]\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._prevZoomGeoPoint = {\n      latitude: 0,\n      longitude: 0\n    };\n    _this.className = \"MapChart\"; // Set default projection\n\n    _this.projection = new Projection();\n    _this.deltaLongitude = 0;\n    _this.deltaLatitude = 0;\n    _this.deltaGamma = 0;\n    _this.maxPanOut = 0.7;\n    _this.homeZoomLevel = 1;\n    _this.zoomStep = 2;\n    _this.layout = \"absolute\"; // Set padding\n\n    _this.padding(0, 0, 0, 0);\n\n    $utils.used(_this.backgroundSeries); // so that the map would render in a hidden div too\n\n    _this.minWidth = 10;\n    _this.minHeight = 10;\n\n    _this.events.once(\"inited\", _this.handleAllInited, _this, false); // Create a container for map series\n\n\n    var seriesContainer = _this.seriesContainer;\n    seriesContainer.visible = false;\n    seriesContainer.inert = true;\n    seriesContainer.resizable = true;\n    seriesContainer.events.on(\"transformed\", _this.handleMapTransform, _this, false);\n    seriesContainer.events.on(\"doublehit\", _this.handleDoubleHit, _this, false);\n    seriesContainer.events.on(\"dragged\", _this.handleDrag, _this, false);\n    seriesContainer.zIndex = 0;\n    seriesContainer.dragWhileResize = true; //seriesContainer.background.fillOpacity = 0;\n    // Set up events\n    //this.events.on(\"validated\", this.updateExtremes, this);\n    //this.events.on(\"datavalidated\", this.handleAllValidated, this, false);\n    //this.events.on(\"datavalidated\", this.updateExtremes, this, false);\n    // Set up main chart container, e.g. set backgrounds and events to monitor\n    // size changes, etc.\n\n    var chartContainer = _this.chartContainer;\n    chartContainer.parent = _this;\n    chartContainer.zIndex = -1;\n\n    _this._disposers.push(_this.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        if (_this._mapAnimation) {\n          _this._mapAnimation.stop();\n        }\n\n        var allInited_1 = true;\n\n        _this.series.each(function (series) {\n          series.updateTooltipBounds();\n\n          if (!series.inited || series.dataInvalid) {\n            allInited_1 = false;\n          }\n        });\n\n        if (allInited_1) {\n          _this.updateScaleRatio();\n        }\n\n        _this.zoomToGeoPoint(_this._zoomGeoPointReal, _this.zoomLevel, true, 0);\n      }\n    }, undefined, false));\n\n    var chartContainerBg = chartContainer.background;\n    chartContainerBg.fillOpacity = 0;\n    chartContainerBg.events.on(\"down\", function (e) {\n      _this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0));\n    }, _this);\n    chartContainerBg.events.on(\"up\", function (e) {\n      _this.seriesContainer.dragStop();\n    }, _this);\n    chartContainerBg.events.on(\"doublehit\", _this.handleDoubleHit, _this);\n    chartContainerBg.focusable = true;\n    chartContainer.events.on(\"down\", _this.handleMapDown, _this, false); // Add description to background\n\n    _this.background.fillOpacity = 0;\n    _this.background.readerTitle = _this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\"); // Add keyboard events for panning\n\n    _this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\n      if (_this.topParent.hasFocused && (!_this._zoomControl || !_this._zoomControl.thumb.isFocused)) {\n        switch (keyboard.getEventKey(ev.event)) {\n          case \"up\":\n            _this.pan({\n              x: 0,\n              y: 0.1\n            });\n\n            break;\n\n          case \"down\":\n            _this.pan({\n              x: 0,\n              y: -0.1\n            });\n\n            break;\n\n          case \"left\":\n            _this.pan({\n              x: 0.1,\n              y: 0\n            });\n\n            break;\n\n          case \"right\":\n            _this.pan({\n              x: -0.1,\n              y: 0\n            });\n\n            break;\n        }\n      }\n    }, _this));\n\n    _this.mouseWheelBehavior = \"zoom\";\n    var interaction = getInteraction();\n\n    _this._disposers.push(interaction.body.events.on(\"down\", _this.handlePanDown, _this));\n\n    _this._disposers.push(interaction.body.events.on(\"up\", _this.handlePanUp, _this)); //this._disposers.push(interaction.body.events.on(\"track\", this.handlePanMove, this));\n\n\n    var panSprite = _this.seriesContainer.createChild(Circle);\n\n    panSprite.radius = 10;\n    panSprite.inert = true;\n    panSprite.isMeasured = false;\n    panSprite.events.on(\"transformed\", _this.handlePanMove, _this, false);\n    panSprite.interactionsEnabled = false;\n    panSprite.opacity = 0;\n    panSprite.x = 0;\n    panSprite.y = 0;\n    _this.panSprite = panSprite;\n    _this.panBehavior = \"move\";\n    /*\r\n            this.panSprite.inertiaOptions.setKey(\"move\", {\r\n                \"time\": 100,\r\n                \"duration\": 1000,\r\n                \"factor\": 3,\r\n                \"easing\": $ease.sinOut\r\n            });*/\n    // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapChart.prototype.handlePanDown = function (event) {\n    var svgPoint = $utils.documentPointToSvg(event.pointer.point, this.htmlContainer);\n\n    if (svgPoint.x > 0 && svgPoint.y > 0 && svgPoint.x < this.svgContainer.width && svgPoint.y < this.svgContainer.height) {\n      // Get local point\n      this._downPointOrig = $utils.documentPointToSprite(event.pointer.point, this.seriesContainer);\n      this.panSprite.moveTo(this._downPointOrig);\n      this.panSprite.dragStart(event.pointer);\n      this._downDeltaLongitude = this.deltaLongitude;\n      this._downDeltaLatitude = this.deltaLatitude;\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapChart.prototype.handlePanUp = function (event) {\n    if (this._downPointOrig) {\n      this.panSprite.dragStop(event.pointer);\n    }\n\n    this._downPointOrig = undefined;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapChart.prototype.handlePanMove = function () {\n    if (!this.seriesContainer.isResized) {\n      var d3Projection = this.projection.d3Projection;\n      var panBehavior = this.panBehavior;\n\n      if (panBehavior != \"move\" && panBehavior != \"none\" && this._downPointOrig && d3Projection.rotate) {\n        var rotation = d3Projection.rotate();\n        var dln = rotation[0];\n        var dlt = rotation[1];\n        var dlg = rotation[2];\n        d3Projection.rotate([0, 0, 0]);\n        var downGeoLocal = this.projection.invert(this._downPointOrig);\n        var local = {\n          x: this.panSprite.pixelX,\n          y: this.panSprite.pixelY\n        };\n        var geoLocal = void 0;\n\n        if (local) {\n          geoLocal = this.projection.invert(local);\n        }\n\n        d3Projection.rotate([dln, dlt, dlg]);\n\n        if (geoLocal) {\n          if (panBehavior == \"rotateLat\" || panBehavior == \"rotateLongLat\") {\n            this.deltaLatitude = this._downDeltaLatitude + geoLocal.latitude - downGeoLocal.latitude;\n          }\n\n          if (panBehavior == \"rotateLong\" || panBehavior == \"rotateLongLat\") {\n            this.deltaLongitude = this._downDeltaLongitude + geoLocal.longitude - downGeoLocal.longitude;\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapChart.prototype.handleAllInited = function () {\n    var inited = true;\n    this.seriesContainer.visible = true;\n    this.series.each(function (series) {\n      if (!series.inited || series.dataInvalid) {\n        inited = false;\n      }\n    });\n\n    if (inited) {\n      this.updateCenterGeoPoint();\n      this.updateScaleRatio();\n      this.goHome(0);\n    } else {\n      registry.events.once(\"exitframe\", this.handleAllInited, this, false);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapChart.prototype.updateZoomGeoPoint = function () {\n    var seriesPoint = $utils.svgPointToSprite({\n      x: this.innerWidth / 2 + this.pixelPaddingLeft,\n      y: this.innerHeight / 2 + this.pixelPaddingTop\n    }, this.series.getIndex(0));\n    var geoPoint = this.projection.invert(seriesPoint);\n    this._zoomGeoPointReal = geoPoint;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapChart.prototype.updateCenterGeoPoint = function () {\n    var maxLeft;\n    var maxRight;\n    var maxTop;\n    var maxBottom;\n\n    if (this.backgroundSeries) {\n      var features = this.backgroundSeries.getFeatures();\n\n      if (features.length > 0) {\n        var bounds = this.projection.d3Path.bounds(features[0].geometry);\n        maxLeft = bounds[0][0];\n        maxTop = bounds[0][1];\n        maxRight = bounds[1][0];\n        maxBottom = bounds[1][1];\n      }\n    } else {\n      this.series.each(function (series) {\n        var bbox = series.group.node.getBBox();\n\n        if (maxLeft > bbox.x || !$type.isNumber(maxLeft)) {\n          maxLeft = bbox.x;\n        }\n\n        if (maxRight < bbox.x + bbox.width || !$type.isNumber(maxRight)) {\n          maxRight = bbox.x + bbox.width;\n        }\n\n        if (maxTop > bbox.y || !$type.isNumber(maxTop)) {\n          maxTop = bbox.y;\n        }\n\n        if (maxBottom < bbox.y + bbox.height || !$type.isNumber(maxBottom)) {\n          maxBottom = bbox.y + bbox.height;\n        }\n      });\n    }\n\n    this.seriesMaxLeft = maxLeft;\n    this.seriesMaxRight = maxRight;\n    this.seriesMaxTop = maxTop;\n    this.seriesMaxBottom = maxBottom;\n    this.seriesWidth = maxRight - maxLeft;\n    this.seriesHeight = maxBottom - maxTop;\n\n    if (this.seriesWidth > 0 && this.seriesHeight > 0) {\n      this.chartContainer.visible = true;\n      this._centerGeoPoint = this.projection.invert({\n        x: maxLeft + (maxRight - maxLeft) / 2,\n        y: maxTop + (maxBottom - maxTop) / 2\n      });\n\n      if (!this._zoomGeoPointReal || !$type.isNumber(this._zoomGeoPointReal.latitude)) {\n        this._zoomGeoPointReal = this._centerGeoPoint;\n      }\n    } else {\n      this.chartContainer.visible = false;\n    }\n  };\n  /**\r\n   * Prevents map to be dragged out of the container area\r\n   * @ignore\r\n   */\n\n\n  MapChart.prototype.handleDrag = function () {\n    var d = this.zoomLevel * this.scaleRatio;\n    var ww = this.seriesWidth * d;\n    var hh = this.seriesHeight * d;\n    var seriesContainer = this.seriesContainer;\n    var maxLeft = this.seriesMaxLeft * d;\n    var maxRight = this.seriesMaxRight * d;\n    var maxTop = this.seriesMaxTop * d;\n    var maxBottom = this.seriesMaxBottom * d;\n    var x = seriesContainer.pixelX;\n    var y = seriesContainer.pixelY;\n    var maxPanOut = this.maxPanOut;\n    var minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww - maxLeft, -maxLeft);\n\n    if (x < minX) {\n      x = minX;\n    }\n\n    var maxX = Math.max(this.maxWidth * maxPanOut - maxLeft, this.maxWidth - maxRight);\n\n    if (x > maxX) {\n      x = maxX;\n    }\n\n    var minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh - maxTop, -maxTop);\n\n    if (y < minY) {\n      y = minY;\n    }\n\n    var maxY = Math.max(this.maxHeight * maxPanOut - maxTop, this.maxHeight - maxBottom);\n\n    if (y > maxY) {\n      y = maxY;\n    }\n\n    seriesContainer.moveTo({\n      x: x,\n      y: y\n    }, undefined, undefined, true);\n    this._zoomGeoPointReal = this.zoomGeoPoint;\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  MapChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Map\");\n    }\n  };\n  /**\r\n   * Handles event when a pointer presses down on the map, e.g. user presses\r\n   * down mouse or touches the map on a screen.\r\n   *\r\n   * Stops all animations currently going on.\r\n   */\n\n\n  MapChart.prototype.handleMapDown = function () {\n    if (this._mapAnimation) {\n      this._mapAnimation.stop();\n    }\n  };\n  /**\r\n   * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n   * in on the reference point.\r\n   *\r\n   * @param event  Original event\r\n   */\n\n\n  MapChart.prototype.handleDoubleHit = function (event) {\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var geoPoint = this.svgPointToGeo(svgPoint);\n    this.zoomIn(geoPoint);\n  };\n  /**\r\n   * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n   * map: zooms in or out depending on the direction of the wheel turn.\r\n   *\r\n   * @param event  Original event\r\n   */\n\n\n  MapChart.prototype.handleWheel = function (event) {\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var geoPoint = this.svgPointToGeo(svgPoint);\n\n    if (event.shift.y < 0) {\n      this.zoomIn(geoPoint);\n    } else {\n      this.zoomOut(geoPoint);\n    }\n  };\n\n  Object.defineProperty(MapChart.prototype, \"mouseWheelBehavior\", {\n    /**\r\n     * @return mouse wheel behavior\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"mouseWheelBehavior\");\n    },\n\n    /**\r\n     * Specifies what should chart do if when mouse wheel is rotated.\r\n     *\r\n     * @param mouse wheel behavior\r\n     * @default zoomX\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\n\n          this._disposers.push(this._mouseWheelDisposer);\n        } else {\n          if (this._mouseWheelDisposer) {\n            this._mouseWheelDisposer.dispose();\n          }\n\n          this.chartContainer.wheelable = false;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"panBehavior\", {\n    /**\r\n     * @returns Behavior\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"panBehavior\");\n    },\n\n    /**\r\n     * What \"dragging\" map does.\r\n     *\r\n     * Available values:\r\n     * * `\"move\"` (default): changes position of the map.\r\n     * * `\"rotateLat\"`: changes `deltaLatitude` (rotates the globe vertically).\r\n     * * `\"rotateLong\"`: changes `deltaLongitude` (rotates the globe horizontally).\r\n     * * `\"rotateLongLat\"`: changes both `deltaLongitude` and `deltaLatitude` (rotates the globe in any direction).\r\n     *\r\n     * @default \"move\"\r\n     * @since 4.3.0\r\n     * @param  value  Behavior\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"panBehavior\", value)) {\n        var seriesContainer = this.seriesContainer;\n        this.panSprite.draggable = false;\n        seriesContainer.draggable = false;\n\n        switch (value) {\n          case \"move\":\n            seriesContainer.draggable = true;\n            break;\n\n          default:\n            this.panSprite.draggable = true;\n            break;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"projection\", {\n    /**\r\n     * @return Projection\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"projection\");\n    },\n\n    /**\r\n     * Projection to use for the map.\r\n     *\r\n     * Available projections:\r\n     * * Albers\r\n     * * AlbersUSA\r\n     * * AzimuthalEqualArea\r\n     * * Eckert6\r\n     * * EqualEarth\r\n     * * Mercator\r\n     * * Miller\r\n     * * NaturalEarth\r\n     * * Orthographic\r\n     * * Stereographic\r\n     *\r\n     * ```TypeScript\r\n     * map.projection = new am4maps.projections.Mercator();\r\n     * ```\r\n     * ```JavaScript\r\n     * map.projection = new am4maps.projections.Mercator();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"projection\": \"Mercator\"\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Setting_projection} More about projections\r\n     * @param projection  Projection\r\n     */\n    set: function set(projection) {\n      var _this = this;\n\n      if (this.setPropertyValue(\"projection\", projection)) {\n        this.invalidateProjection();\n        projection.chart = this;\n        this.series.each(function (series) {\n          _this.addDisposer(series.events.once(\"validated\", function () {\n            _this.updateCenterGeoPoint();\n\n            _this.updateScaleRatio();\n\n            _this.goHome(0);\n          }));\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  MapChart.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n\n    this.updateExtremes();\n  };\n  /**\r\n   * Calculates the longitudes and latitudes of the most distant points from\r\n   * the center in all four directions: West, East, North, and South.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapChart.prototype.updateExtremes = function () {\n    var east;\n    var north;\n    var west;\n    var south;\n    this.series.each(function (series) {\n      if (series.ignoreBounds || series instanceof GraticuleSeries && series.fitExtent) {} else {\n        if (series.north > north || !$type.isNumber(north)) {\n          north = series.north;\n        }\n\n        if (series.south < south || !$type.isNumber(south)) {\n          south = series.south;\n        }\n\n        if (series.west < west || !$type.isNumber(west)) {\n          west = series.west;\n        }\n\n        if (series.east > east || !$type.isNumber(east)) {\n          east = series.east;\n        }\n      }\n    });\n    var features = [];\n    var foundGraticule = false; // if we gave graticule, get features of these series only for faster fitSize\n\n    this.series.each(function (series) {\n      if (series instanceof GraticuleSeries && !series.fitExtent) {\n        features = series.getFeatures();\n        foundGraticule = true;\n      }\n    });\n\n    if (!foundGraticule) {\n      this.series.each(function (series) {\n        if (series.ignoreBounds || series instanceof GraticuleSeries && series.fitExtent) {} else {\n          features = features.concat(series.getFeatures());\n        }\n      });\n    }\n\n    var w = $math.max(50, this.innerWidth);\n    var h = $math.max(50, this.innerHeight);\n    var d3Projection = this.projection.d3Projection;\n\n    if (features.length > 0 && d3Projection && (this.east != east || this.west != west || this.north != north || this.south != south)) {\n      this.east = east;\n      this.west = west;\n      this.north = north;\n      this.south = south;\n\n      if (d3Projection.rotate) {\n        var rotation = d3Projection.rotate();\n        var deltaLong = rotation[0];\n        var deltaLat = rotation[1];\n        var deltaGamma = rotation[2];\n        this.deltaLongitude = deltaLong;\n        this.deltaLatitude = deltaLat;\n        this.deltaGamma = deltaGamma;\n      }\n\n      var geoJSON = {\n        \"type\": \"FeatureCollection\",\n        features: features\n      };\n      var initialScale = d3Projection.scale();\n      d3Projection.fitSize([w, h], geoJSON);\n\n      if (d3Projection.scale() != initialScale) {\n        this.invalidateDataUsers();\n      }\n\n      this.series.each(function (series) {\n        if (series instanceof GraticuleSeries) {\n          series.invalidateData();\n        }\n      });\n\n      if (this._backgroundSeries) {\n        var polygon = this._backgroundSeries.mapPolygons.getIndex(0);\n\n        if (polygon) {\n          polygon.multiPolygon = $mapUtils.getBackground(this.north, this.east, this.south, this.west);\n        }\n      }\n\n      this._fitWidth = w;\n      this._fitHeight = h;\n    }\n\n    if (!this._zoomGeoPointReal || !$type.isNumber(this._zoomGeoPointReal.latitude)) {\n      this.goHome(0);\n    }\n  };\n  /**\r\n   * (Re)calculates a ratio which should be used to scale the actual map so\r\n   * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n   * @ignore\r\n   */\n\n\n  MapChart.prototype.updateScaleRatio = function () {\n    var scaleRatio;\n    this.updateCenterGeoPoint();\n    var hScale = this.innerWidth / this.seriesWidth;\n    var vScale = this.innerHeight / this.seriesHeight;\n    scaleRatio = $math.min(hScale, vScale);\n\n    if ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\n      scaleRatio = 1;\n    }\n\n    if (scaleRatio != this.scaleRatio) {\n      this.scaleRatio = scaleRatio;\n      $iter.each(this.series.iterator(), function (series) {\n        series.scale = scaleRatio;\n        series.updateTooltipBounds();\n      });\n      this.backgroundSeries.scale = scaleRatio;\n      this.dispatch(\"scaleratiochanged\");\n    }\n  };\n  /**\r\n   * Converts a point within map container to geographical (lat/long)\r\n   * coordinates.\r\n   *\r\n   * @param point  Source point\r\n   * @return Geo-point\r\n   */\n\n\n  MapChart.prototype.svgPointToGeo = function (point) {\n    var series = this.series.getIndex(0);\n\n    if (series) {\n      var seriesPoint = $utils.svgPointToSprite(point, series);\n      return this.seriesPointToGeo(seriesPoint);\n    }\n  };\n  /**\r\n   * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n   * container.\r\n   *\r\n   * @param point  Source geo-point\r\n   * @return Point\r\n   */\n\n\n  MapChart.prototype.geoPointToSVG = function (point) {\n    var series = this.series.getIndex(0);\n\n    if (series) {\n      var seriesPoint = this.geoPointToSeries(point);\n      return $utils.spritePointToSvg(seriesPoint, series);\n    }\n  };\n  /**\r\n   * Converts a point (X/Y) within actual objects of the map to geographical\r\n   * (lat/long) coordinates.\r\n   *\r\n   * @param point  Source point\r\n   * @return Geo-point\r\n   */\n\n\n  MapChart.prototype.seriesPointToGeo = function (point) {\n    return this.projection.invert(point);\n  };\n  /**\r\n   * Converts geographical (lat/long) coordinates to an X/Y point within\r\n   * actual elements/objects of the maps.\r\n   *\r\n   * @param point  Source geo-point\r\n   * @return Point\r\n   */\n\n\n  MapChart.prototype.geoPointToSeries = function (point) {\n    return this.projection.convert(point);\n  };\n\n  Object.defineProperty(MapChart.prototype, \"geodata\", {\n    /**\r\n     * @return GeoJSON data\r\n     */\n    get: function get() {\n      return this._geodata;\n    },\n\n    /**\r\n     * Map data in GeoJSON format.\r\n     *\r\n     * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n     * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n     *\r\n     * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n     * @param geoJSON GeoJSON data\r\n     */\n    set: function set(geodata) {\n      if (geodata != this._geodata) {\n        this._geodata = geodata;\n        this.invalidateData();\n        this.dataUsers.each(function (dataUser) {\n          for (var i = dataUser.data.length - 1; i >= 0; i--) {\n            if (dataUser.data[i].madeFromGeoData == true) {\n              dataUser.data.splice(i, 1);\n            }\n          }\n\n          dataUser.disposeData();\n          dataUser.invalidateData();\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n   * coordinate.\r\n   *\r\n   * @param point      Center coordinate\r\n   * @param zoomLevel  Zoom level\r\n   * @param center     Center on the given coordinate?\r\n   * @param duration   Duration for zoom animation (ms)\r\n   * @return Zoom animation\r\n   */\n\n  MapChart.prototype.zoomToGeoPoint = function (point, zoomLevel, center, duration) {\n    var _this = this;\n\n    if (!point) {\n      point = this.zoomGeoPoint;\n    }\n\n    if (!point || !$type.isNumber(point.longitude) || !$type.isNumber(point.latitude)) {\n      return;\n    }\n\n    this._zoomGeoPointReal = point;\n    zoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\n    var seriesPoint = this.projection.convert(point);\n\n    if (seriesPoint) {\n      var svgPoint = this.geoPointToSVG(point);\n      var mapPoint = $utils.svgPointToSprite(svgPoint, this);\n\n      if (center) {\n        mapPoint = {\n          x: this.innerWidth / 2,\n          y: this.innerHeight / 2\n        };\n      }\n\n      if (!$type.isNumber(duration)) {\n        duration = this.zoomDuration;\n      }\n\n      this._mapAnimation = this.seriesContainer.animate([{\n        property: \"scale\",\n        to: zoomLevel\n      }, {\n        property: \"x\",\n        from: this.seriesContainer.pixelX,\n        to: mapPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio\n      }, {\n        property: \"y\",\n        from: this.seriesContainer.pixelY,\n        to: mapPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio\n      }], duration, this.zoomEasing);\n\n      this._disposers.push(this._mapAnimation.events.on(\"animationended\", function () {\n        _this._zoomGeoPointReal = _this.zoomGeoPoint;\n      }));\n\n      this.seriesContainer.validatePosition();\n      return this._mapAnimation;\n    }\n  };\n  /**\r\n   * Zooms the map to a particular map object.\r\n   *\r\n   * @param mapObject  Target map object\r\n   * @param zoomLevel  Zoom level\r\n   * @param center     Center on the given coordinate?\r\n   * @param duration   Duration for zoom animation (ms)\r\n   * @return Zoom animation\r\n   */\n\n\n  MapChart.prototype.zoomToMapObject = function (mapObject, zoomLevel, center, duration) {\n    if (center == undefined) {\n      center = true;\n    }\n\n    if (mapObject instanceof MapImage) {\n      if ($type.isNaN(zoomLevel)) {\n        zoomLevel = 5;\n      }\n\n      return this.zoomToGeoPoint({\n        latitude: mapObject.latitude,\n        longitude: mapObject.longitude\n      }, zoomLevel, center, duration);\n    }\n\n    var dataItem = mapObject.dataItem;\n\n    if (dataItem && $type.isNumber(dataItem.zoomLevel)) {\n      zoomLevel = dataItem.zoomLevel;\n    }\n\n    if (mapObject instanceof MapPolygon) {\n      var dataItem_1 = mapObject.dataItem;\n      var bbox = mapObject.polygon.bbox;\n\n      if (!$type.isNumber(zoomLevel)) {\n        zoomLevel = Math.min(this.seriesWidth / bbox.width, this.seriesHeight / bbox.height);\n      }\n\n      var geoPoint = void 0;\n\n      if (dataItem_1 && $type.hasValue(dataItem_1.zoomGeoPoint)) {\n        geoPoint = dataItem_1.zoomGeoPoint;\n      } else {\n        // this is more accurate\n        var polygonPoint = {\n          x: bbox.x + bbox.width / 2,\n          y: bbox.y + bbox.height / 2\n        };\n        var seriesPoint = $utils.spritePointToSprite(polygonPoint, mapObject.polygon, mapObject.series);\n        geoPoint = this.seriesPointToGeo(seriesPoint);\n      }\n\n      return this.zoomToGeoPoint(geoPoint, zoomLevel, true, duration);\n    }\n  };\n  /**\r\n   * Zooms the map to a particular viewport.\r\n   *\r\n   * The `north`, `east`, `south`, and `west` define boundaries of the\r\n   * imaginary viewort we want to zoom the map to.\r\n   *\r\n   * `level` is not actual zoom level. The map will determine the zoom level\r\n   * required to accommodated such zoom, and will adjust it by `level` if set.\r\n   *\r\n   * @param north     Latitude of the North-most boundary\r\n   * @param east      Longitude of the East-most boundary\r\n   * @param south     Latitude of the South-most boundary\r\n   * @param west      Longitude of the West-most boundary\r\n   * @param level     Adjust zoom level\r\n   * @param center    Center on the given coordinate?\r\n   * @param duration  Duration for zoom animation (ms)\r\n   * @return Zoom animation\r\n   */\n\n\n  MapChart.prototype.zoomToRectangle = function (north, east, south, west, level, center, duration) {\n    if ($type.isNaN(level)) {\n      level = 1;\n    }\n\n    var zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\n    return this.zoomToGeoPoint({\n      latitude: north + (south - north) / 2,\n      longitude: west + (east - west) / 2\n    }, zoomLevel, center, duration);\n  };\n  /**\r\n   * Zooms in the map, optionally centering on particular latitude/longitude\r\n   * point.\r\n   *\r\n   * @param geoPoint  Optional center point\r\n   * @param duration  Duration for zoom animation (ms)\r\n   * @return Zoom animation\r\n   */\n\n\n  MapChart.prototype.zoomIn = function (geoPoint, duration) {\n    return this.zoomToGeoPoint(geoPoint, this.zoomLevel * this.zoomStep, false, duration);\n  };\n  /**\r\n   * Zooms out the map, optionally centering on particular latitude/longitude\r\n   * point.\r\n   *\r\n   * @param geoPoint  Optional center point\r\n   * @param duration  Duration for zoom animation (ms)\r\n   * @return Zoom animation\r\n   */\n\n\n  MapChart.prototype.zoomOut = function (geoPoint, duration) {\n    return this.zoomToGeoPoint(geoPoint, this.zoomLevel / this.zoomStep, false, duration);\n  };\n  /**\r\n   * Pans the maps using relative coordinates. E.g.:\r\n   *\r\n   * ```JSON\r\n   * {\r\n   *   x: 0.1,\r\n   *   y: -0.1\r\n   * }\r\n   * ```\r\n   *\r\n   * The above will move the map by 10% to the right, and by 10% upwards.\r\n   *\r\n   * @param shift     Vertical and horizontal shift\r\n   * @param duration  Pan animation duration (ms)\r\n   */\n\n\n  MapChart.prototype.pan = function (shift, duration) {\n    var point = this.geoPointToSVG(this.zoomGeoPoint);\n    point.x += this.pixelWidth * shift.x;\n    point.y += this.pixelHeight * shift.y;\n    this.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration);\n  };\n\n  Object.defineProperty(MapChart.prototype, \"zoomGeoPoint\", {\n    /**\r\n     * Current lat/long coordinates for the center of the viewport. (default\r\n     * zoom reference point)\r\n     *\r\n     * @readonly\r\n     * @return Coordinates\r\n     */\n    get: function get() {\n      var point = $utils.spritePointToSvg({\n        x: this.pixelWidth / 2,\n        y: this.pixelHeight / 2\n      }, this);\n      return this.svgPointToGeo(point);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"zoomLevel\", {\n    /**\r\n     * @return Zoom level\r\n     */\n    get: function get() {\n      return this.seriesContainer.scale;\n    },\n\n    /**\r\n     * Current zoom level.\r\n     *\r\n     * @readonly\r\n     * @return Zoom level\r\n     */\n    set: function set(value) {\n      this.seriesContainer.scale = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Dispatches events after some map transformation, like pan or zoom.\r\n   *\r\n   * @ignore\r\n   */\n\n  MapChart.prototype.handleMapTransform = function () {\n    if (this.zoomLevel != this._prevZoomLevel) {\n      this.dispatch(\"zoomlevelchanged\");\n      this._prevZoomLevel = this.zoomLevel;\n    }\n\n    if (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\n      this.dispatch(\"mappositionchanged\");\n    }\n  };\n\n  Object.defineProperty(MapChart.prototype, \"smallMap\", {\n    /**\r\n     * @return Small map\r\n     */\n    get: function get() {\n      if (!this._smallMap) {\n        var smallMap = new SmallMap();\n        this.smallMap = smallMap;\n      }\n\n      return this._smallMap;\n    },\n\n    /**\r\n     * A [[SmallMap]] to be used on the map.\r\n     *\r\n     * Please note, that accessing this property will NOT create a small map\r\n     * if it has not yet been created. (except in JSON)\r\n     *\r\n     * ```TypeScript\r\n     * // Create a small map\r\n     * map.smallMap = new am4maps.SmallMap();\r\n     * ```\r\n     * ```JavaScript\r\n     * // Create a small map\r\n     * map.smallMap = new am4maps.SmallMap();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"smallMap\": {}\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @param smallMap  Small map\r\n     */\n    set: function set(smallMap) {\n      if (this._smallMap) {\n        this.removeDispose(this._smallMap);\n      }\n\n      this._smallMap = smallMap;\n      this._smallMap.chart = this;\n      smallMap.parent = this.chartContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"zoomControl\", {\n    /**\r\n     * @return Zoom control\r\n     */\n    get: function get() {\n      return this._zoomControl;\n    },\n\n    /**\r\n     * A [[ZoomControl]] to be used on the map.\r\n     *\r\n     * Please note, that accessing this property will NOT create a zoom control\r\n     * if it has not yet been created. (except in JSON)\r\n     *\r\n     * ```TypeScript\r\n     * // Create a zoom control\r\n     * map.zoomControl = new am4maps.ZoomControl();\r\n     * ```\r\n     * ```JavaScript\r\n     * // Create a zoom control\r\n     * map.zoomControl = new am4maps.ZoomControl();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"zoomControl\": {}\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @param zoomControl  Zoom control\r\n     */\n    set: function set(zoomControl) {\n      if (this._zoomControl) {\n        this.removeDispose(this._zoomControl);\n      }\n\n      this._zoomControl = zoomControl;\n      zoomControl.chart = this;\n      zoomControl.parent = this.chartContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a map series of appropriate type.\r\n   *\r\n   * @return Map series\r\n   */\n\n  MapChart.prototype.createSeries = function () {\n    return new MapSeries();\n  };\n\n  Object.defineProperty(MapChart.prototype, \"deltaLongitude\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"deltaLongitude\");\n    },\n\n    /**\r\n     * Degrees to rotate the map around vertical axis (Y).\r\n     *\r\n     * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n     * a Pacific-centered map.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n     * @param  value  Rotation\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\n        this.rotateMap();\n        this.updateZoomGeoPoint();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"deltaLatitude\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"deltaLatitude\");\n    },\n\n    /**\r\n     * Degrees to rotate the map around horizontal axis (X).\r\n     *\r\n     * E.g. setting this to 90 will put Antarctica directly in the center of\r\n     * the map.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n     * @since 4.3.0\r\n     * @param  value  Rotation\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"deltaLatitude\", value)) {\n        this.rotateMap();\n        this.updateZoomGeoPoint();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"deltaGamma\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"deltaGamma\");\n    },\n\n    /**\r\n     * Degrees to rotate the map around \"Z\" axis. This is the axis that pierces\r\n     * the globe directly from the viewer's point of view.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n     * @since 4.3.0\r\n     * @param  value  Rotation\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"deltaGamma\", value)) {\n        this.rotateMap();\n        this.updateZoomGeoPoint();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  MapChart.prototype.rotateMap = function () {\n    if (this.projection.d3Projection) {\n      if (this.projection.d3Projection.rotate) {\n        this.projection.d3Projection.rotate([this.deltaLongitude, this.deltaLatitude, this.deltaGamma]);\n        this.invalidateProjection();\n      }\n    }\n  };\n\n  Object.defineProperty(MapChart.prototype, \"maxPanOut\", {\n    /**\r\n     * @return Max pan out\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxPanOut\");\n    },\n\n    /**\r\n     * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n     *\r\n     * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n     * outside the viewport.\r\n     *\r\n     * 0.5 will allow half of the map to be outside viewable area.\r\n     *\r\n     * @default 0.7\r\n     * @param value  Max pan out\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"maxPanOut\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"homeGeoPoint\", {\n    /**\r\n     * @return Home geo point\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"homeGeoPoint\");\n    },\n\n    /**\r\n     * The geographical point to center map on when it is first loaded.\r\n     *\r\n     * The map will also be centered to this point when you call `goHome()`\r\n     * method.\r\n     *\r\n     * @param value  Home geo point\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"homeGeoPoint\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"homeZoomLevel\", {\n    /**\r\n     * @return Home zoom level\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"homeZoomLevel\");\n    },\n\n    /**\r\n     * The zoom level to put the map in when it is first loaded.\r\n     *\r\n     * The map will also be set to this zoom level when you call `goHome()`\r\n     * method.\r\n     *\r\n     * @param value  Home zoom level\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"homeZoomLevel\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapChart.prototype, \"zoomStep\", {\n    /**\r\n     * @return Zoom factor\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"zoomStep\");\n    },\n\n    /**\r\n     * When user zooms in or out current zoom level is multiplied or divided\r\n     * by value of this setting.\r\n     *\r\n     * @default 2\r\n     * @param value  Zoom factor\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"zoomStep\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invalidates projection, causing all series to be redrawn.\r\n   *\r\n   * Call this after changing projection or its settings.\r\n   */\n\n  MapChart.prototype.invalidateProjection = function () {\n    this.invalidateDataUsers();\n    this.updateCenterGeoPoint();\n  };\n\n  Object.defineProperty(MapChart.prototype, \"geodataSource\", {\n    /**\r\n     * Returns a [[DataSource]] specifically for loading Component's data.\r\n     *\r\n     * @return Data source\r\n     */\n    get: function get() {\n      if (!this._dataSources[\"geodata\"]) {\n        this.getDataSource(\"geodata\");\n      }\n\n      return this._dataSources[\"geodata\"];\n    },\n\n    /**\r\n     * Sets a [[DataSource]] to be used for loading Component's data.\r\n     *\r\n     * @param value Data source\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (this._dataSources[\"geodata\"]) {\n        this.removeDispose(this._dataSources[\"geodata\"]);\n      }\n\n      this._dataSources[\"geodata\"] = value;\n      this._dataSources[\"geodata\"].component = this;\n      this.events.on(\"inited\", function () {\n        _this.loadData(\"geodata\");\n      }, this, false);\n      this.setDataSourceEvents(value, \"geodata\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  MapChart.prototype.processConfig = function (config) {\n    if ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\n      var name_1 = config[\"geodata\"]; // Check if there's a map loaded by such name\n\n      if ($type.hasValue(window[\"am4geodata_\" + config[\"geodata\"]])) {\n        config[\"geodata\"] = window[\"am4geodata_\" + config[\"geodata\"]];\n      } // Nope. Let's try maybe we got JSON as string?\n      else {\n          try {\n            config[\"geodata\"] = JSON.parse(config[\"geodata\"]);\n          } catch (e) {\n            // No go again. Error out.\n            throw Error(\"MapChart error: Geodata `\" + name_1 + \"` is not loaded or is incorrect.\");\n          }\n        }\n    } // Instantiate projection\n\n\n    if ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\n      config[\"projection\"] = this.createClassInstance(config[\"projection\"]);\n    } // Set up small map\n\n\n    if ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\n      config.smallMap.type = \"SmallMap\";\n    } // Set up zoom control\n\n\n    if ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\n      config.zoomControl.type = \"ZoomControl\";\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Decorates a new [[Series]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  MapChart.prototype.handleSeriesAdded = function (event) {\n    _super.prototype.handleSeriesAdded.call(this, event);\n\n    var series = event.newValue;\n    series.scale = this.scaleRatio;\n    series.events.on(\"validated\", this.updateCenterGeoPoint, this, false);\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  MapChart.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"smallMap\") {\n        return 1;\n      } else if (b == \"smallMap\") {\n        return -1;\n      } else if (a == \"series\") {\n        return 1;\n      } else if (b == \"series\") {\n        return -1;\n      } else {\n        return _super.prototype.configOrder.call(this, a, b);\n      }\n  };\n  /**\r\n   * Adds `projection` to \"as is\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as is?\r\n   */\n\n\n  MapChart.prototype.asIs = function (field) {\n    return field == \"projection\" || field == \"geodata\" || _super.prototype.asIs.call(this, field);\n  };\n\n  Object.defineProperty(MapChart.prototype, \"centerGeoPoint\", {\n    /**\r\n     * Geo point of map center\r\n     *\r\n     * @readonly\r\n     */\n    get: function get() {\n      return this._centerGeoPoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Resets the map to its original position and zoom level.\r\n   *\r\n   * Use the only parameter to set number of milliseconds for the zoom\r\n   * animation to play.\r\n   *\r\n   * @param  duration  Duration (ms)\r\n   */\n\n  MapChart.prototype.goHome = function (duration) {\n    var homeGeoPoint = this.homeGeoPoint;\n\n    if (!homeGeoPoint) {\n      homeGeoPoint = this.centerGeoPoint;\n    }\n\n    if (homeGeoPoint) {\n      this.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration);\n    }\n  };\n  /**\r\n   * Sets [[Paper]] instance to use to draw elements.\r\n   *\r\n   * @ignore\r\n   * @param   paper  Paper\r\n   * @return         true if paper was changed, false, if it's the same\r\n   */\n\n\n  MapChart.prototype.setPaper = function (paper) {\n    if (this.svgContainer) {\n      this.svgContainer.hideOverflow = true;\n    }\n\n    return _super.prototype.setPaper.call(this, paper);\n  };\n\n  Object.defineProperty(MapChart.prototype, \"backgroundSeries\", {\n    /**\r\n     * Background series will create polygons that will fill all the map area\r\n     * with some color (or other fill).\r\n     *\r\n     * This might be useful with non-rectangular projections, like Orthographic,\r\n     * Albers, etc.\r\n     *\r\n     * To change background color/opacity access polygon template.\r\n     *\r\n     * ```TypeScript\r\n     * chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#fff\");\r\n     * chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#fff\");\r\n     * chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   \"backgroundSeries\": {\r\n     *     \"mapPolygons\": {\r\n     *       \"polygon\": {\r\n     *         \"fill\": \"#fff\",\r\n     *         \"fillOpacity\": 0.1\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @since 4.3.0\r\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._backgroundSeries) {\n        var backgroundSeries = new MapPolygonSeries();\n        backgroundSeries.parent = this.seriesContainer;\n        backgroundSeries.chart = this;\n        backgroundSeries.hiddenInLegend = true;\n        backgroundSeries.addDisposer(new Disposer(function () {\n          _this._backgroundSeries = undefined;\n        }));\n\n        this._disposers.push(backgroundSeries);\n\n        var interfaceColors = new InterfaceColorSet();\n        var color = interfaceColors.getFor(\"background\");\n        var polygonTemplate = backgroundSeries.mapPolygons.template.polygon;\n        polygonTemplate.stroke = color;\n        polygonTemplate.fill = color;\n        polygonTemplate.fillOpacity = 0;\n        polygonTemplate.strokeOpacity = 0;\n        backgroundSeries.mapPolygons.create();\n        this._backgroundSeries = backgroundSeries;\n      }\n\n      return this._backgroundSeries;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Prepares the legend instance for use in this chart.\r\n   *\r\n   * @param legend  Legend\r\n   */\n\n  MapChart.prototype.setLegend = function (legend) {\n    _super.prototype.setLegend.call(this, legend);\n\n    legend.parent = this;\n  };\n  /**\r\n   * @param  value  Tap to activate?\r\n   */\n\n\n  MapChart.prototype.setTapToActivate = function (value) {\n    _super.prototype.setTapToActivate.call(this, value); // setup other containers\n\n\n    this.seriesContainer.interactions.isTouchProtected = true;\n    this.panSprite.interactions.isTouchProtected = true;\n  };\n\n  MapChart.prototype.handleTapToActivate = function () {\n    _super.prototype.handleTapToActivate.call(this);\n\n    this.seriesContainer.interactions.isTouchProtected = false;\n    this.panSprite.interactions.isTouchProtected = false;\n  };\n\n  MapChart.prototype.handleTapToActivateDeactivation = function () {\n    _super.prototype.handleTapToActivateDeactivation.call(this);\n\n    this.seriesContainer.interactions.isTouchProtected = true;\n    this.panSprite.interactions.isTouchProtected = true;\n  };\n\n  return MapChart;\n}(SerialChart);\n\nexport { MapChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapChart\"] = MapChart;","/**\r\n * Map spline module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapLine } from \"./MapLine\";\nimport { Polyspline } from \"../../core/elements/Polyspline\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a spline on the map.\r\n *\r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\n\nvar MapSpline =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapSpline, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapSpline() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapSpline\"; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapSpline.prototype.createLine = function () {\n    this.line = new Polyspline();\n    this.line.tensionX = 0.8;\n    this.line.tensionY = 0.8;\n  };\n\n  Object.defineProperty(MapSpline.prototype, \"shortestDistance\", {\n    /**\r\n     * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n     * @default false\r\n     * @param value\r\n     * @todo: review description\r\n     */\n    get: function get() {\n      return false;\n    },\n    set: function set(value) {},\n    enumerable: true,\n    configurable: true\n  });\n  return MapSpline;\n}(MapLine);\n\nexport { MapSpline };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;","/**\r\n * Map arched line module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapLine } from \"./MapLine\";\nimport { Polyarc } from \"../../core/elements/Polyarc\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw an arched line on the map.\r\n *\r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\n\nvar MapArc =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapArc, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapArc() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapArc\"; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapArc.prototype.createLine = function () {\n    this.line = new Polyarc();\n  };\n\n  Object.defineProperty(MapArc.prototype, \"shortestDistance\", {\n    get: function get() {\n      return false;\n    },\n\n    /**\r\n     * `shortestDistance = true` is not supported by `MapArc`.\r\n     *\r\n     * Only [[MapLine]] supports it.\r\n     *\r\n     * @default false\r\n     * @param value\r\n     */\n    set: function set(value) {},\n    enumerable: true,\n    configurable: true\n  });\n  return MapArc;\n}(MapLine);\n\nexport { MapArc };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapArc\"] = MapArc;","/**\r\n * Map spline series module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapLineSeries, MapLineSeriesDataItem } from \"./MapLineSeries\";\nimport { MapSpline } from \"./MapSpline\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\n\nvar MapSplineSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapSplineSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapSplineSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapSplineSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return MapSplineSeriesDataItem;\n}(MapLineSeriesDataItem);\n\nexport { MapSplineSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A series of map spline elements.\r\n *\r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapSplineSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapSplineSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapSplineSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapSplineSeries\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapSplineSeries.prototype.createDataItem = function () {\n    return new MapSplineSeriesDataItem();\n  };\n  /**\r\n   * Returns a new line instance of suitable type.\r\n   *\r\n   * @return New line\r\n   */\n\n\n  MapSplineSeries.prototype.createLine = function () {\n    return new MapSpline();\n  };\n\n  return MapSplineSeries;\n}(MapLineSeries);\n\nexport { MapSplineSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;","/**\r\n * Map arc series module.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapLineSeries, MapLineSeriesDataItem } from \"./MapLineSeries\";\nimport { MapArc } from \"./MapArc\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar MapArcSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapArcSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapArcSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapArcSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return MapArcSeriesDataItem;\n}(MapLineSeriesDataItem);\n\nexport { MapArcSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A series of arc elements. (curved lines)\r\n *\r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapArcSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MapArcSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapArcSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapArcSeries\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapArcSeries.prototype.createDataItem = function () {\n    return new MapArcSeriesDataItem();\n  };\n  /**\r\n   * Returns a new line instance of suitable type.\r\n   *\r\n   * @return New line\r\n   */\n\n\n  MapArcSeries.prototype.createLine = function () {\n    return new MapArc();\n  };\n\n  return MapArcSeries;\n}(MapLineSeries);\n\nexport { MapArcSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;","/**\r\n * Zoom control module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Button } from \"../../core/elements/Button\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { keyboard } from \"../../core/utils/Keyboard\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar ZoomControl =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ZoomControl, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ZoomControl() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A target map.\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"ZoomControl\";\n    _this.align = \"right\";\n    _this.valign = \"bottom\";\n    _this.layout = \"vertical\";\n\n    _this.padding(5, 5, 5, 5);\n\n    var interfaceColors = new InterfaceColorSet();\n\n    var plusButton = _this.createChild(Button);\n\n    plusButton.shouldClone = false;\n    plusButton.label.text = \"+\"; //plusButton.fontFamily = \"Verdana\";\n\n    _this.plusButton = plusButton;\n\n    var slider = _this.createChild(Container);\n\n    slider.shouldClone = false;\n    slider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\n    slider.background.fillOpacity = 0.05;\n    slider.background.events.on(\"hit\", _this.handleBackgroundClick, _this, false);\n    slider.events.on(\"sizechanged\", _this.updateThumbSize, _this, false);\n    _this.slider = slider;\n    var thumb = slider.createChild(Button);\n    thumb.shouldClone = false;\n    thumb.padding(0, 0, 0, 0);\n    thumb.draggable = true;\n    thumb.events.on(\"drag\", _this.handleThumbDrag, _this, false);\n    _this.thumb = thumb;\n\n    var minusButton = _this.createChild(Button);\n\n    minusButton.shouldClone = false;\n    minusButton.label.text = \"-\"; //minusButton.fontFamily = \"Verdana\";\n\n    _this.minusButton = minusButton; // Set roles\n\n    _this.thumb.role = \"slider\";\n    _this.thumb.readerLive = \"polite\"; // Set reader text\n\n    _this.thumb.readerTitle = _this.language.translate(\"Use arrow keys to zoom in and out\");\n    _this.minusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom in\");\n    _this.plusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom out\");\n\n    _this.applyTheme();\n\n    _this.events.on(\"propertychanged\", function (event) {\n      if (event.property == \"layout\") {\n        _this.fixLayout();\n      }\n    }, undefined, false);\n\n    _this._disposers.push(_this._chart);\n\n    _this.fixLayout();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  ZoomControl.prototype.fixLayout = function () {\n    var plusButton = this.plusButton;\n    var minusButton = this.minusButton;\n    var thumb = this.thumb;\n    var slider = this.slider;\n    plusButton.x = undefined;\n    plusButton.y = undefined;\n    minusButton.x = undefined;\n    minusButton.y = undefined;\n    thumb.x = undefined;\n    thumb.y = undefined;\n    slider.x = undefined;\n    slider.y = undefined;\n    plusButton.padding(6, 10, 6, 10);\n    minusButton.padding(6, 10, 6, 10);\n    minusButton.label.align = \"center\";\n    minusButton.label.valign = \"middle\";\n    plusButton.label.align = \"center\";\n    plusButton.label.valign = \"middle\";\n\n    if (this.layout == \"vertical\") {\n      this.width = 40;\n      this.height = undefined;\n      minusButton.width = percent(100);\n      minusButton.height = undefined;\n      thumb.width = percent(100);\n      thumb.height = undefined;\n      plusButton.width = percent(100);\n      plusButton.height = undefined;\n      slider.width = percent(100);\n      minusButton.marginTop = 1;\n      plusButton.marginBottom = 2;\n      slider.height = 0;\n      minusButton.toFront();\n      plusButton.toBack();\n      thumb.minX = 0;\n      thumb.maxX = 0;\n      thumb.minY = 0;\n    } else if (this.layout == \"horizontal\") {\n      this.height = 40;\n      this.width = undefined;\n      minusButton.height = percent(100);\n      minusButton.width = undefined;\n      plusButton.height = percent(100);\n      plusButton.width = undefined;\n      thumb.height = percent(100);\n      thumb.width = undefined;\n      thumb.minX = 0;\n      thumb.minY = 0;\n      thumb.maxY = 0;\n      slider.height = percent(100);\n      slider.width = 0;\n      minusButton.toBack();\n      plusButton.toFront();\n    }\n  };\n  /**\r\n   * Handles zoom operation after clicking on the slider background.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  ZoomControl.prototype.handleBackgroundClick = function (event) {\n    var sprite = event.target;\n    var y = event.spritePoint.y;\n    var chart = this.chart;\n    var maxPower = Math.log(chart.maxZoomLevel) / Math.LN2;\n    var minPower = Math.log(chart.minZoomLevel) / Math.LN2;\n    var power = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\n    var zoomLevel = Math.pow(2, power);\n    chart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\n  };\n\n  Object.defineProperty(ZoomControl.prototype, \"chart\", {\n    /**\r\n     * @return Map/chart\r\n     */\n    get: function get() {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A main chart/map that this zoom control is for.\r\n     *\r\n     * @param chart  Map/chart\r\n     */\n    set: function set(chart) {\n      var _this = this;\n\n      this._chart.set(chart, new MultiDisposer([chart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false), chart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false), this.minusButton.events.on(\"hit\", function () {\n        chart.zoomOut(chart.zoomGeoPoint);\n      }, chart, false), getInteraction().body.events.on(\"keyup\", function (ev) {\n        if (_this.topParent.hasFocused) {\n          if (keyboard.isKey(ev.event, \"enter\")) {\n            if (_this.minusButton.isFocused) {\n              chart.zoomOut();\n            } else if (_this.plusButton.isFocused) {\n              chart.zoomIn();\n            }\n          } else if (keyboard.isKey(ev.event, \"plus\")) {\n            chart.zoomIn();\n          } else if (keyboard.isKey(ev.event, \"minus\")) {\n            chart.zoomOut();\n          }\n        }\n      }, chart), this.plusButton.events.on(\"hit\", function () {\n        chart.zoomIn(chart.zoomGeoPoint);\n      }, chart, false)]));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the slider's thumb size based on the available zoom space.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ZoomControl.prototype.updateThumbSize = function () {\n    var chart = this.chart;\n\n    if (chart) {\n      var slider = this.slider;\n      var thumb = this.thumb;\n\n      if (this.layout == \"vertical\") {\n        thumb.minHeight = Math.min(this.slider.pixelHeight, 20);\n        thumb.height = slider.pixelHeight / this.stepCount;\n        thumb.maxY = slider.pixelHeight - thumb.pixelHeight;\n\n        if (thumb.pixelHeight <= 1) {\n          thumb.visible = false;\n        } else {\n          thumb.visible = true;\n        }\n      } else {\n        thumb.minWidth = Math.min(this.slider.pixelWidth, 20);\n        thumb.width = slider.pixelWidth / this.stepCount;\n        thumb.maxX = slider.pixelWidth - thumb.pixelWidth;\n\n        if (thumb.pixelWidth <= 1) {\n          thumb.visible = false;\n        } else {\n          thumb.visible = true;\n        }\n      }\n    }\n  };\n  /**\r\n   * Updates thumb according to current zoom position from map.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ZoomControl.prototype.updateThumb = function () {\n    var slider = this.slider;\n    var chart = this.chart;\n    var thumb = this.thumb;\n\n    if (!thumb.isDown) {\n      var step = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\n\n      if (this.layout == \"vertical\") {\n        thumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\n      } else {\n        thumb.x = slider.pixelWidth * step / this.stepCount;\n      }\n    }\n  };\n  /**\r\n   * Zooms the actual map when slider position changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ZoomControl.prototype.handleThumbDrag = function () {\n    var slider = this.slider;\n    var chart = this.chart;\n    var thumb = this.thumb;\n    var step;\n    var minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\n\n    if (this.layout == \"vertical\") {\n      step = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\n    } else {\n      step = this.stepCount * thumb.pixelX / slider.pixelWidth;\n    }\n\n    step = minStep + step;\n    var zoomLevel = Math.pow(2, step);\n    chart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\n  };\n\n  Object.defineProperty(ZoomControl.prototype, \"stepCount\", {\n    /**\r\n     * Returns the step countfor the slider grid according to map's min and max\r\n     * zoom level settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Step count\r\n     */\n    get: function get() {\n      return Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a background element for slider control.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background\r\n   */\n\n  ZoomControl.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n\n  return ZoomControl;\n}(Container);\n\nexport { ZoomControl };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * Mercator projection.\r\n */\n\nvar Mercator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Mercator, _super);\n\n  function Mercator() {\n    var _this = _super.call(this) || this;\n\n    _this.d3Projection = d3geo.geoMercator();\n    return _this;\n  }\n\n  return Mercator;\n}(Projection);\n\nexport { Mercator };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Mercator\"] = Mercator;","export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function (x) {\n  return x > 0 ? 1 : x < 0 ? -1 : 0;\n};\nexport var sin = Math.sin;\nexport var tan = Math.tan;\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, cos, epsilon, pi, sin, sinci, sqrt } from \"./math\";\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y),\n      sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n} // Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\n\naitoffRaw.invert = function (x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x,\n      y1 = y,\n      i = 25;\n\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n\n  return [x1, y1];\n};\n\nexport default function () {\n  return projection(aitoffRaw).scale(152.63);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan } from \"./math\";\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [4 / 3 * x * (3 + x2 - 3 * y2), 4 / 3 * y * (3 + 3 * x2 - y2)];\n}\n\naugustRaw.invert = function (x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d), sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)];\n};\n\nexport default function () {\n  return projection(augustRaw).scale(66.1603);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan } from \"./math\";\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi ? [lambda, log(tan(quarterPi + phi / 2))] : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function (x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi,\n      i = 25,\n      delta,\n      y0;\n\n  do {\n    var cosPhi_2 = cos(phi / 2),\n        tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function () {\n  return projection(bakerRaw).scale(112.314);\n}","import { geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, sin } from \"./math\";\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function (x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [lambda * cos(phi) / cos(phi /= 2), 2 * sin(phi)];\n}\n\nhammerQuarticAuthalicRaw.invert = function (x, y) {\n  var phi = 2 * asin(y / 2);\n  return [x * cos(phi / 2) / cos(phi), phi];\n};\n\nexport default function () {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function (_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p.scale(169.529);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2 } from \"./math\";\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi),\n      i = 30,\n      delta;\n\n  do {\n    phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  } while (abs(delta) > epsilon && --i > 0);\n\n  return phi / 2;\n}\nexport function mollweideBromleyRaw(cx, cy, cp) {\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function (x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\nexport default function () {\n  return projection(mollweideRaw).scale(169.529);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { mollweideBromleyTheta } from \"./mollweide\";\nimport { abs, cos, epsilon, pi, quarterPi, sin, sqrt2 } from \"./math\";\nvar k = 2.00276,\n    w = 1.11072;\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function (x, y) {\n  var ky = k * y,\n      theta = y < 0 ? -quarterPi : quarterPi,\n      i = 25,\n      delta,\n      phi;\n\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function () {\n  return projection(boggsRaw).scale(160.857);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { cos } from \"./math\";\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function (x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function () {\n  return projection(sinusoidalRaw).scale(152.63);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi } from \"./math\";\nimport { mollweideBromleyRaw } from \"./mollweide\";\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\nexport default function () {\n  return projection(bromleyRaw).scale(152.63);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, pi, sin, sqrt, sqrtPi } from \"./math\";\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [2 / sqrtPi * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function (x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function () {\n  return projection(collignonRaw).scale(95.6464).center([0, 30]);\n}","import { asin, atan2, cos, sin, sqrt, tan } from \"./math\";\nimport parallel1 from \"./parallel1\";\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function (x, y) {\n    if (x) y *= sin(x) / x;\n    var cosLambda = cos(x);\n    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];\n  } : function (x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n  return forward;\n}\nexport default function () {\n  return parallel1(craigRaw).scale(249.828).clipAngle(90);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, cos, sin, sqrt, sqrtPi } from \"./math\";\nvar sqrt3 = sqrt(3);\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function (x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function () {\n  return projection(crasterRaw).scale(156.19);\n}","import { asin, cos, sin } from \"./math\";\nimport parallel1 from \"./parallel1\";\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function (x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(cylindricalEqualAreaRaw).parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n  .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, pi, sqrt } from \"./math\";\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [alpha * lambda * (1 - abs(phi) / pi), alpha * phi];\n}\n\neckert1Raw.invert = function (x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [x / (alpha * (1 - abs(phi) / pi)), phi];\n};\n\nexport default function () {\n  return projection(eckert1Raw).scale(165.664);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, pi, sign, sin, sqrt } from \"./math\";\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [2 / sqrt(6 * pi) * lambda * alpha, sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)];\n}\n\neckert2Raw.invert = function (x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [x * sqrt(6 * pi) / (2 * alpha), sign(y) * asin((4 - alpha * alpha) / 3)];\n};\n\nexport default function () {\n  return projection(eckert2Raw).scale(165.664);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi, sqrt } from \"./math\";\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))), 4 / k * phi];\n}\n\neckert3Raw.invert = function (x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))), y * k / 2];\n};\n\nexport default function () {\n  return projection(eckert3Raw).scale(180.739);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math\";\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n\n  return [2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)), 2 * sqrt(pi / (4 + pi)) * sin(phi)];\n}\n\neckert4Raw.invert = function (x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [x / (2 / sqrt(pi * (4 + pi)) * (1 + c)), asin((k + A * (c + 2)) / (2 + halfPi))];\n};\n\nexport default function () {\n  return projection(eckert4Raw).scale(180.739);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { cos, pi, sqrt } from \"./math\";\nexport function eckert5Raw(lambda, phi) {\n  return [lambda * (1 + cos(phi)) / sqrt(2 + pi), 2 * phi / sqrt(2 + pi)];\n}\n\neckert5Raw.invert = function (x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [k * x / (1 + cos(phi)), phi];\n};\n\nexport default function () {\n  return projection(eckert5Raw).scale(173.044);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math\";\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n\n  k = sqrt(2 + pi);\n  return [lambda * (1 + cos(phi)) / k, 2 * phi / k];\n}\n\neckert6Raw.invert = function (x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [x * 2 * k / (1 + cos(y *= k)), asin((y + sin(y)) / j)];\n};\n\nexport default function () {\n  return projection(eckert6Raw).scale(173.044);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { augustRaw } from \"./august\";\nimport { abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2 } from \"./math\";\nvar eisenlohrK = 3 + 2 * sqrt2;\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [eisenlohrK * (c * (v - 1 / v) - 2 * log(v)), eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))];\n}\n\neisenlohrRaw.invert = function (x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0],\n      phi = p[1],\n      i = 20,\n      p;\n  x /= eisenlohrK, y /= eisenlohrK;\n\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = sqrt2 * c1 + (c0 + s0) * k,\n        v1 = sqrt2 * c1 + (c0 - s0) * k,\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function () {\n  return projection(eisenlohrRaw).scale(62.5271);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, cos, radians, sqrt, tan } from \"./math\";\nvar faheyK = cos(35 * radians);\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function (x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function () {\n  return projection(faheyRaw).scale(137.152);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, cos, sqrtPi, tan } from \"./math\";\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2,\n      cosk = cos(k);\n  return [2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function (x, y) {\n  var k = atan(y / sqrtPi),\n      cosk = cos(k),\n      phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function () {\n  return projection(foucautRaw).scale(135.264);\n}","import { abs, epsilon } from \"./math\"; // Newton-Raphson\n// Solve f(x) = y, start from x\n\nexport function solve(f, y, x) {\n  var steps = 100,\n      delta,\n      f0,\n      f1;\n  x = x === undefined ? 0 : +x;\n  y = +y;\n\n  do {\n    f0 = f(x);\n    f1 = f(x + epsilon);\n    if (f0 === f1) f1 = f0 + epsilon;\n    x -= delta = -1 * epsilon * (f0 - y) / (f0 - f1);\n  } while (steps-- > 0 && abs(delta) > epsilon);\n\n  return steps < 0 ? NaN : x;\n}","import { geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt } from \"./math\";\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      x = r;\n      var i = 50,\n          delta;\n\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n\n    return p;\n  }\n\n  forward.invert = function (x, y) {\n    var r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n        if (abs(delta) < epsilon2 || ! --i) break;\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (sinx - x_halfPi * 2 * (halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) - rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function (x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n} // Numerical integration: trapezoidal rule.\n\n\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n\n  for (var i = 1, x = a; i < n; ++i) {\n    s += 2 * f(x += h);\n  }\n\n  return s * 0.5 * h;\n}\n\nexport default function () {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function (_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function (_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return p.rotate([90, -40]).scale(91.7095).clipAngle(180 - 1e-3);\n}","import { abs, asin, cos, epsilon, pi, sin, sqrt } from \"./math\";\nexport default function (a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function (x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda,\n        deltaPhi,\n        i = 50;\n\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = lambda / pi * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n\n    return [lambda, phi];\n  };\n\n  return forward;\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\nexport default function () {\n  return projection(ginzburg4Raw).scale(149.995);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435, 0.082742);\nexport default function () {\n  return projection(ginzburg5Raw).scale(153.93);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\nimport { pi } from \"./math\";\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\nexport default function () {\n  return projection(ginzburg6Raw).scale(130.945);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon } from \"./math\";\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2), phi * (1 + phi2 / 12)];\n}\n\nginzburg8Raw.invert = function (x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50,\n      delta;\n\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n\n  i = 50;\n  x /= 1 - 0.162388 * phi2;\n\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n\n  return [lambda, phi];\n};\n\nexport default function () {\n  return projection(ginzburg8Raw).scale(131.747);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965, 0.031762);\nexport default function () {\n  return projection(ginzburg9Raw).scale(131.087);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt } from \"./math\";\nimport squareRaw from \"./square\";\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return point[0] *= sLambda, point[1] *= -sPhi, point;\n}\n\ngringortenRaw.invert = function (x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n  if (lambda === 0) return [0, -(h + r * a)];\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta; // Slower but accurate bisection method.\n\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x,\n        x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n\n    do {\n      var g = sqrt(a2 - x * x),\n          f = x * (zeta + mu * g) + nu * asin(x / a) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  } // Newton-Raphson.\n  else {\n      x = epsilon, i = 25;\n\n      do {\n        var x2 = x * x,\n            g2 = sqrt(a2 - x2),\n            zetaMug = zeta + mu * g2,\n            f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n            df = zetaMug + (nu - mu * x2) / g2;\n        x -= delta = g2 ? f2 / df : 0;\n      } while (abs(delta) > epsilon && --i > 0);\n    }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = 1 - r2 + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function () {\n  return projection(squareRaw(gringortenRaw)).scale(239.75);\n}","import { abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh } from \"./math\"; // Returns [sn, cn, dn](u + iv|m).\n\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [[0, b[0] / b[1]], [1 / b[1], 0], [b[2] / b[1], 0]];\n  }\n\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [[a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c], [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c], [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]];\n} // Returns [sn, cn, dn, ph](u|m).\n\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [t - ai * b, b + ai * t, 1 - m * t * t / 2, u - ai];\n  }\n\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [t + ai * (twon - u) / (b * b), phi - ai * t * phi * (twon - u), phi + ai * t * phi * (twon + u), 2 * atan(exp(u)) - halfPi + ai * (twon - u) / b];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n} // Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\n\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi), ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)];\n  }\n\n  return [0, ellipticF(atan(sinhPsi), 1 - m) * sign(psi)];\n} // Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\n\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n\n  return phi / (pow(2, i) * a);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { ellipticF, ellipticFi, ellipticJi } from \"./elliptic\";\nimport { abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan } from \"./math\";\nimport squareRaw from \"./square\";\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)), -0.25 * log(t * t + 4 * x2) + 0.5 * log(y_1 * y_1 + x2)];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nguyouRaw.invert = function (x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [lambda, 2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi];\n};\n\nexport default function () {\n  return projection(squareRaw(guyouRaw)).scale(151.496);\n}","import { range } from \"d3-array\";\nimport { geoStream, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { collignonRaw } from \"./collignon\";\nimport { cylindricalEqualAreaRaw } from \"./cylindricalEqualArea\";\nimport { abs, epsilon, floor, max, min, pi, radians, sqrtPi, tau } from \"./math\";\nvar healpixParallel = 41 + 48 / 36 + 37 / 3600,\n    // for K=3; TODO automate\nhealpixLambert = cylindricalEqualAreaRaw(0);\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + dy1 * dy1 * 4 / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function (x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphereTop(x, i) {\n  return [x, i & 1 ? 90 - epsilon : healpixParallel];\n}\n\nfunction sphereBottom(x, i) {\n  return [x, i & 1 ? -90 + epsilon : -healpixParallel];\n}\n\nfunction sphereNudge(d) {\n  return [d[0] * (1 - epsilon), d[1]];\n}\n\nfunction sphere(step) {\n  var c = [].concat(range(-180, 180 + step / 2, step).map(sphereTop), range(180, -180 - step / 2, -step).map(sphereBottom));\n  return {\n    type: \"Polygon\",\n    coordinates: [step === 180 ? c.map(sphereNudge) : c]\n  };\n}\n\nexport default function () {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function (_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      geoStream(sphere(180 / H), sphereStream);\n    };\n\n    return rotateStream;\n  };\n\n  return p.scale(239.75);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt } from \"./math\";\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n\n    if (t && t < 2) {\n      var theta = halfPi - phi,\n          i = 25,\n          delta;\n\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 - 0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n\n    return [rho * sin(omega), rho0 - rho * cos(omega)];\n  }\n\n  forward.invert = function (x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [asin(x / sqrt(rho2)) * pi / Bt_Bt1, asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)];\n  };\n\n  return forward;\n}\nexport default function () {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function (_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p.scale(167.774).center([0, 18.67]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { mollweideRaw } from \"./mollweide\";\nimport { sinusoidalRaw } from \"./sinusoidal\";\nexport var sinuMollweidePhi = 0.7109889596207567;\nexport var sinuMollweideY = 0.0528035274542;\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function (x, y) {\n  return y > -sinuMollweidePhi ? mollweideRaw.invert(x, y - sinuMollweideY) : sinusoidalRaw.invert(x, y);\n};\n\nexport default function () {\n  return projection(sinuMollweideRaw).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs } from \"./math\";\nimport { mollweideRaw } from \"./mollweide\";\nimport { sinusoidalRaw } from \"./sinusoidal\";\nimport { sinuMollweidePhi, sinuMollweideY } from \"./sinuMollweide\";\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function (x, y) {\n  return abs(y) > sinuMollweidePhi ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY)) : sinusoidalRaw.invert(x, y);\n};\n\nexport default function () {\n  return projection(homolosineRaw).scale(152.63);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi, sqrt, tau } from \"./math\";\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function (x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function () {\n  return projection(kavrayskiy7Raw).scale(158.837);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin } from \"./math\";\nexport function lagrangeRaw(n) {\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [2 * sin(lambda) / c, (v - 1 / v) / c];\n  }\n\n  forward.invert = function (x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [atan2(2 * x, 1 - x2 - y2) / n, asin((t - 1) / (t + 1))];\n  };\n\n  return forward;\n}\nexport default function () {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function (_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p.scale(124.75);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2 } from \"./math\";\nvar pi_sqrt2 = pi / sqrt2;\nexport function larriveeRaw(lambda, phi) {\n  return [lambda * (1 + sqrt(cos(phi))) / 2, phi / (cos(phi / 2) * cos(lambda / 6))];\n}\n\nlarriveeRaw.invert = function (x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;else lambda += 6 * acos(pi_sqrt2 / y0);\n\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = phi / cosPhi_2 * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function () {\n  return projection(larriveeRaw).scale(97.2672);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon, pi, sign } from \"./math\";\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)), phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))];\n}\n\nlaskowskiRaw.invert = function (x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n\n  return i && [lambda, phi];\n};\n\nexport default function () {\n  return projection(laskowskiRaw).scale(139.98);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2 } from \"./math\";\nexport function littrowRaw(lambda, phi) {\n  return [sin(lambda) / cos(phi), tan(phi) * cos(lambda)];\n}\n\nlittrowRaw.invert = function (x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      x2_y2_1 = x2 + y2_1,\n      cosPhi = x ? sqrt1_2 * sqrt((x2_y2_1 - sqrt(x2_y2_1 * x2_y2_1 - 4 * x2)) / x2) : 1 / sqrt(y2_1);\n  return [asin(x * cosPhi), sign(y) * acos(cosPhi)];\n};\n\nexport default function () {\n  return projection(littrowRaw).scale(144.049).clipAngle(90 - 1e-3);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, exp, log, quarterPi, pi, tan } from \"./math\";\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function (x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function () {\n  return projection(millerRaw).scale(108.318);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, cos, sin, sqrt } from \"./math\";\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7, 9 * sin(theta / 3) / sqrt7];\n}\n\nmtFlatPolarParabolicRaw.invert = function (x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)), asin(sin(theta) * 3 * sqrt6 / 7)];\n};\n\nexport default function () {\n  return projection(mtFlatPolarParabolicRaw).scale(164.859);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2 } from \"./math\";\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n\n  return [lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2), 2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)];\n}\n\nmtFlatPolarQuarticRaw.invert = function (x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)), asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))];\n};\n\nexport default function () {\n  return projection(mtFlatPolarQuarticRaw).scale(188.209);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math\";\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n\n  return [A * (0.5 + cos(theta)) * lambda / 1.5, A * theta];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function (x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [1.5 * x / (A * (0.5 + cos(theta))), asin((theta / 2 + sin(theta)) / (1 + pi / 4))];\n};\n\nexport default function () {\n  return projection(mtFlatPolarSinusoidalRaw).scale(166.518);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon2 } from \"./math\";\nexport function naturalEarth2Raw(lambda, phi) {\n  var phi2 = phi * phi,\n      phi4 = phi2 * phi2,\n      phi6 = phi2 * phi4;\n  return [lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))];\n}\n\nnaturalEarth2Raw.invert = function (x, y) {\n  var phi = y,\n      i = 25,\n      delta,\n      phi2,\n      phi4,\n      phi6;\n\n  do {\n    phi2 = phi * phi;\n    phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4)) - y) / (1.01183 + phi4 * phi4 * (9 * -0.02625 + 11 * 0.01926 * phi2 + 13 * -0.00396 * phi4));\n  } while (abs(delta) > epsilon2 && --i > 0);\n\n  phi2 = phi * phi;\n  phi4 = phi2 * phi2;\n  phi6 = phi2 * phi4;\n  return [x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi];\n};\n\nexport default function () {\n  return projection(naturalEarth2Raw).scale(175.295);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, cos, epsilon, tan } from \"./math\";\nexport function nellHammerRaw(lambda, phi) {\n  return [lambda * (1 + cos(phi)) / 2, 2 * (phi - tan(phi / 2))];\n}\n\nnellHammerRaw.invert = function (x, y) {\n  var p = y / 2;\n\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n\n  return [2 * x / (1 + cos(y)), y];\n};\n\nexport default function () {\n  return projection(nellHammerRaw).scale(152.63);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, cos, halfPi, pi, sign, sin, sqrt } from \"./math\";\nimport { solve } from \"./newton.js\"; // Based on Torben Jansen's implementation\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\n\nexport function nicolosiRaw(lambda, phi) {\n  var sinPhi = sin(phi),\n      q = cos(phi),\n      s = sign(lambda);\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];else if (phi === 0) return [lambda, 0];else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\n  var b = pi / (2 * lambda) - 2 * lambda / pi,\n      c = 2 * phi / pi,\n      d = (1 - c * c) / (sinPhi - c);\n  var b2 = b * b,\n      d2 = d * d,\n      b2d2 = 1 + b2 / d2,\n      d2b2 = 1 + d2 / b2;\n  var M = (b * sinPhi / d - b / 2) / b2d2,\n      N = (d2 * sinPhi / b2 + d / 2) / d2b2,\n      m = M * M + q * q / b2d2,\n      n = N * N - (d2 * sinPhi * sinPhi / b2 + d * sinPhi - 1) / d2b2;\n  return [halfPi * (M + sqrt(m) * s), halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)];\n}\n\nnicolosiRaw.invert = function (x, y) {\n  x /= halfPi;\n  y /= halfPi;\n  var x2 = x * x,\n      y2 = y * y,\n      x2y2 = x2 + y2,\n      pi2 = pi * pi;\n  return [x ? (x2y2 - 1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0, solve(function (phi) {\n    return x2y2 * (pi * sin(phi) - 2 * phi) * pi + 4 * phi * phi * (y - sin(phi)) + 2 * pi * phi - pi2 * y;\n  }, 0)];\n};\n\nexport default function () {\n  return projection(nicolosiRaw).scale(127.267);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon } from \"./math\"; // Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [lambda, phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))];\n}\n\npattersonRaw.invert = function (x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y,\n      delta;\n\n  do {\n    // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = (yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function () {\n  return projection(pattersonRaw).scale(139.319);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan } from \"./math\";\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [sin(k) / tanPhi, phi + (1 - cos(k)) / tanPhi];\n}\n\npolyconicRaw.invert = function (x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10,\n      delta;\n\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n\n  tanPhi = tan(phi);\n  return [(abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi), phi];\n};\n\nexport default function () {\n  return projection(polyconicRaw).scale(103.74);\n}","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [[0, 90], [-90, 0], [0, 0], [90, 0], [180, 0], [0, -90]];\nexport default [[0, 2, 1], [0, 3, 2], [5, 1, 2], [5, 2, 3], [0, 1, 4], [0, 4, 3], [5, 4, 1], [5, 3, 4]].map(function (face) {\n  return face.map(function (i) {\n    return octahedron[i];\n  });\n});","import { geoCentroid as centroid, geoProjection as projection } from \"d3-geo\";\nimport { collignonRaw } from \"../collignon\";\nimport { pi, sqrt } from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function (x, y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function (faceProjection) {\n  faceProjection = faceProjection || function (face) {\n    var c = centroid({\n      type: \"MultiPoint\",\n      coordinates: face\n    });\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function (face) {\n    return {\n      face: face,\n      project: faceProjection(face)\n    };\n  });\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n  return polyhedral(faces[0], function (lambda, phi) {\n    return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5];\n  }).angle(-30).scale(121.906).center([0, 48.5904]);\n}","import { abs, acos, asin, atan, cos, epsilon, pi, sin, tan } from \"./math\";\nimport parallel1 from \"./parallel1\";\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [sin(E) * cotPhi, phi + (1 - cos(E)) * cotPhi - phi0];\n  } // TODO return null for points outside outline.\n\n\n  forward.invert = function (x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10,\n        delta;\n\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A, phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(rectangularPolyconicRaw).scale(131.215);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians } from \"./math\";\nvar K = [[0.9986, -0.062], [1.0000, 0.0000], [0.9986, 0.0620], [0.9954, 0.1240], [0.9900, 0.1860], [0.9822, 0.2480], [0.9730, 0.3100], [0.9600, 0.3720], [0.9427, 0.4340], [0.9216, 0.4958], [0.8962, 0.5571], [0.8679, 0.6176], [0.8350, 0.6769], [0.7986, 0.7346], [0.7597, 0.7903], [0.7186, 0.8435], [0.6732, 0.8936], [0.6213, 0.9394], [0.5722, 0.9761], [0.5322, 1.0000]];\nK.forEach(function (d) {\n  d[1] *= 1.0144;\n});\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)];\n}\n\nrobinsonRaw.invert = function (x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50,\n          delta;\n\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n\n      break;\n    }\n  } while (--i0 >= 0);\n\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), phi * radians];\n};\n\nexport default function () {\n  return projection(robinsonRaw).scale(152.63);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, quarterPi, sin, tan } from \"./math\";\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t];\n}\n\ntimesRaw.invert = function (x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [x / (0.74482 - 0.34588 * s * s), 2 * atan(t)];\n};\n\nexport default function () {\n  return projection(timesRaw).scale(146.153);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan } from \"./math\";\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2, sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2];\n}\n\nvanDerGrintenRaw.invert = function (x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x), sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))];\n};\n\nexport default function () {\n  return projection(vanDerGrintenRaw).scale(79.4183);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan } from \"./math\";\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [sign(lambda) * pi * x1, sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))];\n}\n\nvanDerGrinten2Raw.invert = function (x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [sign(x) * pi * (B - A), sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))];\n};\n\nexport default function () {\n  return projection(vanDerGrinten2Raw).scale(79.4183);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan } from \"./math\";\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A), pi * y1];\n}\n\nvanDerGrinten3Raw.invert = function (x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0, halfPi * sin(2 * atan(y1))];\n};\n\nexport default function () {\n  return projection(vanDerGrinten3Raw).scale(79.4183);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon, halfPi, pi, sign, sqrt } from \"./math\";\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [sign(lambda) * halfPi * x1, sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)];\n}\n\nvanDerGrinten4Raw.invert = function (x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  y /= pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = 2 * y,\n      i = 50;\n\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta > epsilon && --i > 0);\n\n  return [sign(x) * (sqrt(D * D + 4) + D) * pi / 4, halfPi * B];\n};\n\nexport default function () {\n  return projection(vanDerGrinten4Raw).scale(127.16);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { acos, asin, atan2, cos, degrees, epsilon, halfPi, max, min, pi, radians, sin, sqrt, tan } from \"./math\";\n\nfunction wagnerFormula(cx, cy, m1, m2, n) {\n  function forward(lambda, phi) {\n    var s = m1 * sin(m2 * phi),\n        c0 = sqrt(1 - s * s),\n        c1 = sqrt(2 / (1 + c0 * cos(lambda *= n)));\n    return [cx * c0 * c1 * sin(lambda), cy * s * c1];\n  }\n\n  forward.invert = function (x, y) {\n    var t1 = x / cx,\n        t2 = y / cy,\n        p = sqrt(t1 * t1 + t2 * t2),\n        c = 2 * asin(p / 2);\n    return [atan2(x * tan(c), cx * p) / n, p && asin(y * sin(c) / (cy * m1 * p)) / m2];\n  };\n\n  return forward;\n}\n\nexport function wagnerRaw(poleline, parallels, inflation, ratio) {\n  // 60 is always used as reference parallel\n  var phi1 = pi / 3; // sanitizing the input values\n  // poleline and parallels may approximate but never equal 0\n\n  poleline = max(poleline, epsilon);\n  parallels = max(parallels, epsilon); // poleline must be <= 90; parallels may approximate but never equal 180\n\n  poleline = min(poleline, halfPi);\n  parallels = min(parallels, pi - epsilon); // 0 <= inflation <= 99.999\n\n  inflation = max(inflation, 0);\n  inflation = min(inflation, 100 - epsilon); // ratio > 0.\n  // sensible values, i.e. something that renders a map which still can be\n  // recognized as world map, are e.g. 20 <= ratio <= 1000.\n\n  ratio = max(ratio, epsilon); // convert values from boehm notation\n  // areal inflation e.g. from 0 to 1 or 20 to 1.2:\n\n  var vinflation = inflation / 100 + 1; // axial ratio e.g. from 200 to 2:\n\n  var vratio = ratio / 100; // the other ones are a bit more complicated...\n\n  var m2 = acos(vinflation * cos(phi1)) / phi1,\n      m1 = sin(poleline) / sin(m2 * halfPi),\n      n = parallels / pi,\n      k = sqrt(vratio * sin(poleline / 2) / sin(parallels / 2)),\n      cx = k / sqrt(n * m1 * m2),\n      cy = 1 / (k * sqrt(n * m1 * m2));\n  return wagnerFormula(cx, cy, m1, m2, n);\n}\nexport default function () {\n  // default values generate wagner8\n  var poleline = 65 * radians,\n      parallels = 60 * radians,\n      inflation = 20,\n      ratio = 200,\n      mutate = projectionMutator(wagnerRaw),\n      projection = mutate(poleline, parallels, inflation, ratio);\n\n  projection.poleline = function (_) {\n    return arguments.length ? mutate(poleline = +_ * radians, parallels, inflation, ratio) : poleline * degrees;\n  };\n\n  projection.parallels = function (_) {\n    return arguments.length ? mutate(poleline, parallels = +_ * radians, inflation, ratio) : parallels * degrees;\n  };\n\n  projection.inflation = function (_) {\n    return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;\n  };\n\n  projection.ratio = function (_) {\n    return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;\n  };\n\n  return projection.scale(163.775);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { sqrt, pi } from \"./math\";\nimport { mollweideBromleyRaw } from \"./mollweide\";\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\nexport default function () {\n  return projection(wagner4Raw).scale(176.84);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi, sqrt } from \"./math\";\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function (x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function () {\n  return projection(wagner6Raw).scale(152.63);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, atan2, cos, sin, sqrt, tan } from \"./math\";\nexport function wagner7Raw(lambda, phi) {\n  var s = 0.90631 * sin(phi),\n      c0 = sqrt(1 - s * s),\n      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));\n  return [2.66723 * c0 * c1 * sin(lambda), 1.24104 * s * c1];\n}\n\nwagner7Raw.invert = function (x, y) {\n  var t1 = x / 2.66723,\n      t2 = y / 1.24104,\n      p = sqrt(t1 * t1 + t2 * t2),\n      c = 2 * asin(p / 2);\n  return [3 * atan2(x * tan(c), 2.66723 * p), p && asin(y * sin(c) / (1.24104 * 0.90631 * p))];\n};\n\nexport default function () {\n  return projection(wagner7Raw).scale(172.632);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, atan2, cos, sin, sqrt } from \"./math\";\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [sinLambda * cosPhi - cosLambda * sin1_Phi, -cosLambda * cosPhi - sinLambda * sin1_Phi];\n}\n\nwiechelRaw.invert = function (x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [atan2(k * b, D * (1 + w)), D ? -asin(k * a / D) : 0];\n};\n\nexport default function () {\n  return projection(wiechelRaw).rotate([0, -90, 45]).scale(124.75).clipAngle(180 - 1e-3);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { aitoffRaw } from \"./aitoff\";\nimport { halfPi, epsilon, sin, cos, sqrt, abs, acos } from \"./math\";\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [(coordinates[0] + lambda / halfPi) / 2, (coordinates[1] + phi) / 2];\n}\n\nwinkel3Raw.invert = function (x, y) {\n  var lambda = x,\n      phi = y,\n      i = 25;\n\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n\n  return [lambda, phi];\n};\n\nexport default function () {\n  return projection(winkel3Raw).scale(158.837);\n}","/**\r\n * Functionality for Miller projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\"; // @ts-ignore\n\nimport * as d3geoprojection from \"d3-geo-projection\";\n/**\r\n * Miller projection.\r\n */\n\nvar Miller =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Miller, _super);\n\n  function Miller() {\n    var _this = _super.call(this) || this;\n\n    _this.d3Projection = d3geoprojection.geoMiller();\n    return _this;\n  }\n\n  return Miller;\n}(Projection);\n\nexport { Miller };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Miller\"] = Miller;","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\"; // @ts-ignore\n\nimport * as d3geoprojection from \"d3-geo-projection\";\n/**\r\n * Eckert6 projection.\r\n */\n\nvar Eckert6 =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Eckert6, _super);\n\n  function Eckert6() {\n    var _this = _super.call(this) || this;\n\n    _this.d3Projection = d3geoprojection.geoEckert6();\n    return _this;\n  }\n\n  return Eckert6;\n}(Projection);\n\nexport { Eckert6 };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * Orthographic projection.\r\n */\n\nvar Orthographic =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Orthographic, _super);\n\n  function Orthographic() {\n    var _this = _super.call(this) || this;\n\n    _this.d3Projection = d3geo.geoOrthographic();\n    return _this;\n  }\n\n  return Orthographic;\n}(Projection);\n\nexport { Orthographic };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * Orthographic projection.\r\n */\n\nvar Stereographic =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Stereographic, _super);\n\n  function Stereographic() {\n    var _this = _super.call(this) || this;\n\n    _this.d3Projection = d3geo.geoStereographic();\n    return _this;\n  }\n\n  return Stereographic;\n}(Projection);\n\nexport { Stereographic };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Stereographic\"] = Stereographic;","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * Orthographic projection.\r\n */\n\nvar Albers =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Albers, _super);\n\n  function Albers() {\n    var _this = _super.call(this) || this;\n\n    _this.d3Projection = d3geo.geoAlbers();\n    return _this;\n  }\n\n  return Albers;\n}(Projection);\n\nexport { Albers };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Albers\"] = Albers;","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * Orthographic projection.\r\n */\n\nvar AlbersUsa =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AlbersUsa, _super);\n\n  function AlbersUsa() {\n    var _this = _super.call(this) || this;\n\n    _this.d3Projection = d3geo.geoAlbersUsa();\n    return _this;\n  }\n\n  return AlbersUsa;\n}(Projection);\n\nexport { AlbersUsa };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AlbersUsa\"] = AlbersUsa;","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * Orthographic projection.\r\n */\n\nvar NaturalEarth1 =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(NaturalEarth1, _super);\n\n  function NaturalEarth1() {\n    var _this = _super.call(this) || this;\n\n    _this.d3Projection = d3geo.geoNaturalEarth1();\n    return _this;\n  }\n\n  return NaturalEarth1;\n}(Projection);\n\nexport { NaturalEarth1 };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"NaturalEarth1\"] = NaturalEarth1;","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * Orthographic projection.\r\n */\n\nvar AzimuthalEqualArea =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AzimuthalEqualArea, _super);\n\n  function AzimuthalEqualArea() {\n    var _this = _super.call(this) || this;\n\n    _this.d3Projection = d3geo.geoAzimuthalEqualArea();\n    return _this;\n  }\n\n  return AzimuthalEqualArea;\n}(Projection);\n\nexport { AzimuthalEqualArea };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AzimuthalEqualArea\"] = AzimuthalEqualArea;","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * Orthographic projection.\r\n */\n\nvar EqualEarth =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(EqualEarth, _super);\n\n  function EqualEarth() {\n    var _this = _super.call(this) || this;\n\n    _this.d3Projection = d3geo.geoEqualEarth();\n    return _this;\n  }\n\n  return EqualEarth;\n}(Projection);\n\nexport { EqualEarth };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"EqualEarth\"] = EqualEarth;","/**\r\n * Duplicated\r\n */\nexport { LegendDataItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n/**\r\n * Maps\r\n */\n\nexport { MapChartDataItem, MapChart } from \"./.internal/charts/types/MapChart\";\nexport { MapSeriesDataItem, MapSeries } from \"./.internal/charts/map/MapSeries\";\nexport { MapObject } from \"./.internal/charts/map/MapObject\";\nexport { MapPolygon } from \"./.internal/charts/map/MapPolygon\";\nexport { MapImage } from \"./.internal/charts/map/MapImage\";\nexport { MapLine } from \"./.internal/charts/map/MapLine\";\nexport { MapLineObject } from \"./.internal/charts/map/MapLineObject\";\nexport { MapSpline } from \"./.internal/charts/map/MapSpline\";\nexport { MapArc } from \"./.internal/charts/map/MapArc\";\nexport { Graticule } from \"./.internal/charts/map/Graticule\";\nexport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./.internal/charts/map/MapPolygonSeries\";\nexport { MapLineSeriesDataItem, MapLineSeries } from \"./.internal/charts/map/MapLineSeries\";\nexport { MapSplineSeriesDataItem, MapSplineSeries } from \"./.internal/charts/map/MapSplineSeries\";\nexport { MapImageSeriesDataItem, MapImageSeries } from \"./.internal/charts/map/MapImageSeries\";\nexport { MapArcSeriesDataItem, MapArcSeries } from \"./.internal/charts/map/MapArcSeries\";\nexport { GraticuleSeriesDataItem, GraticuleSeries } from \"./.internal/charts/map/GraticuleSeries\";\nexport { multiPolygonToGeo, multiLineToGeo, multiPointToGeo, pointToGeo, multiGeoPolygonToMultipolygon, getBackground, multiGeoLineToMultiLine, multiGeoToPoint, getCircle } from \"./.internal/charts/map/MapUtils\";\nexport { ZoomControl } from \"./.internal/charts/map/ZoomControl\";\nexport { SmallMap } from \"./.internal/charts/map/SmallMap\";\n/**\r\n * Elements: projections\r\n */\n\nexport { Projection } from \"./.internal/charts/map/projections/Projection\";\nimport * as projections from \"./.internal/charts/map/projections\";\nexport { projections };\nimport * as geo from \"./.internal/charts/map/Geo\";\nexport { geo };\nimport * as d3geo from \"d3-geo\";\nexport { d3geo };"],"sourceRoot":""}